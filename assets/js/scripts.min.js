/* Bootstrap */
+function(a){"use strict";function b(){var a=document.createElement("bootstrap"),b={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var c in b)if(void 0!==a.style[c])return{end:b[c]}}a.fn.emulateTransitionEnd=function(b){var c=!1,d=this;a(this).one(a.support.transition.end,function(){c=!0});var e=function(){c||a(d).trigger(a.support.transition.end)};return setTimeout(e,b),this},a(function(){a.support.transition=b()})}(jQuery),+function(a){"use strict";var b='[data-dismiss="alert"]',c=function(c){a(c).on("click",b,this.close)};c.prototype.close=function(b){function c(){f.trigger("closed.bs.alert").remove()}var d=a(this),e=d.attr("data-target");e||(e=d.attr("href"),e=e&&e.replace(/.*(?=#[^\s]*$)/,""));var f=a(e);b&&b.preventDefault(),f.length||(f=d.hasClass("alert")?d:d.parent()),f.trigger(b=a.Event("close.bs.alert")),b.isDefaultPrevented()||(f.removeClass("in"),a.support.transition&&f.hasClass("fade")?f.one(a.support.transition.end,c).emulateTransitionEnd(150):c())};var d=a.fn.alert;a.fn.alert=function(b){return this.each(function(){var d=a(this),e=d.data("bs.alert");e||d.data("bs.alert",e=new c(this)),"string"==typeof b&&e[b].call(d)})},a.fn.alert.Constructor=c,a.fn.alert.noConflict=function(){return a.fn.alert=d,this},a(document).on("click.bs.alert.data-api",b,c.prototype.close)}(jQuery),+function(a){"use strict";var b=function(c,d){this.$element=a(c),this.options=a.extend({},b.DEFAULTS,d)};b.DEFAULTS={loadingText:"loading..."},b.prototype.setState=function(a){var b="disabled",c=this.$element,d=c.is("input")?"val":"html",e=c.data();a+="Text",e.resetText||c.data("resetText",c[d]()),c[d](e[a]||this.options[a]),setTimeout(function(){"loadingText"==a?c.addClass(b).attr(b,b):c.removeClass(b).removeAttr(b)},0)},b.prototype.toggle=function(){var a=this.$element.closest('[data-toggle="buttons"]'),b=!0;if(a.length){var c=this.$element.find("input");"radio"===c.prop("type")&&(c.prop("checked")&&this.$element.hasClass("active")?b=!1:a.find(".active").removeClass("active")),b&&c.prop("checked",!this.$element.hasClass("active")).trigger("change")}b&&this.$element.toggleClass("active")};var c=a.fn.button;a.fn.button=function(c){return this.each(function(){var d=a(this),e=d.data("bs.button"),f="object"==typeof c&&c;e||d.data("bs.button",e=new b(this,f)),"toggle"==c?e.toggle():c&&e.setState(c)})},a.fn.button.Constructor=b,a.fn.button.noConflict=function(){return a.fn.button=c,this},a(document).on("click.bs.button.data-api","[data-toggle^=button]",function(b){var c=a(b.target);c.hasClass("btn")||(c=c.closest(".btn")),c.button("toggle"),b.preventDefault()})}(jQuery),+function(a){"use strict";var b=function(b,c){this.$element=a(b),this.$indicators=this.$element.find(".carousel-indicators"),this.options=c,this.paused=this.sliding=this.interval=this.$active=this.$items=null,"hover"==this.options.pause&&this.$element.on("mouseenter",a.proxy(this.pause,this)).on("mouseleave",a.proxy(this.cycle,this))};b.DEFAULTS={interval:5e3,pause:"hover",wrap:!0},b.prototype.cycle=function(b){return b||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(a.proxy(this.next,this),this.options.interval)),this},b.prototype.getActiveIndex=function(){return this.$active=this.$element.find(".item.active"),this.$items=this.$active.parent().children(),this.$items.index(this.$active)},b.prototype.to=function(b){var c=this,d=this.getActiveIndex();return b>this.$items.length-1||0>b?void 0:this.sliding?this.$element.one("slid.bs.carousel",function(){c.to(b)}):d==b?this.pause().cycle():this.slide(b>d?"next":"prev",a(this.$items[b]))},b.prototype.pause=function(b){return b||(this.paused=!0),this.$element.find(".next, .prev").length&&a.support.transition.end&&(this.$element.trigger(a.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this},b.prototype.next=function(){return this.sliding?void 0:this.slide("next")},b.prototype.prev=function(){return this.sliding?void 0:this.slide("prev")},b.prototype.slide=function(b,c){var d=this.$element.find(".item.active"),e=c||d[b](),f=this.interval,g="next"==b?"left":"right",h="next"==b?"first":"last",i=this;if(!e.length){if(!this.options.wrap)return;e=this.$element.find(".item")[h]()}this.sliding=!0,f&&this.pause();var j=a.Event("slide.bs.carousel",{relatedTarget:e[0],direction:g});if(!e.hasClass("active")){if(this.$indicators.length&&(this.$indicators.find(".active").removeClass("active"),this.$element.one("slid.bs.carousel",function(){var b=a(i.$indicators.children()[i.getActiveIndex()]);b&&b.addClass("active")})),a.support.transition&&this.$element.hasClass("slide")){if(this.$element.trigger(j),j.isDefaultPrevented())return;e.addClass(b),e[0].offsetWidth,d.addClass(g),e.addClass(g),d.one(a.support.transition.end,function(){e.removeClass([b,g].join(" ")).addClass("active"),d.removeClass(["active",g].join(" ")),i.sliding=!1,setTimeout(function(){i.$element.trigger("slid.bs.carousel")},0)}).emulateTransitionEnd(600)}else{if(this.$element.trigger(j),j.isDefaultPrevented())return;d.removeClass("active"),e.addClass("active"),this.sliding=!1,this.$element.trigger("slid.bs.carousel")}return f&&this.cycle(),this}};var c=a.fn.carousel;a.fn.carousel=function(c){return this.each(function(){var d=a(this),e=d.data("bs.carousel"),f=a.extend({},b.DEFAULTS,d.data(),"object"==typeof c&&c),g="string"==typeof c?c:f.slide;e||d.data("bs.carousel",e=new b(this,f)),"number"==typeof c?e.to(c):g?e[g]():f.interval&&e.pause().cycle()})},a.fn.carousel.Constructor=b,a.fn.carousel.noConflict=function(){return a.fn.carousel=c,this},a(document).on("click.bs.carousel.data-api","[data-slide], [data-slide-to]",function(b){var c,d=a(this),e=a(d.attr("data-target")||(c=d.attr("href"))&&c.replace(/.*(?=#[^\s]+$)/,"")),f=a.extend({},e.data(),d.data()),g=d.attr("data-slide-to");g&&(f.interval=!1),e.carousel(f),(g=d.attr("data-slide-to"))&&e.data("bs.carousel").to(g),b.preventDefault()}),a(window).on("load",function(){a('[data-ride="carousel"]').each(function(){var b=a(this);b.carousel(b.data())})})}(jQuery),+function(a){"use strict";var b=function(c,d){this.$element=a(c),this.options=a.extend({},b.DEFAULTS,d),this.transitioning=null,this.options.parent&&(this.$parent=a(this.options.parent)),this.options.toggle&&this.toggle()};b.DEFAULTS={toggle:!0},b.prototype.dimension=function(){var a=this.$element.hasClass("width");return a?"width":"height"},b.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var b=a.Event("show.bs.collapse");if(this.$element.trigger(b),!b.isDefaultPrevented()){var c=this.$parent&&this.$parent.find("> .panel > .in");if(c&&c.length){var d=c.data("bs.collapse");if(d&&d.transitioning)return;c.collapse("hide"),d||c.data("bs.collapse",null)}var e=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[e](0),this.transitioning=1;var f=function(){this.$element.removeClass("collapsing").addClass("in")[e]("auto"),this.transitioning=0,this.$element.trigger("shown.bs.collapse")};if(!a.support.transition)return f.call(this);var g=a.camelCase(["scroll",e].join("-"));this.$element.one(a.support.transition.end,a.proxy(f,this)).emulateTransitionEnd(350)[e](this.$element[0][g])}}},b.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var b=a.Event("hide.bs.collapse");if(this.$element.trigger(b),!b.isDefaultPrevented()){var c=this.dimension();this.$element[c](this.$element[c]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse").removeClass("in"),this.transitioning=1;var d=function(){this.transitioning=0,this.$element.trigger("hidden.bs.collapse").removeClass("collapsing").addClass("collapse")};return a.support.transition?(this.$element[c](0).one(a.support.transition.end,a.proxy(d,this)).emulateTransitionEnd(350),void 0):d.call(this)}}},b.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()};var c=a.fn.collapse;a.fn.collapse=function(c){return this.each(function(){var d=a(this),e=d.data("bs.collapse"),f=a.extend({},b.DEFAULTS,d.data(),"object"==typeof c&&c);e||d.data("bs.collapse",e=new b(this,f)),"string"==typeof c&&e[c]()})},a.fn.collapse.Constructor=b,a.fn.collapse.noConflict=function(){return a.fn.collapse=c,this},a(document).on("click.bs.collapse.data-api","[data-toggle=collapse]",function(b){var c,d=a(this),e=d.attr("data-target")||b.preventDefault()||(c=d.attr("href"))&&c.replace(/.*(?=#[^\s]+$)/,""),f=a(e),g=f.data("bs.collapse"),h=g?"toggle":d.data(),i=d.attr("data-parent"),j=i&&a(i);g&&g.transitioning||(j&&j.find('[data-toggle=collapse][data-parent="'+i+'"]').not(d).addClass("collapsed"),d[f.hasClass("in")?"addClass":"removeClass"]("collapsed")),f.collapse(h)})}(jQuery),+function(a){"use strict";function b(){a(d).remove(),a(e).each(function(b){var d=c(a(this));d.hasClass("open")&&(d.trigger(b=a.Event("hide.bs.dropdown")),b.isDefaultPrevented()||d.removeClass("open").trigger("hidden.bs.dropdown"))})}function c(b){var c=b.attr("data-target");c||(c=b.attr("href"),c=c&&/#/.test(c)&&c.replace(/.*(?=#[^\s]*$)/,""));var d=c&&a(c);return d&&d.length?d:b.parent()}var d=".dropdown-backdrop",e="[data-toggle=dropdown]",f=function(b){a(b).on("click.bs.dropdown",this.toggle)};f.prototype.toggle=function(d){var e=a(this);if(!e.is(".disabled, :disabled")){var f=c(e),g=f.hasClass("open");if(b(),!g){if("ontouchstart"in document.documentElement&&!f.closest(".navbar-nav").length&&a('<div class="dropdown-backdrop"/>').insertAfter(a(this)).on("click",b),f.trigger(d=a.Event("show.bs.dropdown")),d.isDefaultPrevented())return;f.toggleClass("open").trigger("shown.bs.dropdown"),e.focus()}return!1}},f.prototype.keydown=function(b){if(/(38|40|27)/.test(b.keyCode)){var d=a(this);if(b.preventDefault(),b.stopPropagation(),!d.is(".disabled, :disabled")){var f=c(d),g=f.hasClass("open");if(!g||g&&27==b.keyCode)return 27==b.which&&f.find(e).focus(),d.click();var h=a("[role=menu] li:not(.divider):visible a",f);if(h.length){var i=h.index(h.filter(":focus"));38==b.keyCode&&i>0&&i--,40==b.keyCode&&i<h.length-1&&i++,~i||(i=0),h.eq(i).focus()}}}};var g=a.fn.dropdown;a.fn.dropdown=function(b){return this.each(function(){var c=a(this),d=c.data("bs.dropdown");d||c.data("bs.dropdown",d=new f(this)),"string"==typeof b&&d[b].call(c)})},a.fn.dropdown.Constructor=f,a.fn.dropdown.noConflict=function(){return a.fn.dropdown=g,this},a(document).on("click.bs.dropdown.data-api",b).on("click.bs.dropdown.data-api",".dropdown form",function(a){a.stopPropagation()}).on("click.bs.dropdown.data-api",e,f.prototype.toggle).on("keydown.bs.dropdown.data-api",e+", [role=menu]",f.prototype.keydown)}(jQuery),+function(a){"use strict";var b=function(b,c){this.options=c,this.$element=a(b),this.$backdrop=this.isShown=null,this.options.remote&&this.$element.load(this.options.remote)};b.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},b.prototype.toggle=function(a){return this[this.isShown?"hide":"show"](a)},b.prototype.show=function(b){var c=this,d=a.Event("show.bs.modal",{relatedTarget:b});this.$element.trigger(d),this.isShown||d.isDefaultPrevented()||(this.isShown=!0,this.escape(),this.$element.on("click.dismiss.modal",'[data-dismiss="modal"]',a.proxy(this.hide,this)),this.backdrop(function(){var d=a.support.transition&&c.$element.hasClass("fade");c.$element.parent().length||c.$element.appendTo(document.body),c.$element.show(),d&&c.$element[0].offsetWidth,c.$element.addClass("in").attr("aria-hidden",!1),c.enforceFocus();var e=a.Event("shown.bs.modal",{relatedTarget:b});d?c.$element.find(".modal-dialog").one(a.support.transition.end,function(){c.$element.focus().trigger(e)}).emulateTransitionEnd(300):c.$element.focus().trigger(e)}))},b.prototype.hide=function(b){b&&b.preventDefault(),b=a.Event("hide.bs.modal"),this.$element.trigger(b),this.isShown&&!b.isDefaultPrevented()&&(this.isShown=!1,this.escape(),a(document).off("focusin.bs.modal"),this.$element.removeClass("in").attr("aria-hidden",!0).off("click.dismiss.modal"),a.support.transition&&this.$element.hasClass("fade")?this.$element.one(a.support.transition.end,a.proxy(this.hideModal,this)).emulateTransitionEnd(300):this.hideModal())},b.prototype.enforceFocus=function(){a(document).off("focusin.bs.modal").on("focusin.bs.modal",a.proxy(function(a){this.$element[0]===a.target||this.$element.has(a.target).length||this.$element.focus()},this))},b.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keyup.dismiss.bs.modal",a.proxy(function(a){27==a.which&&this.hide()},this)):this.isShown||this.$element.off("keyup.dismiss.bs.modal")},b.prototype.hideModal=function(){var a=this;this.$element.hide(),this.backdrop(function(){a.removeBackdrop(),a.$element.trigger("hidden.bs.modal")})},b.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},b.prototype.backdrop=function(b){var c=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var d=a.support.transition&&c;if(this.$backdrop=a('<div class="modal-backdrop '+c+'" />').appendTo(document.body),this.$element.on("click.dismiss.modal",a.proxy(function(a){a.target===a.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus.call(this.$element[0]):this.hide.call(this))},this)),d&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!b)return;d?this.$backdrop.one(a.support.transition.end,b).emulateTransitionEnd(150):b()}else!this.isShown&&this.$backdrop?(this.$backdrop.removeClass("in"),a.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one(a.support.transition.end,b).emulateTransitionEnd(150):b()):b&&b()};var c=a.fn.modal;a.fn.modal=function(c,d){return this.each(function(){var e=a(this),f=e.data("bs.modal"),g=a.extend({},b.DEFAULTS,e.data(),"object"==typeof c&&c);f||e.data("bs.modal",f=new b(this,g)),"string"==typeof c?f[c](d):g.show&&f.show(d)})},a.fn.modal.Constructor=b,a.fn.modal.noConflict=function(){return a.fn.modal=c,this},a(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(b){var c=a(this),d=c.attr("href"),e=a(c.attr("data-target")||d&&d.replace(/.*(?=#[^\s]+$)/,"")),f=e.data("modal")?"toggle":a.extend({remote:!/#/.test(d)&&d},e.data(),c.data());b.preventDefault(),e.modal(f,this).one("hide",function(){c.is(":visible")&&c.focus()})}),a(document).on("show.bs.modal",".modal",function(){a(document.body).addClass("modal-open")}).on("hidden.bs.modal",".modal",function(){a(document.body).removeClass("modal-open")})}(jQuery),+function(a){"use strict";var b=function(a,b){this.type=this.options=this.enabled=this.timeout=this.hoverState=this.$element=null,this.init("tooltip",a,b)};b.DEFAULTS={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1},b.prototype.init=function(b,c,d){this.enabled=!0,this.type=b,this.$element=a(c),this.options=this.getOptions(d);for(var e=this.options.trigger.split(" "),f=e.length;f--;){var g=e[f];if("click"==g)this.$element.on("click."+this.type,this.options.selector,a.proxy(this.toggle,this));else if("manual"!=g){var h="hover"==g?"mouseenter":"focus",i="hover"==g?"mouseleave":"blur";this.$element.on(h+"."+this.type,this.options.selector,a.proxy(this.enter,this)),this.$element.on(i+"."+this.type,this.options.selector,a.proxy(this.leave,this))}}this.options.selector?this._options=a.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},b.prototype.getDefaults=function(){return b.DEFAULTS},b.prototype.getOptions=function(b){return b=a.extend({},this.getDefaults(),this.$element.data(),b),b.delay&&"number"==typeof b.delay&&(b.delay={show:b.delay,hide:b.delay}),b},b.prototype.getDelegateOptions=function(){var b={},c=this.getDefaults();return this._options&&a.each(this._options,function(a,d){c[a]!=d&&(b[a]=d)}),b},b.prototype.enter=function(b){var c=b instanceof this.constructor?b:a(b.currentTarget)[this.type](this.getDelegateOptions()).data("bs."+this.type);return clearTimeout(c.timeout),c.hoverState="in",c.options.delay&&c.options.delay.show?(c.timeout=setTimeout(function(){"in"==c.hoverState&&c.show()},c.options.delay.show),void 0):c.show()},b.prototype.leave=function(b){var c=b instanceof this.constructor?b:a(b.currentTarget)[this.type](this.getDelegateOptions()).data("bs."+this.type);return clearTimeout(c.timeout),c.hoverState="out",c.options.delay&&c.options.delay.hide?(c.timeout=setTimeout(function(){"out"==c.hoverState&&c.hide()},c.options.delay.hide),void 0):c.hide()},b.prototype.show=function(){var b=a.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){if(this.$element.trigger(b),b.isDefaultPrevented())return;var c=this.tip();this.setContent(),this.options.animation&&c.addClass("fade");var d="function"==typeof this.options.placement?this.options.placement.call(this,c[0],this.$element[0]):this.options.placement,e=/\s?auto?\s?/i,f=e.test(d);f&&(d=d.replace(e,"")||"top"),c.detach().css({top:0,left:0,display:"block"}).addClass(d),this.options.container?c.appendTo(this.options.container):c.insertAfter(this.$element);var g=this.getPosition(),h=c[0].offsetWidth,i=c[0].offsetHeight;if(f){var j=this.$element.parent(),k=d,l=document.documentElement.scrollTop||document.body.scrollTop,m="body"==this.options.container?window.innerWidth:j.outerWidth(),n="body"==this.options.container?window.innerHeight:j.outerHeight(),o="body"==this.options.container?0:j.offset().left;d="bottom"==d&&g.top+g.height+i-l>n?"top":"top"==d&&g.top-l-i<0?"bottom":"right"==d&&g.right+h>m?"left":"left"==d&&g.left-h<o?"right":d,c.removeClass(k).addClass(d)}var p=this.getCalculatedOffset(d,g,h,i);this.applyPlacement(p,d),this.$element.trigger("shown.bs."+this.type)}},b.prototype.applyPlacement=function(a,b){var c,d=this.tip(),e=d[0].offsetWidth,f=d[0].offsetHeight,g=parseInt(d.css("margin-top"),10),h=parseInt(d.css("margin-left"),10);isNaN(g)&&(g=0),isNaN(h)&&(h=0),a.top=a.top+g,a.left=a.left+h,d.offset(a).addClass("in");var i=d[0].offsetWidth,j=d[0].offsetHeight;if("top"==b&&j!=f&&(c=!0,a.top=a.top+f-j),/bottom|top/.test(b)){var k=0;a.left<0&&(k=-2*a.left,a.left=0,d.offset(a),i=d[0].offsetWidth,j=d[0].offsetHeight),this.replaceArrow(k-e+i,i,"left")}else this.replaceArrow(j-f,j,"top");c&&d.offset(a)},b.prototype.replaceArrow=function(a,b,c){this.arrow().css(c,a?50*(1-a/b)+"%":"")},b.prototype.setContent=function(){var a=this.tip(),b=this.getTitle();a.find(".tooltip-inner")[this.options.html?"html":"text"](b),a.removeClass("fade in top bottom left right")},b.prototype.hide=function(){function b(){"in"!=c.hoverState&&d.detach()}var c=this,d=this.tip(),e=a.Event("hide.bs."+this.type);return this.$element.trigger(e),e.isDefaultPrevented()?void 0:(d.removeClass("in"),a.support.transition&&this.$tip.hasClass("fade")?d.one(a.support.transition.end,b).emulateTransitionEnd(150):b(),this.$element.trigger("hidden.bs."+this.type),this)},b.prototype.fixTitle=function(){var a=this.$element;(a.attr("title")||"string"!=typeof a.attr("data-original-title"))&&a.attr("data-original-title",a.attr("title")||"").attr("title","")},b.prototype.hasContent=function(){return this.getTitle()},b.prototype.getPosition=function(){var b=this.$element[0];return a.extend({},"function"==typeof b.getBoundingClientRect?b.getBoundingClientRect():{width:b.offsetWidth,height:b.offsetHeight},this.$element.offset())},b.prototype.getCalculatedOffset=function(a,b,c,d){return"bottom"==a?{top:b.top+b.height,left:b.left+b.width/2-c/2}:"top"==a?{top:b.top-d,left:b.left+b.width/2-c/2}:"left"==a?{top:b.top+b.height/2-d/2,left:b.left-c}:{top:b.top+b.height/2-d/2,left:b.left+b.width}},b.prototype.getTitle=function(){var a,b=this.$element,c=this.options;return a=b.attr("data-original-title")||("function"==typeof c.title?c.title.call(b[0]):c.title)},b.prototype.tip=function(){return this.$tip=this.$tip||a(this.options.template)},b.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},b.prototype.validate=function(){this.$element[0].parentNode||(this.hide(),this.$element=null,this.options=null)},b.prototype.enable=function(){this.enabled=!0},b.prototype.disable=function(){this.enabled=!1},b.prototype.toggleEnabled=function(){this.enabled=!this.enabled},b.prototype.toggle=function(b){var c=b?a(b.currentTarget)[this.type](this.getDelegateOptions()).data("bs."+this.type):this;c.tip().hasClass("in")?c.leave(c):c.enter(c)},b.prototype.destroy=function(){this.hide().$element.off("."+this.type).removeData("bs."+this.type)};var c=a.fn.tooltip;a.fn.tooltip=function(c){return this.each(function(){var d=a(this),e=d.data("bs.tooltip"),f="object"==typeof c&&c;e||d.data("bs.tooltip",e=new b(this,f)),"string"==typeof c&&e[c]()})},a.fn.tooltip.Constructor=b,a.fn.tooltip.noConflict=function(){return a.fn.tooltip=c,this}}(jQuery),+function(a){"use strict";var b=function(a,b){this.init("popover",a,b)};if(!a.fn.tooltip)throw new Error("Popover requires tooltip.js");b.DEFAULTS=a.extend({},a.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),b.prototype=a.extend({},a.fn.tooltip.Constructor.prototype),b.prototype.constructor=b,b.prototype.getDefaults=function(){return b.DEFAULTS},b.prototype.setContent=function(){var a=this.tip(),b=this.getTitle(),c=this.getContent();a.find(".popover-title")[this.options.html?"html":"text"](b),a.find(".popover-content")[this.options.html?"html":"text"](c),a.removeClass("fade top bottom left right in"),a.find(".popover-title").html()||a.find(".popover-title").hide()},b.prototype.hasContent=function(){return this.getTitle()||this.getContent()},b.prototype.getContent=function(){var a=this.$element,b=this.options;return a.attr("data-content")||("function"==typeof b.content?b.content.call(a[0]):b.content)},b.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")},b.prototype.tip=function(){return this.$tip||(this.$tip=a(this.options.template)),this.$tip};var c=a.fn.popover;a.fn.popover=function(c){return this.each(function(){var d=a(this),e=d.data("bs.popover"),f="object"==typeof c&&c;e||d.data("bs.popover",e=new b(this,f)),"string"==typeof c&&e[c]()})},a.fn.popover.Constructor=b,a.fn.popover.noConflict=function(){return a.fn.popover=c,this}}(jQuery),+function(a){"use strict";function b(c,d){var e,f=a.proxy(this.process,this);this.$element=a(c).is("body")?a(window):a(c),this.$body=a("body"),this.$scrollElement=this.$element.on("scroll.bs.scroll-spy.data-api",f),this.options=a.extend({},b.DEFAULTS,d),this.selector=(this.options.target||(e=a(c).attr("href"))&&e.replace(/.*(?=#[^\s]+$)/,"")||"")+" .nav li > a",this.offsets=a([]),this.targets=a([]),this.activeTarget=null,this.refresh(),this.process()}b.DEFAULTS={offset:10},b.prototype.refresh=function(){var b=this.$element[0]==window?"offset":"position";this.offsets=a([]),this.targets=a([]);{var c=this;this.$body.find(this.selector).map(function(){var d=a(this),e=d.data("target")||d.attr("href"),f=/^#\w/.test(e)&&a(e);return f&&f.length&&[[f[b]().top+(!a.isWindow(c.$scrollElement.get(0))&&c.$scrollElement.scrollTop()),e]]||null}).sort(function(a,b){return a[0]-b[0]}).each(function(){c.offsets.push(this[0]),c.targets.push(this[1])})}},b.prototype.process=function(){var a,b=this.$scrollElement.scrollTop()+this.options.offset,c=this.$scrollElement[0].scrollHeight||this.$body[0].scrollHeight,d=c-this.$scrollElement.height(),e=this.offsets,f=this.targets,g=this.activeTarget;if(b>=d)return g!=(a=f.last()[0])&&this.activate(a);for(a=e.length;a--;)g!=f[a]&&b>=e[a]&&(!e[a+1]||b<=e[a+1])&&this.activate(f[a])},b.prototype.activate=function(b){this.activeTarget=b,a(this.selector).parents(".active").removeClass("active");var c=this.selector+'[data-target="'+b+'"],'+this.selector+'[href="'+b+'"]',d=a(c).parents("li").addClass("active");d.parent(".dropdown-menu").length&&(d=d.closest("li.dropdown").addClass("active")),d.trigger("activate.bs.scrollspy")};var c=a.fn.scrollspy;a.fn.scrollspy=function(c){return this.each(function(){var d=a(this),e=d.data("bs.scrollspy"),f="object"==typeof c&&c;e||d.data("bs.scrollspy",e=new b(this,f)),"string"==typeof c&&e[c]()})},a.fn.scrollspy.Constructor=b,a.fn.scrollspy.noConflict=function(){return a.fn.scrollspy=c,this},a(window).on("load",function(){a('[data-spy="scroll"]').each(function(){var b=a(this);b.scrollspy(b.data())})})}(jQuery),+function(a){"use strict";var b=function(b){this.element=a(b)};b.prototype.show=function(){var b=this.element,c=b.closest("ul:not(.dropdown-menu)"),d=b.data("target");if(d||(d=b.attr("href"),d=d&&d.replace(/.*(?=#[^\s]*$)/,"")),!b.parent("li").hasClass("active")){var e=c.find(".active:last a")[0],f=a.Event("show.bs.tab",{relatedTarget:e});if(b.trigger(f),!f.isDefaultPrevented()){var g=a(d);this.activate(b.parent("li"),c),this.activate(g,g.parent(),function(){b.trigger({type:"shown.bs.tab",relatedTarget:e})})}}},b.prototype.activate=function(b,c,d){function e(){f.removeClass("active").find("> .dropdown-menu > .active").removeClass("active"),b.addClass("active"),g?(b[0].offsetWidth,b.addClass("in")):b.removeClass("fade"),b.parent(".dropdown-menu")&&b.closest("li.dropdown").addClass("active"),d&&d()}var f=c.find("> .active"),g=d&&a.support.transition&&f.hasClass("fade");g?f.one(a.support.transition.end,e).emulateTransitionEnd(150):e(),f.removeClass("in")};var c=a.fn.tab;a.fn.tab=function(c){return this.each(function(){var d=a(this),e=d.data("bs.tab");e||d.data("bs.tab",e=new b(this)),"string"==typeof c&&e[c]()})},a.fn.tab.Constructor=b,a.fn.tab.noConflict=function(){return a.fn.tab=c,this},a(document).on("click.bs.tab.data-api",'[data-toggle="tab"], [data-toggle="pill"]',function(b){b.preventDefault(),a(this).tab("show")})}(jQuery),+function(a){"use strict";var b=function(c,d){this.options=a.extend({},b.DEFAULTS,d),this.$window=a(window).on("scroll.bs.affix.data-api",a.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",a.proxy(this.checkPositionWithEventLoop,this)),this.$element=a(c),this.affixed=this.unpin=null,this.checkPosition()};b.RESET="affix affix-top affix-bottom",b.DEFAULTS={offset:0},b.prototype.checkPositionWithEventLoop=function(){setTimeout(a.proxy(this.checkPosition,this),1)},b.prototype.checkPosition=function(){if(this.$element.is(":visible")){var c=a(document).height(),d=this.$window.scrollTop(),e=this.$element.offset(),f=this.options.offset,g=f.top,h=f.bottom;"object"!=typeof f&&(h=g=f),"function"==typeof g&&(g=f.top()),"function"==typeof h&&(h=f.bottom());var i=null!=this.unpin&&d+this.unpin<=e.top?!1:null!=h&&e.top+this.$element.height()>=c-h?"bottom":null!=g&&g>=d?"top":!1;this.affixed!==i&&(this.unpin&&this.$element.css("top",""),this.affixed=i,this.unpin="bottom"==i?e.top-d:null,this.$element.removeClass(b.RESET).addClass("affix"+(i?"-"+i:"")),"bottom"==i&&this.$element.offset({top:document.body.offsetHeight-h-this.$element.height()}))}};var c=a.fn.affix;a.fn.affix=function(c){return this.each(function(){var d=a(this),e=d.data("bs.affix"),f="object"==typeof c&&c;e||d.data("bs.affix",e=new b(this,f)),"string"==typeof c&&e[c]()})},a.fn.affix.Constructor=b,a.fn.affix.noConflict=function(){return a.fn.affix=c,this},a(window).on("load",function(){a('[data-spy="affix"]').each(function(){var b=a(this),c=b.data();c.offset=c.offset||{},c.offsetBottom&&(c.offset.bottom=c.offsetBottom),c.offsetTop&&(c.offset.top=c.offsetTop),b.affix(c)})})}(jQuery);var ExampleSite={common:{init:function(){},finalize:function(){}},home:{init:function(){}},about:{init:function(){}}},UTIL={fire:function(a,b,c){var d=ExampleSite;b=void 0===b?"init":b,""!==a&&d[a]&&"function"==typeof d[a][b]&&d[a][b](c)},loadEvents:function(){UTIL.fire("common"),$.each(document.body.className.replace(/-/g,"_").split(/\s+/),function(a,b){UTIL.fire(b)}),UTIL.fire("common","finalize")}};$(document).ready(UTIL.loadEvents);

/*
* bootstrap-table - v1.3.0 - 2014-10-16
* https://github.com/wenzhixin/bootstrap-table
* Copyright (c) 2014 zhixin wen
* Licensed MIT License
*/
!function(a){"use strict";var b=function(a){var b=arguments,c=!0,d=1;return a=a.replace(/%s/g,function(){var a=b[d++];return"undefined"==typeof a?(c=!1,""):a}),c?a:""},c=function(b,c,d,e){var f="";return a.each(b,function(a,b){return b[c]===e?(f=b[d],!1):!0}),f},d=function(b,c){var d=-1;return a.each(b,function(a,b){return b.field===c?(d=a,!1):!0}),d},e=function(){var b,c,d=a("<p/>").addClass("fixed-table-scroll-inner"),e=a("<div/>").addClass("fixed-table-scroll-outer");return e.append(d),a("body").append(e),b=d[0].offsetWidth,e.css("overflow","scroll"),c=d[0].offsetWidth,b==c&&(c=e[0].clientWidth),e.remove(),b-c},f=function(b,c,d,e){if("string"==typeof c){var f=c.split(".");f.length>1?(c=window,a.each(f,function(a,b){c=c[b]})):c=window[c]}return"object"==typeof c?c:"function"==typeof c?c.apply(b,d):e},g=function(b,c){this.options=c,this.$el=a(b),this.$el_=this.$el.clone(),this.timeoutId_=0,this.init()};g.DEFAULTS={classes:"table table-hover",height:void 0,undefinedText:"-",sortName:void 0,sortOrder:"asc",striped:!1,columns:[],data:[],method:"get",url:void 0,cache:!0,contentType:"application/json",queryParams:function(a){return a},queryParamsType:"limit",responseHandler:function(a){return a},pagination:!1,sidePagination:"client",totalRows:0,pageNumber:1,pageSize:10,pageList:[10,25,50,100],search:!1,selectItemName:"btSelectItem",showHeader:!0,showColumns:!1,showRefresh:!1,showToggle:!1,minimumCountColumns:1,idField:void 0,cardView:!1,clickToSelect:!1,singleSelect:!1,toolbar:void 0,checkboxHeader:!0,sortable:!0,maintainSelected:!1,rowStyle:function(){return{}},formatLoadingMessage:function(){return"Loading, please wait?"},formatRecordsPerPage:function(a){return b("%s records per page",a)},formatShowingRows:function(a,c,d){return b("Showing %s to %s of %s rows",a,c,d)},formatSearch:function(){return"Search"},formatNoMatches:function(){return"No matching records found"},onAll:function(){return!1},onClickRow:function(){return!1},onDblClickRow:function(){return!1},onSort:function(){return!1},onCheck:function(){return!1},onUncheck:function(){return!1},onCheckAll:function(){return!1},onUncheckAll:function(){return!1},onLoadSuccess:function(){return!1},onLoadError:function(){return!1},onColumnSwitch:function(){return!1}},g.COLUMN_DEFAULTS={radio:!1,checkbox:!1,checkboxEnabled:!0,field:void 0,title:void 0,"class":void 0,align:void 0,halign:void 0,valign:void 0,width:void 0,sortable:!1,order:"asc",visible:!0,switchable:!0,clickToSelect:!0,formatter:void 0,events:void 0,sorter:void 0,cellStyle:void 0},g.EVENTS={"all.bs.table":"onAll","click-row.bs.table":"onClickRow","dbl-click-row.bs.table":"onDblClickRow","sort.bs.table":"onSort","check.bs.table":"onCheck","uncheck.bs.table":"onUncheck","check-all.bs.table":"onCheckAll","uncheck-all.bs.table":"onUncheckAll","load-success.bs.table":"onLoadSuccess","load-error.bs.table":"onLoadError","column-switch.bs.table":"onColumnSwitch"},g.prototype.init=function(){this.initContainer(),this.initTable(),this.initHeader(),this.initData(),this.initToolbar(),this.initPagination(),this.initBody(),this.initServer()},g.prototype.initContainer=function(){this.$container=a(['<div class="bootstrap-table">','<div class="fixed-table-toolbar"></div>','<div class="fixed-table-container">','<div class="fixed-table-header"><table></table></div>','<div class="fixed-table-body">','<div class="fixed-table-loading">',this.options.formatLoadingMessage(),"</div>","</div>",'<div class="fixed-table-pagination"></div>',"</div>","</div>"].join("")),this.$container.insertAfter(this.$el),this.$container.find(".fixed-table-body").append(this.$el),this.$container.after('<div class="clearfix"></div>'),this.$loading=this.$container.find(".fixed-table-loading"),this.$el.addClass(this.options.classes),this.options.striped&&this.$el.addClass("table-striped")},g.prototype.initTable=function(){var b=this,c=[],d=[];this.$header=this.$el.find("thead"),this.$header.length||(this.$header=a("<thead></thead>").appendTo(this.$el)),this.$header.find("tr").length||this.$header.append("<tr></tr>"),this.$header.find("th").each(function(){var b=a.extend({},{title:a(this).html(),"class":a(this).attr("class")},a(this).data());c.push(b)}),this.options.columns=a.extend([],c,this.options.columns),a.each(this.options.columns,function(c,d){b.options.columns[c]=a.extend({},g.COLUMN_DEFAULTS,{field:c},d)}),this.options.data.length||(this.$el.find("tbody tr").each(function(){var c={};a(this).find("td").each(function(d){c[b.options.columns[d].field]=a(this).html()}),d.push(c)}),this.options.data=d)},g.prototype.initHeader=function(){var c=this,d=[],e=[];this.header={fields:[],styles:[],classes:[],formatters:[],events:[],sorters:[],cellStyles:[],clickToSelects:[]},a.each(this.options.columns,function(a,f){{var g="",h=b("text-align: %s; ",f.align)+b("vertical-align: %s; ",f.valign),i=b(' class="%s"',f["class"]);c.options.sortOrder||f.order}f.visible&&(d.push(f),c.header.fields.push(f.field),c.header.styles.push(h),c.header.classes.push(i),c.header.formatters.push(f.formatter),c.header.events.push(f.events),c.header.sorters.push(f.sorter),c.header.cellStyles.push(f.cellStyle),c.header.clickToSelects.push(f.clickToSelect),f.halign&&(h=b("text-align: %s; ",f.halign)+b("vertical-align: %s; ",f.valign)),h+=b("width: %spx; ",f.checkbox||f.radio?36:f.width),e.push("<th",f.checkbox||f.radio?b(' class="bs-checkbox %s"',f["class"]||""):i,b(' style="%s"',h),">"),e.push(b('<div class="th-inner %s">',c.options.sortable&&f.sortable?"sortable":"")),g=f.title,c.options.sortName===f.field&&c.options.sortable&&f.sortable&&(g+=c.getCaretHtml()),f.checkbox&&(!c.options.singleSelect&&c.options.checkboxHeader&&(g='<input name="btSelectAll" type="checkbox" />'),c.header.stateField=f.field),f.radio&&(g="",c.header.stateField=f.field,c.options.singleSelect=!0),e.push(g),e.push("</div>"),e.push('<div class="fht-cell"></div>'),e.push("</th>"))}),this.$header.find("tr").html(e.join("")),this.$header.find("th").each(function(b){a(this).data(d[b])}),this.$container.off("click","th").on("click","th",function(b){c.options.sortable&&a(this).data().sortable&&c.onSort(b)}),!this.options.showHeader||this.options.cardView?(this.$header.hide(),this.$container.find(".fixed-table-header").hide(),this.$loading.css("top",0)):(this.$header.show(),this.$container.find(".fixed-table-header").show(),this.$loading.css("top","37px")),this.$selectAll=this.$header.find('[name="btSelectAll"]'),this.$container.off("click",'[name="btSelectAll"]').on("click",'[name="btSelectAll"]',function(){var b=a(this).prop("checked");c[b?"checkAll":"uncheckAll"]()})},g.prototype.initData=function(a,b){this.data=b?this.data.concat(a):a||this.options.data,this.options.data=this.data,"server"!==this.options.sidePagination&&this.initSort()},g.prototype.initSort=function(){var b=this,c=this.options.sortName,d="desc"===this.options.sortOrder?-1:1,e=a.inArray(this.options.sortName,this.header.fields);-1!==e&&this.data.sort(function(a,g){var h=f(b.header,b.header.sorters[e],[a[c],g[c]]);return void 0!==h?d*h:a[c]===g[c]?0:a[c]<g[c]?-1*d:d})},g.prototype.onSort=function(b){var c=a(b.currentTarget),d=this.$header.find("th").eq(c.index());return this.$header.add(this.$header_).find("span.order").remove(),this.options.sortName===c.data("field")?this.options.sortOrder="asc"===this.options.sortOrder?"desc":"asc":(this.options.sortName=c.data("field"),this.options.sortOrder="asc"===c.data("order")?"desc":"asc"),this.trigger("sort",this.options.sortName,this.options.sortOrder),c.add(d).data("order",this.options.sortOrder).find(".th-inner").append(this.getCaretHtml()),"server"===this.options.sidePagination?void this.initServer():(this.initSort(),void this.initBody())},g.prototype.initToolbar=function(){var c,d,e=this,f=[],g=0;this.$toolbar=this.$container.find(".fixed-table-toolbar").html(""),"string"==typeof this.options.toolbar&&a('<div class="bars pull-left"></div>').appendTo(this.$toolbar).append(a(this.options.toolbar)),f=['<div class="columns btn-group pull-right">'],this.options.showRefresh&&f.push('<button class="btn btn-default" type="button" name="refresh">','<i class="glyphicon glyphicon-refresh icon-refresh"></i>',"</button>"),this.options.showToggle&&f.push('<button class="btn btn-default" type="button" name="toggle">','<i class="glyphicon glyphicon glyphicon-list-alt icon-list-alt"></i>',"</button>"),this.options.showColumns&&(f.push(b('<div class="keep-open %s">',this.options.showRefresh||this.options.showToggle?"btn-group":""),'<button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">','<i class="glyphicon glyphicon-th icon-th"></i>',' <span class="caret"></span>',"</button>",'<ul class="dropdown-menu" role="menu">'),a.each(this.options.columns,function(a,c){if(!c.radio&&!c.checkbox){var d=c.visible?' checked="checked"':"";c.switchable&&f.push(b('<li><label><input type="checkbox" data-field="%s" value="%s"%s> %s</label></li>',c.field,a,d,c.title))}}),f.push("</ul>","</div>")),f.push("</div>"),f.length>2&&this.$toolbar.append(f.join("")),this.options.showRefresh&&this.$toolbar.find('button[name="refresh"]').off("click").on("click",a.proxy(this.refresh,this)),this.options.showToggle&&this.$toolbar.find('button[name="toggle"]').off("click").on("click",function(){e.options.cardView=!e.options.cardView,e.initHeader(),e.initBody()}),this.options.showColumns&&(c=this.$toolbar.find(".keep-open"),c.find("li").off("click").on("click",function(a){a.stopImmediatePropagation()}),c.find("input").off("click").on("click",function(){var b=a(this);e.toggleColumn(b.val(),b.prop("checked"),!1),e.trigger("column-switch",a(this).data("field"),b.prop("checked"))})),this.options.search&&(f=[],f.push('<div class="pull-right search">',b('<input class="form-control" type="text" placeholder="%s">',this.options.formatSearch()),"</div>"),this.$toolbar.append(f.join("")),d=this.$toolbar.find(".search input"),d.off("keyup").on("keyup",function(a){clearTimeout(g),g=setTimeout(function(){e.onSearch(a)},500)}))},g.prototype.onSearch=function(b){var c=a.trim(a(b.currentTarget).val());a(b.currentTarget).val(c),c!==this.searchText&&(this.searchText=c,this.options.pageNumber=1,this.initSearch(),this.updatePagination())},g.prototype.initSearch=function(){var b=this;if("server"!==this.options.sidePagination){var c=this.searchText&&this.searchText.toLowerCase();this.data=c?a.grep(this.options.data,function(d,e){g=a.isNumeric(g)?parseInt(g,10):g;for(var g in d){var h=d[g];if(h=f(b.header,b.header.formatters[a.inArray(g,b.header.fields)],[h,d,e],h),-1!==a.inArray(g,b.header.fields)&&("string"==typeof h||"number"==typeof h)&&-1!==(h+"").toLowerCase().indexOf(c))return!0}return!1}):this.options.data}},g.prototype.initPagination=function(){if(this.$pagination=this.$container.find(".fixed-table-pagination"),this.options.pagination){var c,d,e,f,g,h,i,j,k,l=this,m=[],n=this.searchText?this.data:this.options.data;"server"!==this.options.sidePagination&&(this.options.totalRows=n.length),this.totalPages=0,this.options.totalRows&&(this.totalPages=~~((this.options.totalRows-1)/this.options.pageSize)+1),this.totalPages>0&&this.options.pageNumber>this.totalPages&&(this.options.pageNumber=this.totalPages),this.pageFrom=(this.options.pageNumber-1)*this.options.pageSize+1,this.pageTo=this.options.pageNumber*this.options.pageSize,this.pageTo>this.options.totalRows&&(this.pageTo=this.options.totalRows),m.push('<div class="pull-left pagination-detail">','<span class="pagination-info">',this.options.formatShowingRows(this.pageFrom,this.pageTo,this.options.totalRows),"</span>"),m.push('<span class="page-list">');var o=['<span class="btn-group dropup">','<button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">','<span class="page-size">',this.options.pageSize,"</span>",' <span class="caret"></span>',"</button>",'<ul class="dropdown-menu" role="menu">'],p=this.options.pageList;if("string"==typeof this.options.pageList){var q=this.options.pageList.slice(1,-1).replace(/ /g,"").split(",");p=[],a.each(q,function(a,b){p.push(+b)})}for(a.each(p,function(a,c){var d=c===l.options.pageSize?' class="active"':"";o.push(b('<li%s><a href="javascript:void(0)">%s</a></li>',d,c))}),o.push("</ul></span>"),m.push(this.options.formatRecordsPerPage(o.join(""))),m.push("</span>"),m.push("</div>",'<div class="pull-right pagination">','<ul class="pagination">','<li class="page-first"><a href="javascript:void(0)">&lt;&lt;</a></li>','<li class="page-pre"><a href="javascript:void(0)">&lt;</a></li>'),this.totalPages<5?(d=1,e=this.totalPages):(d=this.options.pageNumber-2,e=d+4,1>d&&(d=1,e=5),e>this.totalPages&&(e=this.totalPages,d=e-4)),c=d;e>=c;c++)m.push('<li class="page-number'+(c===this.options.pageNumber?" active":"")+'">','<a href="javascript:void(0)">',c,"</a>","</li>");m.push('<li class="page-next"><a href="javascript:void(0)">&gt;</a></li>','<li class="page-last"><a href="javascript:void(0)">&gt;&gt;</a></li>',"</ul>","</div>"),this.$pagination.html(m.join("")),f=this.$pagination.find(".page-list a"),g=this.$pagination.find(".page-first"),h=this.$pagination.find(".page-pre"),i=this.$pagination.find(".page-next"),j=this.$pagination.find(".page-last"),k=this.$pagination.find(".page-number"),this.options.pageNumber<=1&&(g.addClass("disabled"),h.addClass("disabled")),this.options.pageNumber>=this.totalPages&&(i.addClass("disabled"),j.addClass("disabled")),f.off("click").on("click",a.proxy(this.onPageListChange,this)),g.off("click").on("click",a.proxy(this.onPageFirst,this)),h.off("click").on("click",a.proxy(this.onPagePre,this)),i.off("click").on("click",a.proxy(this.onPageNext,this)),j.off("click").on("click",a.proxy(this.onPageLast,this)),k.off("click").on("click",a.proxy(this.onPageNumber,this))}},g.prototype.updatePagination=function(){this.options.maintainSelected||this.resetRows(),this.initPagination(),"server"===this.options.sidePagination?this.initServer():this.initBody()},g.prototype.onPageListChange=function(b){var c=a(b.currentTarget);c.parent().addClass("active").siblings().removeClass("active"),this.options.pageSize=+c.text(),this.$toolbar.find(".page-size").text(this.options.pageSize),this.updatePagination()},g.prototype.onPageFirst=function(){this.options.pageNumber=1,this.updatePagination()},g.prototype.onPagePre=function(){this.options.pageNumber--,this.updatePagination()},g.prototype.onPageNext=function(){this.options.pageNumber++,this.updatePagination()},g.prototype.onPageLast=function(){this.options.pageNumber=this.totalPages,this.updatePagination()},g.prototype.onPageNumber=function(b){this.options.pageNumber!==+a(b.currentTarget).text()&&(this.options.pageNumber=+a(b.currentTarget).text(),this.updatePagination())},g.prototype.initBody=function(d){var e=this,g=[],h=this.getData();this.$body=this.$el.find("tbody"),this.$body.length||(this.$body=a("<tbody></tbody>").appendTo(this.$el)),"server"===this.options.sidePagination&&(h=this.data),this.options.pagination&&"server"!==this.options.sidePagination||(this.pageFrom=1,this.pageTo=h.length);for(var i=this.pageFrom-1;i<this.pageTo;i++){var j=h[i],k={},l=[];if(k=f(this.options,this.options.rowStyle,[j,i],k),k&&k.css)for(var m in k.css)l.push(m+": "+k.css[m]);g.push("<tr",b(' class="%s"',k.classes),b(' data-index="%s"',i),">"),this.options.cardView&&g.push(b('<td colspan="%s">',this.header.fields.length)),a.each(this.header.fields,function(a,d){var h="",m=j[d],n="",o={},p=e.header.classes[a];if(k=b('style="%s"',l.concat(e.header.styles[a]).join("; ")),m=f(e.header,e.header.formatters[a],[m,j,i],m),o=f(e.header,e.header.cellStyles[a],[m,j,i],o),o.classes&&(p=b(' class="%s"',o.classes)),o.css){l=[];for(var q in o.css)l.push(q+": "+o.css[q]);k=b('style="%s"',l.concat(e.header.styles[a]).join("; "))}if(e.options.columns[a].checkbox||e.options.columns[a].radio){if(e.options.cardView)return!0;n=e.options.columns[a].checkbox?"checkbox":n,n=e.options.columns[a].radio?"radio":n,h=['<td class="bs-checkbox">',"<input"+b(' data-index="%s"',i)+b(' name="%s"',e.options.selectItemName)+b(' type="%s"',n)+b(' value="%s"',j[e.options.idField])+b(' checked="%s"',1===+m||m&&m.checked?"checked":void 0)+b(' disabled="%s"',!e.options.columns[a].checkboxEnabled||m&&m.disabled?"disabled":void 0)+" />","</td>"].join("")}else m="undefined"==typeof m?e.options.undefinedText:m,h=e.options.cardView?['<div class="card-view">',e.options.showHeader?b('<span class="title" %s>%s</span>',k,c(e.options.columns,"field","title",d)):"",b('<span class="value">%s</span>',m),"</div>"].join(""):[b("<td%s %s>",p,k),m,"</td>"].join("");g.push(h)}),this.options.cardView&&g.push("</td>"),g.push("</tr>")}g.length||g.push('<tr class="no-records-found">',b('<td colspan="%s">%s</td>',this.header.fields.length,this.options.formatNoMatches()),"</tr>"),this.$body.html(g.join("")),d||this.$container.find(".fixed-table-body").scrollTop(0),this.$body.find("> tr > td").off("click").on("click",function(){var c=a(this).parent();e.trigger("click-row",e.data[c.data("index")],c),e.options.clickToSelect&&e.header.clickToSelects[c.children().index(a(this))]&&c.find(b('[name="%s"]',e.options.selectItemName)).trigger("click")}),this.$body.find("tr").off("dblclick").on("dblclick",function(){e.trigger("dbl-click-row",e.data[a(this).data("index")],a(this))}),this.$selectItem=this.$body.find(b('[name="%s"]',this.options.selectItemName)),this.$selectItem.off("click").on("click",function(b){b.stopImmediatePropagation(),a(this).is(":radio")&&a(this).prop("checked",!0);var c=e.$selectItem.filter(":enabled").length===e.$selectItem.filter(":enabled").filter(":checked").length,d=a(this).prop("checked"),f=e.data[a(this).data("index")];e.$selectAll.add(e.$selectAll_).prop("checked",c),f[e.header.stateField]=d,e.trigger(d?"check":"uncheck",f),e.options.singleSelect&&(e.$selectItem.not(this).each(function(){e.data[a(this).data("index")][e.header.stateField]=!1}),e.$selectItem.filter(":checked").not(this).prop("checked",!1)),e.updateSelected()}),a.each(this.header.events,function(b,c){if(c){"string"==typeof c&&(c=f(null,c));for(var d in c)e.$body.find("tr").each(function(){var f=a(this),g=f.find("td").eq(b),h=d.indexOf(" "),i=d.substring(0,h),j=d.substring(h+1),k=c[d];g.find(j).off(i).on(i,function(a){var c=f.data("index"),d=e.data[c],g=d[e.header.fields[b]];k(a,g,d,c)})})}}),this.updateSelected(),this.resetView()},g.prototype.initServer=function(b){var c=this,d={},e={pageSize:this.options.pageSize,pageNumber:this.options.pageNumber,searchText:this.searchText,sortName:this.options.sortName,sortOrder:this.options.sortOrder};this.options.url&&("limit"===this.options.queryParamsType&&(e={limit:e.pageSize,offset:e.pageSize*(e.pageNumber-1),search:e.searchText,sort:e.sortName,order:e.sortOrder}),d=f(this.options,this.options.queryParams,[e],d),d!==!1&&(b||this.$loading.show(),a.ajax({type:this.options.method,url:this.options.url,data:d,cache:this.options.cache,contentType:this.options.contentType,dataType:"json",success:function(a){a=f(c.options,c.options.responseHandler,[a],a);var b=a;"server"===c.options.sidePagination&&(c.options.totalRows=a.total,b=a.rows),c.load(b),c.trigger("load-success",b)},error:function(a){c.trigger("load-error",a.status)},complete:function(){b||c.$loading.hide()}})))},g.prototype.getCaretHtml=function(){return['<span class="order'+("desc"===this.options.sortOrder?"":" dropup")+'">','<span class="caret" style="margin: 10px 5px;"></span>',"</span>"].join("")},g.prototype.updateSelected=function(){this.$selectItem.each(function(){a(this).parents("tr")[a(this).prop("checked")?"addClass":"removeClass"]("selected")})},g.prototype.updateRows=function(b){var c=this;this.$selectItem.each(function(){c.data[a(this).data("index")][c.header.stateField]=b})},g.prototype.resetRows=function(){var b=this;a.each(this.data,function(a,c){b.$selectAll.prop("checked",!1),b.$selectItem.prop("checked",!1),c[b.header.stateField]=!1})},g.prototype.trigger=function(b){var c=Array.prototype.slice.call(arguments,1);b+=".bs.table",this.options[g.EVENTS[b]].apply(this.options,c),this.$el.trigger(a.Event(b),c),this.options.onAll(b,c),this.$el.trigger(a.Event("all.bs.table"),[b,c])},g.prototype.resetHeader=function(){var b=this,c=this.$container.find(".fixed-table-header"),d=this.$container.find(".fixed-table-body"),f=this.$el.width()>d.width()?e():0;return this.$el.is(":hidden")?(clearTimeout(this.timeoutId_),void(this.timeoutId_=setTimeout(a.proxy(this.resetHeader,this),100))):(this.$header_=this.$header.clone(!0,!0),this.$selectAll_=this.$header_.find('[name="btSelectAll"]'),void setTimeout(function(){c.css({height:"37px","border-bottom":"1px solid #dddddd","margin-right":f}).find("table").css("width",b.$el.css("width")).html("").attr("class",b.$el.attr("class")).append(b.$header_),b.$header.find("th").each(function(c){b.$header_.find("th").eq(c).data(a(this).data())}),b.$body.find("tr:first-child:not(.no-records-found) > *").each(function(c){b.$header_.find("div.fht-cell").eq(c).width(a(this).innerWidth())}),b.$el.css("margin-top",-b.$header.height()),d.off("scroll").on("scroll",function(){c.scrollLeft(a(this).scrollLeft())})}))},g.prototype.toggleColumn=function(a,c,d){if(-1!==a&&(this.options.columns[a].visible=c,this.initHeader(),this.initSearch(),this.initPagination(),this.initBody(),this.options.showColumns)){var e=this.$toolbar.find(".keep-open input").prop("disabled",!1);d&&e.filter(b('[value="%s"]',a)).prop("checked",c),e.filter(":checked").length<=this.options.minimumCountColumns&&e.filter(":checked").prop("disabled",!0)}},g.prototype.resetView=function(a){{var b=this;this.header}if(a&&a.height&&(this.options.height=a.height),this.$selectAll.prop("checked",this.$selectItem.length>0&&this.$selectItem.length===this.$selectItem.filter(":checked").length),this.options.height){var c=+this.$toolbar.children().outerHeight(!0),d=+this.$pagination.children().outerHeight(!0),e=this.options.height-c-d;this.$container.find(".fixed-table-container").css("height",e+"px")}return this.options.cardView?(b.$el.css("margin-top","0"),void b.$container.find(".fixed-table-container").css("padding-bottom","0")):(this.options.showHeader&&this.options.height&&this.resetHeader(),void(this.options.height&&this.options.showHeader&&this.$container.find(".fixed-table-container").css("padding-bottom","37px")))},g.prototype.getData=function(){return this.searchText?this.data:this.options.data},g.prototype.load=function(a){this.initData(a),this.initSearch(),this.initPagination(),this.initBody()},g.prototype.append=function(a){this.initData(a,!0),this.initSearch(),this.initPagination(),this.initBody(!0)},g.prototype.remove=function(b){var c,d,e=this.options.data.length;if(b.hasOwnProperty("field")&&b.hasOwnProperty("values")){for(c=e-1;c>=0;c--){if(d=this.options.data[c],!d.hasOwnProperty(b.field))return;-1!==a.inArray(d[b.field],b.values)&&this.options.data.splice(c,1)}e!==this.options.data.length&&(this.initSearch(),this.initPagination(),this.initBody(!0))}},g.prototype.updateRow=function(b){b.hasOwnProperty("index")&&b.hasOwnProperty("row")&&(a.extend(this.data[b.index],b.row),this.initBody())},g.prototype.mergeCells=function(b){var c,d,e=b.index,f=a.inArray(b.field,this.header.fields),g=b.rowspan||1,h=b.colspan||1,i=this.$body.find("tr"),j=i.eq(e).find("td").eq(f);if(!(0>e||0>f||e>=this.data.length)){for(c=e;e+g>c;c++)for(d=f;f+h>d;d++)i.eq(c).find("td").eq(d).hide();j.attr("rowspan",g).attr("colspan",h).show(10,a.proxy(this.resetView,this))}},g.prototype.getSelections=function(){var b=this;return a.grep(this.data,function(a){return a[b.header.stateField]})},g.prototype.checkAll=function(){this.$selectAll.add(this.$selectAll_).prop("checked",!0),this.$selectItem.filter(":enabled").prop("checked",!0),this.updateRows(!0),this.updateSelected(),this.trigger("check-all")},g.prototype.uncheckAll=function(){this.$selectAll.add(this.$selectAll_).prop("checked",!1),this.$selectItem.filter(":enabled").prop("checked",!1),this.updateRows(!1),this.updateSelected(),this.trigger("uncheck-all")},g.prototype.destroy=function(){this.$el.insertBefore(this.$container),a(this.options.toolbar).insertBefore(this.$el),this.$container.next().remove(),this.$container.remove(),this.$el.html(this.$el_.html()).attr("class",this.$el_.attr("class")||"")},g.prototype.showLoading=function(){this.$loading.show()},g.prototype.hideLoading=function(){this.$loading.hide()},g.prototype.refresh=function(a){a&&a.url&&(this.options.url=a.url),this.initServer(a&&a.silent)},g.prototype.showColumn=function(a){this.toggleColumn(d(this.options.columns,a),!0,!0)},g.prototype.hideColumn=function(a){this.toggleColumn(d(this.options.columns,a),!1,!0)},a.fn.bootstrapTable=function(b,c){var d,e=["getSelections","getData","load","append","remove","updateRow","mergeCells","checkAll","uncheckAll","refresh","resetView","destroy","showLoading","hideLoading","showColumn","hideColumn"];return this.each(function(){var f=a(this),h=f.data("bootstrap.table"),i=a.extend({},g.DEFAULTS,f.data(),"object"==typeof b&&b);if("string"==typeof b){if(a.inArray(b,e)<0)throw"Unknown method: "+b;if(!h)return;d=h[b](c),"destroy"===b&&f.removeData("bootstrap.table")}h||f.data("bootstrap.table",h=new g(this,i))}),"undefined"==typeof d?this:d},a.fn.bootstrapTable.Constructor=g,a.fn.bootstrapTable.defaults=g.DEFAULTS,a.fn.bootstrapTable.columnDefaults=g.COLUMN_DEFAULTS,a(function(){a('[data-toggle="table"]').bootstrapTable()})}(jQuery);

/*!* FitVids 1.1*/

(function( $ ){

  "use strict";

  $.fn.fitVids = function( options ) {
    var settings = {
      customSelector: null
    };

    if(!document.getElementById('fit-vids-style')) {
      // appendStyles: https://github.com/toddmotto/fluidvids/blob/master/dist/fluidvids.js
      var head = document.head || document.getElementsByTagName('head')[0];
      var css = '.fluid-width-video-wrapper{width:100%;position:relative;padding:0;}.fluid-width-video-wrapper iframe,.fluid-width-video-wrapper object,.fluid-width-video-wrapper embed {position:absolute;top:0;left:0;width:100%;height:100%;}';
      var div = document.createElement('div');
      div.innerHTML = '<p>x</p><style id="fit-vids-style">' + css + '</style>';
      head.appendChild(div.childNodes[1]);
    }

    if ( options ) {
      $.extend( settings, options );
    }

    return this.each(function(){
      var selectors = [
        "iframe[src*='player.vimeo.com']",
        "iframe[src*='youtube.com']",
        "iframe[src*='youtube-nocookie.com']",
        "iframe[src*='kickstarter.com'][src*='video.html']",
        "object",
        "embed"
      ];

      if (settings.customSelector) {
        selectors.push(settings.customSelector);
      }

      var $allVideos = $(this).find(selectors.join(','));
      $allVideos = $allVideos.not("object object"); // SwfObj conflict patch

      $allVideos.each(function(){
        var $this = $(this);
        if (this.tagName.toLowerCase() === 'embed' && $this.parent('object').length || $this.parent('.fluid-width-video-wrapper').length) { return; }
        var height = ( this.tagName.toLowerCase() === 'object' || ($this.attr('height') && !isNaN(parseInt($this.attr('height'), 10))) ) ? parseInt($this.attr('height'), 10) : $this.height(),
            width = !isNaN(parseInt($this.attr('width'), 10)) ? parseInt($this.attr('width'), 10) : $this.width(),
            aspectRatio = height / width;
        if(!$this.attr('id')){
          var videoID = 'fitvid' + Math.floor(Math.random()*999999);
          $this.attr('id', videoID);
        }
        $this.wrap('<div class="fluid-width-video-wrapper"></div>').parent('.fluid-width-video-wrapper').css('padding-top', (aspectRatio * 100)+"%");
        $this.removeAttr('height').removeAttr('width');
      });
    });
  };
// Works with either jQuery or Zepto
})( window.jQuery || window.Zepto );

/*! Backstretch - v2.0.4 - 2013-06-19
* http://srobbin.com/jquery-plugins/backstretch/
* Copyright (c) 2013 Scott Robbin; Licensed MIT */
(function(a,d,p){a.fn.backstretch=function(c,b){(c===p||0===c.length)&&a.error("No images were supplied for Backstretch");0===a(d).scrollTop()&&d.scrollTo(0,0);return this.each(function(){var d=a(this),g=d.data("backstretch");if(g){if("string"==typeof c&&"function"==typeof g[c]){g[c](b);return}b=a.extend(g.options,b);g.destroy(!0)}g=new q(this,c,b);d.data("backstretch",g)})};a.backstretch=function(c,b){return a("body").backstretch(c,b).data("backstretch")};a.expr[":"].backstretch=function(c){return a(c).data("backstretch")!==p};a.fn.backstretch.defaults={centeredX:!0,centeredY:!0,duration:5E3,fade:0};var r={left:0,top:0,overflow:"hidden",margin:0,padding:0,height:"100%",width:"100%",zIndex:-999999},s={position:"absolute",display:"none",margin:0,padding:0,border:"none",width:"auto",height:"auto",maxHeight:"none",maxWidth:"none",zIndex:-999999},q=function(c,b,e){this.options=a.extend({},a.fn.backstretch.defaults,e||{});this.images=a.isArray(b)?b:[b];a.each(this.images,function(){a("<img />")[0].src=this});this.isBody=c===document.body;this.$container=a(c);this.$root=this.isBody?l?a(d):a(document):this.$container;c=this.$container.children(".backstretch").first();this.$wrap=c.length?c:a('<div class="backstretch"></div>').css(r).appendTo(this.$container);this.isBody||(c=this.$container.css("position"),b=this.$container.css("zIndex"),this.$container.css({position:"static"===c?"relative":c,zIndex:"auto"===b?0:b,background:"none"}),this.$wrap.css({zIndex:-999998}));this.$wrap.css({position:this.isBody&&l?"fixed":"absolute"});this.index=0;this.show(this.index);a(d).on("resize.backstretch",a.proxy(this.resize,this)).on("orientationchange.backstretch",a.proxy(function(){this.isBody&&0===d.pageYOffset&&(d.scrollTo(0,1),this.resize())},this))};q.prototype={resize:function(){try{var a={left:0,top:0},b=this.isBody?this.$root.width():this.$root.innerWidth(),e=b,g=this.isBody?d.innerHeight?d.innerHeight:this.$root.height():this.$root.innerHeight(),j=e/this.$img.data("ratio"),f;j>=g?(f=(j-g)/2,this.options.centeredY&&(a.top="-"+f+"px")):(j=g,e=j*this.$img.data("ratio"),f=(e-b)/2,this.options.centeredX&&(a.left="-"+f+"px"));this.$wrap.css({width:b,height:g}).find("img:not(.deleteable)").css({width:e,height:j}).css(a)}catch(h){}return this},show:function(c){if(!(Math.abs(c)>this.images.length-1)){var b=this,e=b.$wrap.find("img").addClass("deleteable"),d={relatedTarget:b.$container[0]};b.$container.trigger(a.Event("backstretch.before",d),[b,c]);this.index=c;clearInterval(b.interval);b.$img=a("<img />").css(s).bind("load",function(f){var h=this.width||a(f.target).width();f=this.height||a(f.target).height();a(this).data("ratio",h/f);a(this).fadeIn(b.options.speed||b.options.fade,function(){e.remove();b.paused||b.cycle();a(["after","show"]).each(function(){b.$container.trigger(a.Event("backstretch."+this,d),[b,c])})});b.resize()}).appendTo(b.$wrap);b.$img.attr("src",b.images[c]);return b}},next:function(){return this.show(this.index<this.images.length-1?this.index+1:0)},prev:function(){return this.show(0===this.index?this.images.length-1:this.index-1)},pause:function(){this.paused=!0;return this},resume:function(){this.paused=!1;this.next();return this},cycle:function(){1<this.images.length&&(clearInterval(this.interval),this.interval=setInterval(a.proxy(function(){this.paused||this.next()},this),this.options.duration));return this},destroy:function(c){a(d).off("resize.backstretch orientationchange.backstretch");clearInterval(this.interval);c||this.$wrap.remove();this.$container.removeData("backstretch")}};var l,f=navigator.userAgent,m=navigator.platform,e=f.match(/AppleWebKit\/([0-9]+)/),e=!!e&&e[1],h=f.match(/Fennec\/([0-9]+)/),h=!!h&&h[1],n=f.match(/Opera Mobi\/([0-9]+)/),t=!!n&&n[1],k=f.match(/MSIE ([0-9]+)/),k=!!k&&k[1];l=!((-1<m.indexOf("iPhone")||-1<m.indexOf("iPad")||-1<m.indexOf("iPod"))&&e&&534>e||d.operamini&&"[object OperaMini]"==={}.toString.call(d.operamini)||n&&7458>t||-1<f.indexOf("Android")&&e&&533>e||h&&6>h||"palmGetResource"in d&&e&&534>e||-1<f.indexOf("MeeGo")&&-1<f.indexOf("NokiaBrowser/8.5.0")||k&&6>=k)})(jQuery,window);

/*
 * jQuery FlexSlider v1.8
 * http://flex.madebymufffin.com
 * Copyright 2011, Tyler Smith
 */
(function(a){a.flexslider=function(c,b){var d=c;d.init=function(){d.vars=a.extend({},a.flexslider.defaults,b);d.data("flexslider",true);d.container=a(".slides",d);d.slides=a(".slides > li",d);d.count=d.slides.length;d.animating=false;d.currentSlide=d.vars.slideToStart;d.animatingTo=d.currentSlide;d.atEnd=(d.currentSlide==0)?true:false;d.eventType=("ontouchstart" in document.documentElement)?"touchstart":"click";d.cloneCount=0;d.cloneOffset=0;d.manualPause=false;d.vertical=(d.vars.slideDirection=="vertical");d.prop=(d.vertical)?"top":"marginLeft";d.args={};d.transitions="webkitTransition" in document.body.style;if(d.transitions){d.prop="-webkit-transform"}if(d.vars.controlsContainer!=""){d.controlsContainer=a(d.vars.controlsContainer).eq(a(".slides").index(d.container));d.containerExists=d.controlsContainer.length>0}if(d.vars.manualControls!=""){d.manualControls=a(d.vars.manualControls,((d.containerExists)?d.controlsContainer:d));d.manualExists=d.manualControls.length>0}if(d.vars.randomize){d.slides.sort(function(){return(Math.round(Math.random())-0.5)});d.container.empty().append(d.slides)}if(d.vars.animation.toLowerCase()=="slide"){if(d.transitions){d.setTransition(0)}d.css({overflow:"hidden"});if(d.vars.animationLoop){d.cloneCount=2;d.cloneOffset=1;d.container.append(d.slides.filter(":first").clone().addClass("clone")).prepend(d.slides.filter(":last").clone().addClass("clone"))}d.newSlides=a(".slides > li",d);var m=(-1*(d.currentSlide+d.cloneOffset));if(d.vertical){d.newSlides.css({display:"block",width:"100%","float":"left"});d.container.height((d.count+d.cloneCount)*200+"%").css("position","absolute").width("100%");setTimeout(function(){d.css({position:"relative"}).height(d.slides.filter(":first").height());d.args[d.prop]=(d.transitions)?"translate3d(0,"+m*d.height()+"px,0)":m*d.height()+"px";d.container.css(d.args)},100)}else{d.args[d.prop]=(d.transitions)?"translate3d("+m*d.width()+"px,0,0)":m*d.width()+"px";d.container.width((d.count+d.cloneCount)*200+"%").css(d.args);setTimeout(function(){d.newSlides.width(d.width()).css({"float":"left",display:"block"})},100)}}else{d.transitions=false;d.slides.css({width:"100%","float":"left",marginRight:"-100%"}).eq(d.currentSlide).fadeIn(d.vars.animationDuration)}if(d.vars.controlNav){if(d.manualExists){d.controlNav=d.manualControls}else{var e=a('<ol class="flex-control-nav"></ol>');var s=1;for(var t=0;t<d.count;t++){e.append("<li><a>"+s+"</a></li>");s++}if(d.containerExists){a(d.controlsContainer).append(e);d.controlNav=a(".flex-control-nav li a",d.controlsContainer)}else{d.append(e);d.controlNav=a(".flex-control-nav li a",d)}}d.controlNav.eq(d.currentSlide).addClass("active");d.controlNav.bind(d.eventType,function(i){i.preventDefault();if(!a(this).hasClass("active")){(d.controlNav.index(a(this))>d.currentSlide)?d.direction="next":d.direction="prev";d.flexAnimate(d.controlNav.index(a(this)),d.vars.pauseOnAction)}})}if(d.vars.directionNav){var v=a('<ul class="flex-direction-nav"><li><a class="prev" href="#">'+d.vars.prevText+'</a></li><li><a class="next" href="#">'+d.vars.nextText+"</a></li></ul>");if(d.containerExists){a(d.controlsContainer).append(v);d.directionNav=a(".flex-direction-nav li a",d.controlsContainer)}else{d.append(v);d.directionNav=a(".flex-direction-nav li a",d)}if(!d.vars.animationLoop){if(d.currentSlide==0){d.directionNav.filter(".prev").addClass("disabled")}else{if(d.currentSlide==d.count-1){d.directionNav.filter(".next").addClass("disabled")}}}d.directionNav.bind(d.eventType,function(i){i.preventDefault();var j=(a(this).hasClass("next"))?d.getTarget("next"):d.getTarget("prev");if(d.canAdvance(j)){d.flexAnimate(j,d.vars.pauseOnAction)}})}if(d.vars.keyboardNav&&a("ul.slides").length==1){function h(i){if(d.animating){return}else{if(i.keyCode!=39&&i.keyCode!=37){return}else{if(i.keyCode==39){var j=d.getTarget("next")}else{if(i.keyCode==37){var j=d.getTarget("prev")}}if(d.canAdvance(j)){d.flexAnimate(j,d.vars.pauseOnAction)}}}}a(document).bind("keyup",h)}if(d.vars.mousewheel){d.mousewheelEvent=(/Firefox/i.test(navigator.userAgent))?"DOMMouseScroll":"mousewheel";d.bind(d.mousewheelEvent,function(y){y.preventDefault();y=y?y:window.event;var i=y.detail?y.detail*-1:y.wheelDelta/40,j=(i<0)?d.getTarget("next"):d.getTarget("prev");if(d.canAdvance(j)){d.flexAnimate(j,d.vars.pauseOnAction)}})}if(d.vars.slideshow){if(d.vars.pauseOnHover&&d.vars.slideshow){d.hover(function(){d.pause()},function(){if(!d.manualPause){d.resume()}})}d.animatedSlides=setInterval(d.animateSlides,d.vars.slideshowSpeed)}if(d.vars.pausePlay){var q=a('<div class="flex-pauseplay"><span></span></div>');if(d.containerExists){d.controlsContainer.append(q);d.pausePlay=a(".flex-pauseplay span",d.controlsContainer)}else{d.append(q);d.pausePlay=a(".flex-pauseplay span",d)}var n=(d.vars.slideshow)?"pause":"play";d.pausePlay.addClass(n).text((n=="pause")?d.vars.pauseText:d.vars.playText);d.pausePlay.bind(d.eventType,function(i){i.preventDefault();if(a(this).hasClass("pause")){d.pause();d.manualPause=true}else{d.resume();d.manualPause=false}})}if("ontouchstart" in document.documentElement){var w,u,l,r,o,x,p=false;d.each(function(){if("ontouchstart" in document.documentElement){this.addEventListener("touchstart",g,false)}});function g(i){if(d.animating){i.preventDefault()}else{if(i.touches.length==1){d.pause();r=(d.vertical)?d.height():d.width();x=Number(new Date());l=(d.vertical)?(d.currentSlide+d.cloneOffset)*d.height():(d.currentSlide+d.cloneOffset)*d.width();w=(d.vertical)?i.touches[0].pageY:i.touches[0].pageX;u=(d.vertical)?i.touches[0].pageX:i.touches[0].pageY;d.setTransition(0);this.addEventListener("touchmove",k,false);this.addEventListener("touchend",f,false)}}}function k(i){o=(d.vertical)?w-i.touches[0].pageY:w-i.touches[0].pageX;p=(d.vertical)?(Math.abs(o)<Math.abs(i.touches[0].pageX-u)):(Math.abs(o)<Math.abs(i.touches[0].pageY-u));if(!p){i.preventDefault();if(d.vars.animation=="slide"&&d.transitions){if(!d.vars.animationLoop){o=o/((d.currentSlide==0&&o<0||d.currentSlide==d.count-1&&o>0)?(Math.abs(o)/r+2):1)}d.args[d.prop]=(d.vertical)?"translate3d(0,"+(-l-o)+"px,0)":"translate3d("+(-l-o)+"px,0,0)";d.container.css(d.args)}}}function f(j){d.animating=false;if(d.animatingTo==d.currentSlide&&!p&&!(o==null)){var i=(o>0)?d.getTarget("next"):d.getTarget("prev");if(d.canAdvance(i)&&Number(new Date())-x<550&&Math.abs(o)>20||Math.abs(o)>r/2){d.flexAnimate(i,d.vars.pauseOnAction)}else{d.flexAnimate(d.currentSlide,d.vars.pauseOnAction)}}this.removeEventListener("touchmove",k,false);this.removeEventListener("touchend",f,false);w=null;u=null;o=null;l=null}}if(d.vars.animation.toLowerCase()=="slide"){a(window).resize(function(){if(!d.animating){if(d.vertical){d.height(d.slides.filter(":first").height());d.args[d.prop]=(-1*(d.currentSlide+d.cloneOffset))*d.slides.filter(":first").height()+"px";if(d.transitions){d.setTransition(0);d.args[d.prop]=(d.vertical)?"translate3d(0,"+d.args[d.prop]+",0)":"translate3d("+d.args[d.prop]+",0,0)"}d.container.css(d.args)}else{d.newSlides.width(d.width());d.args[d.prop]=(-1*(d.currentSlide+d.cloneOffset))*d.width()+"px";if(d.transitions){d.setTransition(0);d.args[d.prop]=(d.vertical)?"translate3d(0,"+d.args[d.prop]+",0)":"translate3d("+d.args[d.prop]+",0,0)"}d.container.css(d.args)}}})}d.vars.start(d)};d.flexAnimate=function(g,f){if(!d.animating){d.animating=true;d.animatingTo=g;d.vars.before(d);if(f){d.pause()}if(d.vars.controlNav){d.controlNav.removeClass("active").eq(g).addClass("active")}d.atEnd=(g==0||g==d.count-1)?true:false;if(!d.vars.animationLoop&&d.vars.directionNav){if(g==0){d.directionNav.removeClass("disabled").filter(".prev").addClass("disabled")}else{if(g==d.count-1){d.directionNav.removeClass("disabled").filter(".next").addClass("disabled")}else{d.directionNav.removeClass("disabled")}}}if(!d.vars.animationLoop&&g==d.count-1){d.pause();d.vars.end(d)}if(d.vars.animation.toLowerCase()=="slide"){var e=(d.vertical)?d.slides.filter(":first").height():d.slides.filter(":first").width();if(d.currentSlide==0&&g==d.count-1&&d.vars.animationLoop&&d.direction!="next"){d.slideString="0px"}else{if(d.currentSlide==d.count-1&&g==0&&d.vars.animationLoop&&d.direction!="prev"){d.slideString=(-1*(d.count+1))*e+"px"}else{d.slideString=(-1*(g+d.cloneOffset))*e+"px"}}d.args[d.prop]=d.slideString;if(d.transitions){d.setTransition(d.vars.animationDuration);d.args[d.prop]=(d.vertical)?"translate3d(0,"+d.slideString+",0)":"translate3d("+d.slideString+",0,0)";d.container.css(d.args).one("webkitTransitionEnd transitionend",function(){d.wrapup(e)})}else{d.container.animate(d.args,d.vars.animationDuration,function(){d.wrapup(e)})}}else{d.slides.eq(d.currentSlide).fadeOut(d.vars.animationDuration);d.slides.eq(g).fadeIn(d.vars.animationDuration,function(){d.wrapup()})}}};d.wrapup=function(e){if(d.vars.animation=="slide"){if(d.currentSlide==0&&d.animatingTo==d.count-1&&d.vars.animationLoop){d.args[d.prop]=(-1*d.count)*e+"px";if(d.transitions){d.setTransition(0);d.args[d.prop]=(d.vertical)?"translate3d(0,"+d.args[d.prop]+",0)":"translate3d("+d.args[d.prop]+",0,0)"}d.container.css(d.args)}else{if(d.currentSlide==d.count-1&&d.animatingTo==0&&d.vars.animationLoop){d.args[d.prop]=-1*e+"px";if(d.transitions){d.setTransition(0);d.args[d.prop]=(d.vertical)?"translate3d(0,"+d.args[d.prop]+",0)":"translate3d("+d.args[d.prop]+",0,0)"}d.container.css(d.args)}}}d.animating=false;d.currentSlide=d.animatingTo;d.vars.after(d)};d.animateSlides=function(){if(!d.animating){d.flexAnimate(d.getTarget("next"))}};d.pause=function(){clearInterval(d.animatedSlides);if(d.vars.pausePlay){d.pausePlay.removeClass("pause").addClass("play").text(d.vars.playText)}};d.resume=function(){d.animatedSlides=setInterval(d.animateSlides,d.vars.slideshowSpeed);if(d.vars.pausePlay){d.pausePlay.removeClass("play").addClass("pause").text(d.vars.pauseText)}};d.canAdvance=function(e){if(!d.vars.animationLoop&&d.atEnd){if(d.currentSlide==0&&e==d.count-1&&d.direction!="next"){return false}else{if(d.currentSlide==d.count-1&&e==0&&d.direction=="next"){return false}else{return true}}}else{return true}};d.getTarget=function(e){d.direction=e;if(e=="next"){return(d.currentSlide==d.count-1)?0:d.currentSlide+1}else{return(d.currentSlide==0)?d.count-1:d.currentSlide-1}};d.setTransition=function(e){d.container.css({"-webkit-transition-duration":(e/1000)+"s"})};d.init()};a.flexslider.defaults={animation:"fade",slideDirection:"horizontal",slideshow:true,slideshowSpeed:7000,animationDuration:600,directionNav:true,controlNav:true,keyboardNav:true,mousewheel:false,prevText:"Previous",nextText:"Next",pausePlay:false,pauseText:"Pause",playText:"Play",randomize:false,slideToStart:0,animationLoop:true,pauseOnAction:true,pauseOnHover:false,controlsContainer:"",manualControls:"",start:function(){},before:function(){},after:function(){},end:function(){}};a.fn.flexslider=function(b){return this.each(function(){if(a(this).find(".slides li").length==1){a(this).find(".slides li").fadeIn(400)}else{if(a(this).data("flexslider")!=true){new a.flexslider(a(this),b)}}})}})(jQuery);

//imgLiquid
var imgLiquid=imgLiquid||{VER:"0.9.944"};imgLiquid.bgs_Available=!1,imgLiquid.bgs_CheckRunned=!1,imgLiquid.injectCss=".imgLiquid img {visibility:hidden;}",function(i){function t(){if(!imgLiquid.bgs_CheckRunned){imgLiquid.bgs_CheckRunned=!0;var t=i('<span style="background-size:cover" />');i("body").append(t),!function(){var i=t[0];if(i&&window.getComputedStyle){var e=window.getComputedStyle(i,null);e&&e.backgroundSize&&(imgLiquid.bgs_Available="cover"===e.backgroundSize)}}(),t.remove()}}i.fn.extend({imgLiquid:function(e){this.defaults={fill:!0,verticalAlign:"center",horizontalAlign:"center",useBackgroundSize:!0,useDataHtmlAttr:!0,responsive:!0,delay:0,fadeInTime:0,removeBoxBackground:!0,hardPixels:!0,responsiveCheckTime:500,timecheckvisibility:500,onStart:null,onFinish:null,onItemStart:null,onItemFinish:null,onItemError:null},t();var a=this;return this.options=e,this.settings=i.extend({},this.defaults,this.options),this.settings.onStart&&this.settings.onStart(),this.each(function(t){function e(){-1===u.css("background-image").indexOf(encodeURI(c.attr("src")))&&u.css({"background-image":'url("'+encodeURI(c.attr("src"))+'")'}),u.css({"background-size":g.fill?"cover":"contain","background-position":(g.horizontalAlign+" "+g.verticalAlign).toLowerCase(),"background-repeat":"no-repeat"}),i("a:first",u).css({display:"block",width:"100%",height:"100%"}),i("img",u).css({display:"none"}),g.onItemFinish&&g.onItemFinish(t,u,c),u.addClass("imgLiquid_bgSize"),u.addClass("imgLiquid_ready"),l()}function d(){function e(){c.data("imgLiquid_error")||c.data("imgLiquid_loaded")||c.data("imgLiquid_oldProcessed")||(u.is(":visible")&&c[0].complete&&c[0].width>0&&c[0].height>0?(c.data("imgLiquid_loaded",!0),setTimeout(r,t*g.delay)):setTimeout(e,g.timecheckvisibility))}if(c.data("oldSrc")&&c.data("oldSrc")!==c.attr("src")){var a=c.clone().removeAttr("style");return a.data("imgLiquid_settings",c.data("imgLiquid_settings")),c.parent().prepend(a),c.remove(),c=a,c[0].width=0,setTimeout(d,10),void 0}return c.data("imgLiquid_oldProcessed")?(r(),void 0):(c.data("imgLiquid_oldProcessed",!1),c.data("oldSrc",c.attr("src")),i("img:not(:first)",u).css("display","none"),u.css({overflow:"hidden"}),c.fadeTo(0,0).removeAttr("width").removeAttr("height").css({visibility:"visible","max-width":"none","max-height":"none",width:"auto",height:"auto",display:"block"}),c.on("error",n),c[0].onerror=n,e(),o(),void 0)}function o(){(g.responsive||c.data("imgLiquid_oldProcessed"))&&c.data("imgLiquid_settings")&&(g=c.data("imgLiquid_settings"),u.actualSize=u.get(0).offsetWidth+u.get(0).offsetHeight/1e4,u.sizeOld&&u.actualSize!==u.sizeOld&&r(),u.sizeOld=u.actualSize,setTimeout(o,g.responsiveCheckTime))}function n(){c.data("imgLiquid_error",!0),u.addClass("imgLiquid_error"),g.onItemError&&g.onItemError(t,u,c),l()}function s(){var i={};if(a.settings.useDataHtmlAttr){var t=u.attr("data-imgLiquid-fill"),e=u.attr("data-imgLiquid-horizontalAlign"),d=u.attr("data-imgLiquid-verticalAlign");("true"===t||"false"===t)&&(i.fill=Boolean("true"===t)),void 0===e||"left"!==e&&"center"!==e&&"right"!==e&&-1===e.indexOf("%")||(i.horizontalAlign=e),void 0===d||"top"!==d&&"bottom"!==d&&"center"!==d&&-1===d.indexOf("%")||(i.verticalAlign=d)}return imgLiquid.isIE&&a.settings.ieFadeInDisabled&&(i.fadeInTime=0),i}function r(){var i,e,a,d,o,n,s,r,m=0,h=0,f=u.width(),v=u.height();void 0===c.data("owidth")&&c.data("owidth",c[0].width),void 0===c.data("oheight")&&c.data("oheight",c[0].height),g.fill===f/v>=c.data("owidth")/c.data("oheight")?(i="100%",e="auto",a=Math.floor(f),d=Math.floor(f*(c.data("oheight")/c.data("owidth")))):(i="auto",e="100%",a=Math.floor(v*(c.data("owidth")/c.data("oheight"))),d=Math.floor(v)),o=g.horizontalAlign.toLowerCase(),s=f-a,"left"===o&&(h=0),"center"===o&&(h=.5*s),"right"===o&&(h=s),-1!==o.indexOf("%")&&(o=parseInt(o.replace("%",""),10),o>0&&(h=.01*s*o)),n=g.verticalAlign.toLowerCase(),r=v-d,"left"===n&&(m=0),"center"===n&&(m=.5*r),"bottom"===n&&(m=r),-1!==n.indexOf("%")&&(n=parseInt(n.replace("%",""),10),n>0&&(m=.01*r*n)),g.hardPixels&&(i=a,e=d),c.css({width:i,height:e,"margin-left":Math.floor(h),"margin-top":Math.floor(m)}),c.data("imgLiquid_oldProcessed")||(c.fadeTo(g.fadeInTime,1),c.data("imgLiquid_oldProcessed",!0),g.removeBoxBackground&&u.css("background-image","none"),u.addClass("imgLiquid_nobgSize"),u.addClass("imgLiquid_ready")),g.onItemFinish&&g.onItemFinish(t,u,c),l()}function l(){t===a.length-1&&a.settings.onFinish&&a.settings.onFinish()}var g=a.settings,u=i(this),c=i("img:first",u);return c.length?(c.data("imgLiquid_settings")?(u.removeClass("imgLiquid_error").removeClass("imgLiquid_ready"),g=i.extend({},c.data("imgLiquid_settings"),a.options)):g=i.extend({},a.settings,s()),c.data("imgLiquid_settings",g),g.onItemStart&&g.onItemStart(t,u,c),imgLiquid.bgs_Available&&g.useBackgroundSize?e():d(),void 0):(n(),void 0)})}})}(jQuery),!function(){var i=imgLiquid.injectCss,t=document.getElementsByTagName("head")[0],e=document.createElement("style");e.type="text/css",e.styleSheet?e.styleSheet.cssText=i:e.appendChild(document.createTextNode(i)),t.appendChild(e)}();

/* owl-carousel */
eval(function(p,a,c,k,e,r){e=function(c){return(c<a?'':e(parseInt(c/a)))+((c=c%a)>35?String.fromCharCode(c+29):c.toString(36))};if(!''.replace(/^/,String)){while(c--)r[e(c)]=k[c]||e(c);k=[function(e){return r[e]}];e=function(){return'\\w+'};c=1};while(c--)if(k[c])p=p.replace(new RegExp('\\b'+e(c)+'\\b','g'),k[c]);return p}('7(A 3c.3q!=="9"){3c.3q=9(e){9 t(){}t.5S=e;p 5R t}}(9(e,t,n){h r={1N:9(t,n){h r=c;r.$k=e(n);r.6=e.4M({},e.37.2B.6,r.$k.v(),t);r.2A=t;r.4L()},4L:9(){9 r(e){h n,r="";7(A t.6.33==="9"){t.6.33.R(c,[e])}l{1A(n 38 e.d){7(e.d.5M(n)){r+=e.d[n].1K}}t.$k.2y(r)}t.3t()}h t=c,n;7(A t.6.2H==="9"){t.6.2H.R(c,[t.$k])}7(A t.6.2O==="2Y"){n=t.6.2O;e.5K(n,r)}l{t.3t()}},3t:9(){h e=c;e.$k.v("d-4I",e.$k.2x("2w")).v("d-4F",e.$k.2x("H"));e.$k.z({2u:0});e.2t=e.6.q;e.4E();e.5v=0;e.1X=14;e.23()},23:9(){h e=c;7(e.$k.25().N===0){p b}e.1M();e.4C();e.$S=e.$k.25();e.E=e.$S.N;e.4B();e.$G=e.$k.17(".d-1K");e.$K=e.$k.17(".d-1p");e.3u="U";e.13=0;e.26=[0];e.m=0;e.4A();e.4z()},4z:9(){h e=c;e.2V();e.2W();e.4t();e.30();e.4r();e.4q();e.2p();e.4o();7(e.6.2o!==b){e.4n(e.6.2o)}7(e.6.O===j){e.6.O=4Q}e.19();e.$k.17(".d-1p").z("4i","4h");7(!e.$k.2m(":3n")){e.3o()}l{e.$k.z("2u",1)}e.5O=b;e.2l();7(A e.6.3s==="9"){e.6.3s.R(c,[e.$k])}},2l:9(){h e=c;7(e.6.1Z===j){e.1Z()}7(e.6.1B===j){e.1B()}e.4g();7(A e.6.3w==="9"){e.6.3w.R(c,[e.$k])}},3x:9(){h e=c;7(A e.6.3B==="9"){e.6.3B.R(c,[e.$k])}e.3o();e.2V();e.2W();e.4f();e.30();e.2l();7(A e.6.3D==="9"){e.6.3D.R(c,[e.$k])}},3F:9(){h e=c;t.1c(9(){e.3x()},0)},3o:9(){h e=c;7(e.$k.2m(":3n")===b){e.$k.z({2u:0});t.18(e.1C);t.18(e.1X)}l{p b}e.1X=t.4d(9(){7(e.$k.2m(":3n")){e.3F();e.$k.4b({2u:1},2M);t.18(e.1X)}},5x)},4B:9(){h e=c;e.$S.5n(\'<L H="d-1p">\').4a(\'<L H="d-1K"></L>\');e.$k.17(".d-1p").4a(\'<L H="d-1p-49">\');e.1H=e.$k.17(".d-1p-49");e.$k.z("4i","4h")},1M:9(){h e=c,t=e.$k.1I(e.6.1M),n=e.$k.1I(e.6.2i);7(!t){e.$k.I(e.6.1M)}7(!n){e.$k.I(e.6.2i)}},2V:9(){h t=c,n,r;7(t.6.2Z===b){p b}7(t.6.48===j){t.6.q=t.2t=1;t.6.1h=b;t.6.1s=b;t.6.1O=b;t.6.22=b;t.6.1Q=b;t.6.1R=b;p b}n=e(t.6.47).1f();7(n>(t.6.1s[0]||t.2t)){t.6.q=t.2t}7(t.6.1h!==b){t.6.1h.5g(9(e,t){p e[0]-t[0]});1A(r=0;r<t.6.1h.N;r+=1){7(t.6.1h[r][0]<=n){t.6.q=t.6.1h[r][1]}}}l{7(n<=t.6.1s[0]&&t.6.1s!==b){t.6.q=t.6.1s[1]}7(n<=t.6.1O[0]&&t.6.1O!==b){t.6.q=t.6.1O[1]}7(n<=t.6.22[0]&&t.6.22!==b){t.6.q=t.6.22[1]}7(n<=t.6.1Q[0]&&t.6.1Q!==b){t.6.q=t.6.1Q[1]}7(n<=t.6.1R[0]&&t.6.1R!==b){t.6.q=t.6.1R[1]}}7(t.6.q>t.E&&t.6.46===j){t.6.q=t.E}},4r:9(){h n=c,r,i;7(n.6.2Z!==j){p b}i=e(t).1f();n.3d=9(){7(e(t).1f()!==i){7(n.6.O!==b){t.18(n.1C)}t.5d(r);r=t.1c(9(){i=e(t).1f();n.3x()},n.6.45)}};e(t).44(n.3d)},4f:9(){h e=c;e.2g(e.m);7(e.6.O!==b){e.3j()}},43:9(){h t=c,n=0,r=t.E-t.6.q;t.$G.2f(9(i){h s=e(c);s.z({1f:t.M}).v("d-1K",3p(i));7(i%t.6.q===0||i===r){7(!(i>r)){n+=1}}s.v("d-24",n)})},42:9(){h e=c,t=e.$G.N*e.M;e.$K.z({1f:t*2,T:0});e.43()},2W:9(){h e=c;e.40();e.42();e.3Z();e.3v()},40:9(){h e=c;e.M=1F.4O(e.$k.1f()/e.6.q)},3v:9(){h e=c,t=(e.E*e.M-e.6.q*e.M)*-1;7(e.6.q>e.E){e.D=0;t=0;e.3z=0}l{e.D=e.E-e.6.q;e.3z=t}p t},3Y:9(){p 0},3Z:9(){h t=c,n=0,r=0,i,s,o;t.J=[0];t.3E=[];1A(i=0;i<t.E;i+=1){r+=t.M;t.J.2D(-r);7(t.6.12===j){s=e(t.$G[i]);o=s.v("d-24");7(o!==n){t.3E[n]=t.J[i];n=o}}}},4t:9(){h t=c;7(t.6.2a===j||t.6.1v===j){t.B=e(\'<L H="d-5A"/>\').5m("5l",!t.F.15).5c(t.$k)}7(t.6.1v===j){t.3T()}7(t.6.2a===j){t.3S()}},3S:9(){h t=c,n=e(\'<L H="d-4U"/>\');t.B.1o(n);t.1u=e("<L/>",{"H":"d-1n",2y:t.6.2U[0]||""});t.1q=e("<L/>",{"H":"d-U",2y:t.6.2U[1]||""});n.1o(t.1u).1o(t.1q);n.w("2X.B 21.B",\'L[H^="d"]\',9(e){e.1l()});n.w("2n.B 28.B",\'L[H^="d"]\',9(n){n.1l();7(e(c).1I("d-U")){t.U()}l{t.1n()}})},3T:9(){h t=c;t.1k=e(\'<L H="d-1v"/>\');t.B.1o(t.1k);t.1k.w("2n.B 28.B",".d-1j",9(n){n.1l();7(3p(e(c).v("d-1j"))!==t.m){t.1g(3p(e(c).v("d-1j")),j)}})},3P:9(){h t=c,n,r,i,s,o,u;7(t.6.1v===b){p b}t.1k.2y("");n=0;r=t.E-t.E%t.6.q;1A(s=0;s<t.E;s+=1){7(s%t.6.q===0){n+=1;7(r===s){i=t.E-t.6.q}o=e("<L/>",{"H":"d-1j"});u=e("<3N></3N>",{4R:t.6.39===j?n:"","H":t.6.39===j?"d-59":""});o.1o(u);o.v("d-1j",r===s?i:s);o.v("d-24",n);t.1k.1o(o)}}t.35()},35:9(){h t=c;7(t.6.1v===b){p b}t.1k.17(".d-1j").2f(9(){7(e(c).v("d-24")===e(t.$G[t.m]).v("d-24")){t.1k.17(".d-1j").Z("2d");e(c).I("2d")}})},3e:9(){h e=c;7(e.6.2a===b){p b}7(e.6.2e===b){7(e.m===0&&e.D===0){e.1u.I("1b");e.1q.I("1b")}l 7(e.m===0&&e.D!==0){e.1u.I("1b");e.1q.Z("1b")}l 7(e.m===e.D){e.1u.Z("1b");e.1q.I("1b")}l 7(e.m!==0&&e.m!==e.D){e.1u.Z("1b");e.1q.Z("1b")}}},30:9(){h e=c;e.3P();e.3e();7(e.B){7(e.6.q>=e.E){e.B.3K()}l{e.B.3J()}}},55:9(){h e=c;7(e.B){e.B.3k()}},U:9(e){h t=c;7(t.1E){p b}t.m+=t.6.12===j?t.6.q:1;7(t.m>t.D+(t.6.12===j?t.6.q-1:0)){7(t.6.2e===j){t.m=0;e="2k"}l{t.m=t.D;p b}}t.1g(t.m,e)},1n:9(e){h t=c;7(t.1E){p b}7(t.6.12===j&&t.m>0&&t.m<t.6.q){t.m=0}l{t.m-=t.6.12===j?t.6.q:1}7(t.m<0){7(t.6.2e===j){t.m=t.D;e="2k"}l{t.m=0;p b}}t.1g(t.m,e)},1g:9(e,n,r){h i=c,s;7(i.1E){p b}7(A i.6.1Y==="9"){i.6.1Y.R(c,[i.$k])}7(e>=i.D){e=i.D}l 7(e<=0){e=0}i.m=i.d.m=e;7(i.6.2o!==b&&r!=="4e"&&i.6.q===1&&i.F.1x===j){i.1t(0);7(i.F.1x===j){i.1L(i.J[e])}l{i.1r(i.J[e],1)}i.2r();i.4l();p b}s=i.J[e];7(i.F.1x===j){i.1T=b;7(n===j){i.1t("1w");t.1c(9(){i.1T=j},i.6.1w)}l 7(n==="2k"){i.1t(i.6.2v);t.1c(9(){i.1T=j},i.6.2v)}l{i.1t("1m");t.1c(9(){i.1T=j},i.6.1m)}i.1L(s)}l{7(n===j){i.1r(s,i.6.1w)}l 7(n==="2k"){i.1r(s,i.6.2v)}l{i.1r(s,i.6.1m)}}i.2r()},2g:9(e){h t=c;7(A t.6.1Y==="9"){t.6.1Y.R(c,[t.$k])}7(e>=t.D||e===-1){e=t.D}l 7(e<=0){e=0}t.1t(0);7(t.F.1x===j){t.1L(t.J[e])}l{t.1r(t.J[e],1)}t.m=t.d.m=e;t.2r()},2r:9(){h e=c;e.26.2D(e.m);e.13=e.d.13=e.26[e.26.N-2];e.26.5f(0);7(e.13!==e.m){e.35();e.3e();e.2l();7(e.6.O!==b){e.3j()}}7(A e.6.3y==="9"&&e.13!==e.m){e.6.3y.R(c,[e.$k])}},X:9(){h e=c;e.3A="X";t.18(e.1C)},3j:9(){h e=c;7(e.3A!=="X"){e.19()}},19:9(){h e=c;e.3A="19";7(e.6.O===b){p b}t.18(e.1C);e.1C=t.4d(9(){e.U(j)},e.6.O)},1t:9(e){h t=c;7(e==="1m"){t.$K.z(t.2z(t.6.1m))}l 7(e==="1w"){t.$K.z(t.2z(t.6.1w))}l 7(A e!=="2Y"){t.$K.z(t.2z(e))}},2z:9(e){p{"-1G-1a":"2C "+e+"1z 2s","-1W-1a":"2C "+e+"1z 2s","-o-1a":"2C "+e+"1z 2s",1a:"2C "+e+"1z 2s"}},3H:9(){p{"-1G-1a":"","-1W-1a":"","-o-1a":"",1a:""}},3I:9(e){p{"-1G-P":"1i("+e+"V, C, C)","-1W-P":"1i("+e+"V, C, C)","-o-P":"1i("+e+"V, C, C)","-1z-P":"1i("+e+"V, C, C)",P:"1i("+e+"V, C,C)"}},1L:9(e){h t=c;t.$K.z(t.3I(e))},3L:9(e){h t=c;t.$K.z({T:e})},1r:9(e,t){h n=c;n.29=b;n.$K.X(j,j).4b({T:e},{54:t||n.6.1m,3M:9(){n.29=j}})},4E:9(){h e=c,r="1i(C, C, C)",i=n.56("L"),s,o,u,a;i.2w.3O="  -1W-P:"+r+"; -1z-P:"+r+"; -o-P:"+r+"; -1G-P:"+r+"; P:"+r;s=/1i\\(C, C, C\\)/g;o=i.2w.3O.5i(s);u=o!==14&&o.N===1;a="5z"38 t||t.5Q.4P;e.F={1x:u,15:a}},4q:9(){h e=c;7(e.6.27!==b||e.6.1U!==b){e.3Q();e.3R()}},4C:9(){h e=c,t=["s","e","x"];e.16={};7(e.6.27===j&&e.6.1U===j){t=["2X.d 21.d","2N.d 3U.d","2n.d 3V.d 28.d"]}l 7(e.6.27===b&&e.6.1U===j){t=["2X.d","2N.d","2n.d 3V.d"]}l 7(e.6.27===j&&e.6.1U===b){t=["21.d","3U.d","28.d"]}e.16.3W=t[0];e.16.2K=t[1];e.16.2J=t[2]},3R:9(){h t=c;t.$k.w("5y.d",9(e){e.1l()});t.$k.w("21.3X",9(t){p e(t.1d).2m("5C, 5E, 5F, 5N")})},3Q:9(){9 s(e){7(e.2b!==W){p{x:e.2b[0].2c,y:e.2b[0].41}}7(e.2b===W){7(e.2c!==W){p{x:e.2c,y:e.41}}7(e.2c===W){p{x:e.52,y:e.53}}}}9 o(t){7(t==="w"){e(n).w(r.16.2K,a);e(n).w(r.16.2J,f)}l 7(t==="Q"){e(n).Q(r.16.2K);e(n).Q(r.16.2J)}}9 u(n){h u=n.3h||n||t.3g,a;7(u.5a===3){p b}7(r.E<=r.6.q){p}7(r.29===b&&!r.6.3f){p b}7(r.1T===b&&!r.6.3f){p b}7(r.6.O!==b){t.18(r.1C)}7(r.F.15!==j&&!r.$K.1I("3b")){r.$K.I("3b")}r.11=0;r.Y=0;e(c).z(r.3H());a=e(c).2h();i.2S=a.T;i.2R=s(u).x-a.T;i.2P=s(u).y-a.5o;o("w");i.2j=b;i.2L=u.1d||u.4c}9 a(o){h u=o.3h||o||t.3g,a,f;r.11=s(u).x-i.2R;r.2I=s(u).y-i.2P;r.Y=r.11-i.2S;7(A r.6.2E==="9"&&i.3C!==j&&r.Y!==0){i.3C=j;r.6.2E.R(r,[r.$k])}7((r.Y>8||r.Y<-8)&&r.F.15===j){7(u.1l!==W){u.1l()}l{u.5L=b}i.2j=j}7((r.2I>10||r.2I<-10)&&i.2j===b){e(n).Q("2N.d")}a=9(){p r.Y/5};f=9(){p r.3z+r.Y/5};r.11=1F.3v(1F.3Y(r.11,a()),f());7(r.F.1x===j){r.1L(r.11)}l{r.3L(r.11)}}9 f(n){h s=n.3h||n||t.3g,u,a,f;s.1d=s.1d||s.4c;i.3C=b;7(r.F.15!==j){r.$K.Z("3b")}7(r.Y<0){r.1y=r.d.1y="T"}l{r.1y=r.d.1y="3i"}7(r.Y!==0){u=r.4j();r.1g(u,b,"4e");7(i.2L===s.1d&&r.F.15!==j){e(s.1d).w("3a.4k",9(t){t.4S();t.4T();t.1l();e(t.1d).Q("3a.4k")});a=e.4N(s.1d,"4V").3a;f=a.4W();a.4X(0,0,f)}}o("Q")}h r=c,i={2R:0,2P:0,4Y:0,2S:0,2h:14,4Z:14,50:14,2j:14,51:14,2L:14};r.29=j;r.$k.w(r.16.3W,".d-1p",u)},4j:9(){h e=c,t=e.4m();7(t>e.D){e.m=e.D;t=e.D}l 7(e.11>=0){t=0;e.m=0}p t},4m:9(){h t=c,n=t.6.12===j?t.3E:t.J,r=t.11,i=14;e.2f(n,9(s,o){7(r-t.M/20>n[s+1]&&r-t.M/20<o&&t.34()==="T"){i=o;7(t.6.12===j){t.m=e.4p(i,t.J)}l{t.m=s}}l 7(r+t.M/20<o&&r+t.M/20>(n[s+1]||n[s]-t.M)&&t.34()==="3i"){7(t.6.12===j){i=n[s+1]||n[n.N-1];t.m=e.4p(i,t.J)}l{i=n[s+1];t.m=s+1}}});p t.m},34:9(){h e=c,t;7(e.Y<0){t="3i";e.3u="U"}l{t="T";e.3u="1n"}p t},4A:9(){h e=c;e.$k.w("d.U",9(){e.U()});e.$k.w("d.1n",9(){e.1n()});e.$k.w("d.19",9(t,n){e.6.O=n;e.19();e.32="19"});e.$k.w("d.X",9(){e.X();e.32="X"});e.$k.w("d.1g",9(t,n){e.1g(n)});e.$k.w("d.2g",9(t,n){e.2g(n)})},2p:9(){h e=c;7(e.6.2p===j&&e.F.15!==j&&e.6.O!==b){e.$k.w("57",9(){e.X()});e.$k.w("58",9(){7(e.32!=="X"){e.19()}})}},1Z:9(){h t=c,n,r,i,s,o;7(t.6.1Z===b){p b}1A(n=0;n<t.E;n+=1){r=e(t.$G[n]);7(r.v("d-1e")==="1e"){4s}i=r.v("d-1K");s=r.17(".5b");7(A s.v("1J")!=="2Y"){r.v("d-1e","1e");4s}7(r.v("d-1e")===W){s.3K();r.I("4u").v("d-1e","5e")}7(t.6.4v===j){o=i>=t.m}l{o=j}7(o&&i<t.m+t.6.q&&s.N){t.4w(r,s)}}},4w:9(e,n){9 o(){e.v("d-1e","1e").Z("4u");n.5h("v-1J");7(r.6.4x==="4y"){n.5j(5k)}l{n.3J()}7(A r.6.2T==="9"){r.6.2T.R(c,[r.$k])}}9 u(){i+=1;7(r.2Q(n.3l(0))||s===j){o()}l 7(i<=2q){t.1c(u,2q)}l{o()}}h r=c,i=0,s;7(n.5p("5q")==="5r"){n.z("5s-5t","5u("+n.v("1J")+")");s=j}l{n[0].1J=n.v("1J")}u()},1B:9(){9 s(){h r=e(n.$G[n.m]).2G();n.1H.z("2G",r+"V");7(!n.1H.1I("1B")){t.1c(9(){n.1H.I("1B")},0)}}9 o(){i+=1;7(n.2Q(r.3l(0))){s()}l 7(i<=2q){t.1c(o,2q)}l{n.1H.z("2G","")}}h n=c,r=e(n.$G[n.m]).17("5w"),i;7(r.3l(0)!==W){i=0;o()}l{s()}},2Q:9(e){h t;7(!e.3M){p b}t=A e.4D;7(t!=="W"&&e.4D===0){p b}p j},4g:9(){h t=c,n;7(t.6.2F===j){t.$G.Z("2d")}t.1D=[];1A(n=t.m;n<t.m+t.6.q;n+=1){t.1D.2D(n);7(t.6.2F===j){e(t.$G[n]).I("2d")}}t.d.1D=t.1D},4n:9(e){h t=c;t.4G="d-"+e+"-5B";t.4H="d-"+e+"-38"},4l:9(){9 a(e){p{2h:"5D",T:e+"V"}}h e=c,t=e.4G,n=e.4H,r=e.$G.1S(e.m),i=e.$G.1S(e.13),s=1F.4J(e.J[e.m])+e.J[e.13],o=1F.4J(e.J[e.m])+e.M/2,u="5G 5H 5I 5J";e.1E=j;e.$K.I("d-1P").z({"-1G-P-1P":o+"V","-1W-4K-1P":o+"V","4K-1P":o+"V"});i.z(a(s,10)).I(t).w(u,9(){e.3m=j;i.Q(u);e.31(i,t)});r.I(n).w(u,9(){e.36=j;r.Q(u);e.31(r,n)})},31:9(e,t){h n=c;e.z({2h:"",T:""}).Z(t);7(n.3m&&n.36){n.$K.Z("d-1P");n.3m=b;n.36=b;n.1E=b}},4o:9(){h e=c;e.d={2A:e.2A,5P:e.$k,S:e.$S,G:e.$G,m:e.m,13:e.13,1D:e.1D,15:e.F.15,F:e.F,1y:e.1y}},3G:9(){h r=c;r.$k.Q(".d d 21.3X");e(n).Q(".d d");e(t).Q("44",r.3d)},1V:9(){h e=c;7(e.$k.25().N!==0){e.$K.3r();e.$S.3r().3r();7(e.B){e.B.3k()}}e.3G();e.$k.2x("2w",e.$k.v("d-4I")||"").2x("H",e.$k.v("d-4F"))},5T:9(){h e=c;e.X();t.18(e.1X);e.1V();e.$k.5U()},5V:9(t){h n=c,r=e.4M({},n.2A,t);n.1V();n.1N(r,n.$k)},5W:9(e,t){h n=c,r;7(!e){p b}7(n.$k.25().N===0){n.$k.1o(e);n.23();p b}n.1V();7(t===W||t===-1){r=-1}l{r=t}7(r>=n.$S.N||r===-1){n.$S.1S(-1).5X(e)}l{n.$S.1S(r).5Y(e)}n.23()},5Z:9(e){h t=c,n;7(t.$k.25().N===0){p b}7(e===W||e===-1){n=-1}l{n=e}t.1V();t.$S.1S(n).3k();t.23()}};e.37.2B=9(t){p c.2f(9(){7(e(c).v("d-1N")===j){p b}e(c).v("d-1N",j);h n=3c.3q(r);n.1N(t,c);e.v(c,"2B",n)})};e.37.2B.6={q:5,1h:b,1s:[60,4],1O:[61,3],22:[62,2],1Q:b,1R:[63,1],48:b,46:b,1m:2M,1w:64,2v:65,O:b,2p:b,2a:b,2U:["1n","U"],2e:j,12:b,1v:j,39:b,2Z:j,45:2M,47:t,1M:"d-66",2i:"d-2i",1Z:b,4v:j,4x:"4y",1B:b,2O:b,33:b,3f:j,27:j,1U:j,2F:b,2o:b,3B:b,3D:b,2H:b,3s:b,1Y:b,3y:b,3w:b,2E:b,2T:b}})(67,68,69)',62,382,'||||||options|if||function||false|this|owl||||var||true|elem|else|currentItem|||return|items|||||data|on|||css|typeof|owlControls|0px|maximumItem|itemsAmount|browser|owlItems|class|addClass|positionsInArray|owlWrapper|div|itemWidth|length|autoPlay|transform|off|apply|userItems|left|next|px|undefined|stop|newRelativeX|removeClass||newPosX|scrollPerPage|prevItem|null|isTouch|ev_types|find|clearInterval|play|transition|disabled|setTimeout|target|loaded|width|goTo|itemsCustom|translate3d|page|paginationWrapper|preventDefault|slideSpeed|prev|append|wrapper|buttonNext|css2slide|itemsDesktop|swapSpeed|buttonPrev|pagination|paginationSpeed|support3d|dragDirection|ms|for|autoHeight|autoPlayInterval|visibleItems|isTransition|Math|webkit|wrapperOuter|hasClass|src|item|transition3d|baseClass|init|itemsDesktopSmall|origin|itemsTabletSmall|itemsMobile|eq|isCss3Finish|touchDrag|unWrap|moz|checkVisible|beforeMove|lazyLoad||mousedown|itemsTablet|setVars|roundPages|children|prevArr|mouseDrag|mouseup|isCssFinish|navigation|touches|pageX|active|rewindNav|each|jumpTo|position|theme|sliding|rewind|eachMoveUpdate|is|touchend|transitionStyle|stopOnHover|100|afterGo|ease|orignalItems|opacity|rewindSpeed|style|attr|html|addCssSpeed|userOptions|owlCarousel|all|push|startDragging|addClassActive|height|beforeInit|newPosY|end|move|targetElement|200|touchmove|jsonPath|offsetY|completeImg|offsetX|relativePos|afterLazyLoad|navigationText|updateItems|calculateAll|touchstart|string|responsive|updateControls|clearTransStyle|hoverStatus|jsonSuccess|moveDirection|checkPagination|endCurrent|fn|in|paginationNumbers|click|grabbing|Object|resizer|checkNavigation|dragBeforeAnimFinish|event|originalEvent|right|checkAp|remove|get|endPrev|visible|watchVisibility|Number|create|unwrap|afterInit|logIn|playDirection|max|afterAction|updateVars|afterMove|maximumPixels|apStatus|beforeUpdate|dragging|afterUpdate|pagesInArray|reload|clearEvents|removeTransition|doTranslate|show|hide|css2move|complete|span|cssText|updatePagination|gestures|disabledEvents|buildButtons|buildPagination|mousemove|touchcancel|start|disableTextSelect|min|loops|calculateWidth|pageY|appendWrapperSizes|appendItemsSizes|resize|responsiveRefreshRate|itemsScaleUp|responsiveBaseWidth|singleItem|outer|wrap|animate|srcElement|setInterval|drag|updatePosition|onVisibleItems|block|display|getNewPosition|disable|singleItemTransition|closestItem|transitionTypes|owlStatus|inArray|moveEvents|response|continue|buildControls|loading|lazyFollow|lazyPreload|lazyEffect|fade|onStartup|customEvents|wrapItems|eventTypes|naturalWidth|checkBrowser|originalClasses|outClass|inClass|originalStyles|abs|perspective|loadContent|extend|_data|round|msMaxTouchPoints|5e3|text|stopImmediatePropagation|stopPropagation|buttons|events|pop|splice|baseElWidth|minSwipe|maxSwipe|dargging|clientX|clientY|duration|destroyControls|createElement|mouseover|mouseout|numbers|which|lazyOwl|appendTo|clearTimeout|checked|shift|sort|removeAttr|match|fadeIn|400|clickable|toggleClass|wrapAll|top|prop|tagName|DIV|background|image|url|wrapperWidth|img|500|dragstart|ontouchstart|controls|out|input|relative|textarea|select|webkitAnimationEnd|oAnimationEnd|MSAnimationEnd|animationend|getJSON|returnValue|hasOwnProperty|option|onstartup|baseElement|navigator|new|prototype|destroy|removeData|reinit|addItem|after|before|removeItem|1199|979|768|479|800|1e3|carousel|jQuery|window|document'.split('|'),0,{}));


/** @license
*
* SoundManager 2: JavaScript Sound for the Web
* ----------------------------------------------
* http://schillmania.com/projects/soundmanager2/
*
* Copyright (c) 2007, Scott Schiller. All rights reserved.
* Code provided under the BSD License:
* http://schillmania.com/projects/soundmanager2/license.txt
*
* V2.97a.20140901
*/

/*global window, SM2_DEFER, sm2Debugger, console, document, navigator, setTimeout, setInterval, clearInterval, Audio, opera, module, define */
/*jslint regexp: true, sloppy: true, white: true, nomen: true, plusplus: true, todo: true */

/**
* About this file
* -------------------------------------------------------------------------------------
* This is the fully-commented source version of the SoundManager 2 API,
* recommended for use during development and testing.
*
* See soundmanager2-nodebug-jsmin.js for an optimized build (~11KB with gzip.)
* http://schillmania.com/projects/soundmanager2/doc/getstarted/#basic-inclusion
* Alternately, serve this file with gzip for 75% compression savings (~30KB over HTTP.)
*
* You may notice <d> and </d> comments in this source; these are delimiters for
* debug blocks which are removed in the -nodebug builds, further optimizing code size.
*
* Also, as you may note: Whoa, reliable cross-platform/device audio support is hard! ;)
*/

(function(window, _undefined) {

  "use strict";

  if (!window || !window.document) {

    // Don't cross the [environment] streams. SM2 expects to be running in a browser, not under node.js etc.
    // Additionally, if a browser somehow manages to fail this test, as Egon said: "It would be bad."

    throw new Error('SoundManager requires a browser with window and document objects.');

  }

  var soundManager = null;

  /**
  * The SoundManager constructor.
  *
  * @constructor
  * @param {string} smURL Optional: Path to SWF files
  * @param {string} smID Optional: The ID to use for the SWF container element
  * @this {SoundManager}
  * @return {SoundManager} The new SoundManager instance
  */

  function SoundManager(smURL, smID) {

    /**
    * soundManager configuration options list
    * defines top-level configuration properties to be applied to the soundManager instance (eg. soundManager.flashVersion)
    * to set these properties, use the setup() method - eg., soundManager.setup({url: '/swf/', flashVersion: 9})
    */

    this.setupOptions = {

      'url': (smURL || null),             // path (directory) where SoundManager 2 SWFs exist, eg., /path/to/swfs/
      'flashVersion': 8,                  // flash build to use (8 or 9.) Some API features require 9.
      'debugMode': true,                  // enable debugging output (console.log() with HTML fallback)
      'debugFlash': false,                // enable debugging output inside SWF, troubleshoot Flash/browser issues
      'useConsole': true,                 // use console.log() if available (otherwise, writes to #soundmanager-debug element)
      'consoleOnly': true,                // if console is being used, do not create/write to #soundmanager-debug
      'waitForWindowLoad': false,         // force SM2 to wait for window.onload() before trying to call soundManager.onload()
      'bgColor': '#ffffff',               // SWF background color. N/A when wmode = 'transparent'
      'useHighPerformance': false,        // position:fixed flash movie can help increase js/flash speed, minimize lag
      'flashPollingInterval': null,       // msec affecting whileplaying/loading callback frequency. If null, default of 50 msec is used.
      'html5PollingInterval': null,       // msec affecting whileplaying() for HTML5 audio, excluding mobile devices. If null, native HTML5 update events are used.
      'flashLoadTimeout': 1000,           // msec to wait for flash movie to load before failing (0 = infinity)
      'wmode': null,                      // flash rendering mode - null, 'transparent', or 'opaque' (last two allow z-index to work)
      'allowScriptAccess': 'always',      // for scripting the SWF (object/embed property), 'always' or 'sameDomain'
      'useFlashBlock': false,             // *requires flashblock.css, see demos* - allow recovery from flash blockers. Wait indefinitely and apply timeout CSS to SWF, if applicable.
      'useHTML5Audio': true,              // use HTML5 Audio() where API is supported (most Safari, Chrome versions), Firefox (no MP3/MP4.) Ideally, transparent vs. Flash API where possible.
      'html5Test': /^(probably|maybe)$/i, // HTML5 Audio() format support test. Use /^probably$/i; if you want to be more conservative.
      'preferFlash': false,               // overrides useHTML5audio, will use Flash for MP3/MP4/AAC if present. Potential option if HTML5 playback with these formats is quirky.
      'noSWFCache': false,                // if true, appends ?ts={date} to break aggressive SWF caching.
      'idPrefix': 'sound'                 // if an id is not provided to createSound(), this prefix is used for generated IDs - 'sound0', 'sound1' etc.

    };

    this.defaultOptions = {

      /**
      * the default configuration for sound objects made with createSound() and related methods
      * eg., volume, auto-load behaviour and so forth
      */

      'autoLoad': false,        // enable automatic loading (otherwise .load() will be called on demand with .play(), the latter being nicer on bandwidth - if you want to .load yourself, you also can)
      'autoPlay': false,        // enable playing of file as soon as possible (much faster if "stream" is true)
      'from': null,             // position to start playback within a sound (msec), default = beginning
      'loops': 1,               // how many times to repeat the sound (position will wrap around to 0, setPosition() will break out of loop when >0)
      'onid3': null,            // callback function for "ID3 data is added/available"
      'onload': null,           // callback function for "load finished"
      'whileloading': null,     // callback function for "download progress update" (X of Y bytes received)
      'onplay': null,           // callback for "play" start
      'onpause': null,          // callback for "pause"
      'onresume': null,         // callback for "resume" (pause toggle)
      'whileplaying': null,     // callback during play (position update)
      'onposition': null,       // object containing times and function callbacks for positions of interest
      'onstop': null,           // callback for "user stop"
      'onfailure': null,        // callback function for when playing fails
      'onfinish': null,         // callback function for "sound finished playing"
      'multiShot': true,        // let sounds "restart" or layer on top of each other when played multiple times, rather than one-shot/one at a time
      'multiShotEvents': false, // fire multiple sound events (currently onfinish() only) when multiShot is enabled
      'position': null,         // offset (milliseconds) to seek to within loaded sound data.
      'pan': 0,                 // "pan" settings, left-to-right, -100 to 100
      'stream': true,           // allows playing before entire file has loaded (recommended)
      'to': null,               // position to end playback within a sound (msec), default = end
      'type': null,             // MIME-like hint for file pattern / canPlay() tests, eg. audio/mp3
      'usePolicyFile': false,   // enable crossdomain.xml request for audio on remote domains (for ID3/waveform access)
      'volume': 100             // self-explanatory. 0-100, the latter being the max.

    };

    this.flash9Options = {

      /**
      * flash 9-only options,
      * merged into defaultOptions if flash 9 is being used
      */

      'isMovieStar': null,      // "MovieStar" MPEG4 audio mode. Null (default) = auto detect MP4, AAC etc. based on URL. true = force on, ignore URL
      'usePeakData': false,     // enable left/right channel peak (level) data
      'useWaveformData': false, // enable sound spectrum (raw waveform data) - NOTE: May increase CPU load.
      'useEQData': false,       // enable sound EQ (frequency spectrum data) - NOTE: May increase CPU load.
      'onbufferchange': null,   // callback for "isBuffering" property change
      'ondataerror': null       // callback for waveform/eq data access error (flash playing audio in other tabs/domains)

    };

    this.movieStarOptions = {

      /**
      * flash 9.0r115+ MPEG4 audio options,
      * merged into defaultOptions if flash 9+movieStar mode is enabled
      */

      'bufferTime': 3,          // seconds of data to buffer before playback begins (null = flash default of 0.1 seconds - if AAC playback is gappy, try increasing.)
      'serverURL': null,        // rtmp: FMS or FMIS server to connect to, required when requesting media via RTMP or one of its variants
      'onconnect': null,        // rtmp: callback for connection to flash media server
      'duration': null          // rtmp: song duration (msec)

    };

    this.audioFormats = {

      /**
      * determines HTML5 support + flash requirements.
      * if no support (via flash and/or HTML5) for a "required" format, SM2 will fail to start.
      * flash fallback is used for MP3 or MP4 if HTML5 can't play it (or if preferFlash = true)
      */

      'mp3': {
        'type': ['audio/mpeg; codecs="mp3"', 'audio/mpeg', 'audio/mp3', 'audio/MPA', 'audio/mpa-robust'],
        'required': true
      },

      'mp4': {
        'related': ['aac','m4a','m4b'], // additional formats under the MP4 container
        'type': ['audio/mp4; codecs="mp4a.40.2"', 'audio/aac', 'audio/x-m4a', 'audio/MP4A-LATM', 'audio/mpeg4-generic'],
        'required': false
      },

      'ogg': {
        'type': ['audio/ogg; codecs=vorbis'],
        'required': false
      },

      'opus': {
        'type': ['audio/ogg; codecs=opus', 'audio/opus'],
        'required': false
      },

      'wav': {
        'type': ['audio/wav; codecs="1"', 'audio/wav', 'audio/wave', 'audio/x-wav'],
        'required': false
      }

    };

    // HTML attributes (id + class names) for the SWF container

    this.movieID = 'sm2-container';
    this.id = (smID || 'sm2movie');

    this.debugID = 'soundmanager-debug';
    this.debugURLParam = /([#?&])debug=1/i;

    // dynamic attributes

    this.versionNumber = 'V2.97a.20140901';
    this.version = null;
    this.movieURL = null;
    this.altURL = null;
    this.swfLoaded = false;
    this.enabled = false;
    this.oMC = null;
    this.sounds = {};
    this.soundIDs = [];
    this.muted = false;
    this.didFlashBlock = false;
    this.filePattern = null;

    this.filePatterns = {

      'flash8': /\.mp3(\?.*)?$/i,
      'flash9': /\.mp3(\?.*)?$/i

    };

    // support indicators, set at init

    this.features = {

      'buffering': false,
      'peakData': false,
      'waveformData': false,
      'eqData': false,
      'movieStar': false

    };

    // flash sandbox info, used primarily in troubleshooting

    this.sandbox = {

      // <d>
      'type': null,
      'types': {
        'remote': 'remote (domain-based) rules',
        'localWithFile': 'local with file access (no internet access)',
        'localWithNetwork': 'local with network (internet access only, no local access)',
        'localTrusted': 'local, trusted (local+internet access)'
      },
      'description': null,
      'noRemote': null,
      'noLocal': null
      // </d>

    };

    /**
    * format support (html5/flash)
    * stores canPlayType() results based on audioFormats.
    * eg. { mp3: boolean, mp4: boolean }
    * treat as read-only.
    */

    this.html5 = {
      'usingFlash': null // set if/when flash fallback is needed
    };

    // file type support hash
    this.flash = {};

    // determined at init time
    this.html5Only = false;

    // used for special cases (eg. iPad/iPhone/palm OS?)
    this.ignoreFlash = false;

    /**
    * a few private internals (OK, a lot. :D)
    */

    var SMSound,
    sm2 = this, globalHTML5Audio = null, flash = null, sm = 'soundManager', smc = sm + ': ', h5 = 'HTML5::', id, ua = navigator.userAgent, wl = window.location.href.toString(), doc = document, doNothing, setProperties, init, fV, on_queue = [], debugOpen = true, debugTS, didAppend = false, appendSuccess = false, didInit = false, disabled = false, windowLoaded = false, _wDS, wdCount = 0, initComplete, mixin, assign, extraOptions, addOnEvent, processOnEvents, initUserOnload, delayWaitForEI, waitForEI, rebootIntoHTML5, setVersionInfo, handleFocus, strings, initMovie, preInit, domContentLoaded, winOnLoad, didDCLoaded, getDocument, createMovie, catchError, setPolling, initDebug, debugLevels = ['log', 'info', 'warn', 'error'], defaultFlashVersion = 8, disableObject, failSafely, normalizeMovieURL, oRemoved = null, oRemovedHTML = null, str, flashBlockHandler, getSWFCSS, swfCSS, toggleDebug, loopFix, policyFix, complain, idCheck, waitingForEI = false, initPending = false, startTimer, stopTimer, timerExecute, h5TimerCount = 0, h5IntervalTimer = null, parseURL, messages = [],
    canIgnoreFlash, needsFlash = null, featureCheck, html5OK, html5CanPlay, html5Ext, html5Unload, domContentLoadedIE, testHTML5, event, slice = Array.prototype.slice, useGlobalHTML5Audio = false, lastGlobalHTML5URL, hasFlash, detectFlash, badSafariFix, html5_events, showSupport, flushMessages, wrapCallback, idCounter = 0,
    is_iDevice = ua.match(/(ipad|iphone|ipod)/i), isAndroid = ua.match(/android/i), isIE = ua.match(/msie/i), isWebkit = ua.match(/webkit/i), isSafari = (ua.match(/safari/i) && !ua.match(/chrome/i)), isOpera = (ua.match(/opera/i)),
    mobileHTML5 = (ua.match(/(mobile|pre\/|xoom)/i) || is_iDevice || isAndroid),
    isBadSafari = (!wl.match(/usehtml5audio/i) && !wl.match(/sm2\-ignorebadua/i) && isSafari && !ua.match(/silk/i) && ua.match(/OS X 10_6_([3-7])/i)), // Safari 4 and 5 (excluding Kindle Fire, "Silk") occasionally fail to load/play HTML5 audio on Snow Leopard 10.6.3 through 10.6.7 due to bug(s) in QuickTime X and/or other underlying frameworks. :/ Confirmed bug. https://bugs.webkit.org/show_bug.cgi?id=32159
    hasConsole = (window.console !== _undefined && console.log !== _undefined), isFocused = (doc.hasFocus !== _undefined?doc.hasFocus():null), tryInitOnFocus = (isSafari && (doc.hasFocus === _undefined || !doc.hasFocus())), okToDisable = !tryInitOnFocus, flashMIME = /(mp3|mp4|mpa|m4a|m4b)/i, msecScale = 1000,
    emptyURL = 'about:blank', // safe URL to unload, or load nothing from (flash 8 + most HTML5 UAs)
    emptyWAV = 'data:audio/wave;base64,/UklGRiYAAABXQVZFZm10IBAAAAABAAEARKwAAIhYAQACABAAZGF0YQIAAAD//w==', // tiny WAV for HTML5 unloading
    overHTTP = (doc.location?doc.location.protocol.match(/http/i):null),
    http = (!overHTTP ? 'http:/'+'/' : ''),
    // mp3, mp4, aac etc.
    netStreamMimeTypes = /^\s*audio\/(?:x-)?(?:mpeg4|aac|flv|mov|mp4||m4v|m4a|m4b|mp4v|3gp|3g2)\s*(?:$|;)/i,
    // Flash v9.0r115+ "moviestar" formats
    netStreamTypes = ['mpeg4', 'aac', 'flv', 'mov', 'mp4', 'm4v', 'f4v', 'm4a', 'm4b', 'mp4v', '3gp', '3g2'],
    netStreamPattern = new RegExp('\\.(' + netStreamTypes.join('|') + ')(\\?.*)?$', 'i');

    this.mimePattern = /^\s*audio\/(?:x-)?(?:mp(?:eg|3))\s*(?:$|;)/i; // default mp3 set

    // use altURL if not "online"
    this.useAltURL = !overHTTP;

    swfCSS = {

      'swfBox': 'sm2-object-box',
      'swfDefault': 'movieContainer',
      'swfError': 'swf_error', // SWF loaded, but SM2 couldn't start (other error)
      'swfTimedout': 'swf_timedout',
      'swfLoaded': 'swf_loaded',
      'swfUnblocked': 'swf_unblocked', // or loaded OK
      'sm2Debug': 'sm2_debug',
      'highPerf': 'high_performance',
      'flashDebug': 'flash_debug'

    };

    /**
    * basic HTML5 Audio() support test
    * try...catch because of IE 9 "not implemented" nonsense
    * https://github.com/Modernizr/Modernizr/issues/224
    */

    this.hasHTML5 = (function() {
      try {
        // new Audio(null) for stupid Opera 9.64 case, which throws not_enough_arguments exception otherwise.
        return (Audio !== _undefined && (isOpera && opera !== _undefined && opera.version() < 10 ? new Audio(null) : new Audio()).canPlayType !== _undefined);
      } catch(e) {
        return false;
      }
    }());

    /**
    * Public SoundManager API
    * -----------------------
    */

    /**
    * Configures top-level soundManager properties.
    *
    * @param {object} options Option parameters, eg. { flashVersion: 9, url: '/path/to/swfs/' }
    * onready and ontimeout are also accepted parameters. call soundManager.setup() to see the full list.
    */

    this.setup = function(options) {

      var noURL = (!sm2.url);

      // warn if flash options have already been applied

      if (options !== _undefined && didInit && needsFlash && sm2.ok() && (options.flashVersion !== _undefined || options.url !== _undefined || options.html5Test !== _undefined)) {
        complain(str('setupLate'));
      }

      // TODO: defer: true?

      assign(options);

      // special case 1: "Late setup". SM2 loaded normally, but user didn't assign flash URL eg., setup({url:...}) before SM2 init. Treat as delayed init.

      if (options) {

        if (noURL && didDCLoaded && options.url !== _undefined) {
          sm2.beginDelayedInit();
        }

        // special case 2: If lazy-loading SM2 (DOMContentLoaded has already happened) and user calls setup() with url: parameter, try to init ASAP.

        if (!didDCLoaded && options.url !== _undefined && doc.readyState === 'complete') {
          setTimeout(domContentLoaded, 1);
        }

      }

      return sm2;

    };

    this.ok = function() {

      return (needsFlash ? (didInit && !disabled) : (sm2.useHTML5Audio && sm2.hasHTML5));

    };

    this.supported = this.ok; // legacy

    this.getMovie = function(smID) {

      // safety net: some old browsers differ on SWF references, possibly related to ExternalInterface / flash version
      return id(smID) || doc[smID] || window[smID];

    };

    /**
    * Creates a SMSound sound object instance.
    *
    * @param {object} oOptions Sound options (at minimum, id and url parameters are required.)
    * @return {object} SMSound The new SMSound object.
    */

    this.createSound = function(oOptions, _url) {

      var cs, cs_string, options, oSound = null;

      // <d>
      cs = sm + '.createSound(): ';
      cs_string = cs + str(!didInit?'notReady':'notOK');
      // </d>

      if (!didInit || !sm2.ok()) {
        complain(cs_string);
        return false;
      }

      if (_url !== _undefined) {
        // function overloading in JS! :) ..assume simple createSound(id, url) use case
        oOptions = {
          'id': oOptions,
          'url': _url
        };
      }

      // inherit from defaultOptions
      options = mixin(oOptions);

      options.url = parseURL(options.url);

      // generate an id, if needed.
      if (options.id === undefined) {
        options.id = sm2.setupOptions.idPrefix + (idCounter++);
      }

      // <d>
      if (options.id.toString().charAt(0).match(/^[0-9]$/)) {
        sm2._wD(cs + str('badID', options.id), 2);
      }

      sm2._wD(cs + options.id + (options.url ? ' (' + options.url + ')' : ''), 1);
      // </d>

      if (idCheck(options.id, true)) {
        sm2._wD(cs + options.id + ' exists', 1);
        return sm2.sounds[options.id];
      }

      function make() {

        options = loopFix(options);
        sm2.sounds[options.id] = new SMSound(options);
        sm2.soundIDs.push(options.id);
        return sm2.sounds[options.id];

      }

      if (html5OK(options)) {

        oSound = make();
        sm2._wD(options.id + ': Using HTML5');
        oSound._setup_html5(options);

      } else {

        if (sm2.html5Only) {
          sm2._wD(options.id + ': No HTML5 support for this sound, and no Flash. Exiting.');
          return make();
        }

        // TODO: Move HTML5/flash checks into generic URL parsing/handling function.

        if (sm2.html5.usingFlash && options.url && options.url.match(/data\:/i)) {
          // data: URIs not supported by Flash, either.
          sm2._wD(options.id + ': data: URIs not supported via Flash. Exiting.');
          return make();
        }

        if (fV > 8) {
          if (options.isMovieStar === null) {
            // attempt to detect MPEG-4 formats
            options.isMovieStar = !!(options.serverURL || (options.type ? options.type.match(netStreamMimeTypes) : false) || (options.url && options.url.match(netStreamPattern)));
          }
          // <d>
          if (options.isMovieStar) {
            sm2._wD(cs + 'using MovieStar handling');
            if (options.loops > 1) {
              _wDS('noNSLoop');
            }
          }
          // </d>
        }

        options = policyFix(options, cs);
        oSound = make();

        if (fV === 8) {
          flash._createSound(options.id, options.loops||1, options.usePolicyFile);
        } else {
          flash._createSound(options.id, options.url, options.usePeakData, options.useWaveformData, options.useEQData, options.isMovieStar, (options.isMovieStar?options.bufferTime:false), options.loops||1, options.serverURL, options.duration||null, options.autoPlay, true, options.autoLoad, options.usePolicyFile);
          if (!options.serverURL) {
            // We are connected immediately
            oSound.connected = true;
            if (options.onconnect) {
              options.onconnect.apply(oSound);
            }
          }
        }

        if (!options.serverURL && (options.autoLoad || options.autoPlay)) {
          // call load for non-rtmp streams
          oSound.load(options);
        }

      }

      // rtmp will play in onconnect
      if (!options.serverURL && options.autoPlay) {
        oSound.play();
      }

      return oSound;

    };

    /**
    * Destroys a SMSound sound object instance.
    *
    * @param {string} sID The ID of the sound to destroy
    */

    this.destroySound = function(sID, _bFromSound) {

      // explicitly destroy a sound before normal page unload, etc.

      if (!idCheck(sID)) {
        return false;
      }

      var oS = sm2.sounds[sID], i;

      // Disable all callbacks while the sound is being destroyed
      oS._iO = {};

      oS.stop();
      oS.unload();

      for (i = 0; i < sm2.soundIDs.length; i++) {
        if (sm2.soundIDs[i] === sID) {
          sm2.soundIDs.splice(i, 1);
          break;
        }
      }

      if (!_bFromSound) {
        // ignore if being called from SMSound instance
        oS.destruct(true);
      }

      oS = null;
      delete sm2.sounds[sID];

      return true;

    };

    /**
    * Calls the load() method of a SMSound object by ID.
    *
    * @param {string} sID The ID of the sound
    * @param {object} oOptions Optional: Sound options
    */

    this.load = function(sID, oOptions) {

      if (!idCheck(sID)) {
        return false;
      }
      return sm2.sounds[sID].load(oOptions);

    };

    /**
    * Calls the unload() method of a SMSound object by ID.
    *
    * @param {string} sID The ID of the sound
    */

    this.unload = function(sID) {

      if (!idCheck(sID)) {
        return false;
      }
      return sm2.sounds[sID].unload();

    };

    /**
    * Calls the onPosition() method of a SMSound object by ID.
    *
    * @param {string} sID The ID of the sound
    * @param {number} nPosition The position to watch for
    * @param {function} oMethod The relevant callback to fire
    * @param {object} oScope Optional: The scope to apply the callback to
    * @return {SMSound} The SMSound object
    */

    this.onPosition = function(sID, nPosition, oMethod, oScope) {

      if (!idCheck(sID)) {
        return false;
      }
      return sm2.sounds[sID].onposition(nPosition, oMethod, oScope);

    };

    // legacy/backwards-compability: lower-case method name
    this.onposition = this.onPosition;

    /**
    * Calls the clearOnPosition() method of a SMSound object by ID.
    *
    * @param {string} sID The ID of the sound
    * @param {number} nPosition The position to watch for
    * @param {function} oMethod Optional: The relevant callback to fire
    * @return {SMSound} The SMSound object
    */

    this.clearOnPosition = function(sID, nPosition, oMethod) {

      if (!idCheck(sID)) {
        return false;
      }
      return sm2.sounds[sID].clearOnPosition(nPosition, oMethod);

    };

    /**
    * Calls the play() method of a SMSound object by ID.
    *
    * @param {string} sID The ID of the sound
    * @param {object} oOptions Optional: Sound options
    * @return {SMSound} The SMSound object
    */

    this.play = function(sID, oOptions) {

      var result = null,
      // legacy function-overloading use case: play('mySound', '/path/to/some.mp3');
      overloaded = (oOptions && !(oOptions instanceof Object));

      if (!didInit || !sm2.ok()) {
        complain(sm + '.play(): ' + str(!didInit?'notReady':'notOK'));
        return false;
      }

      if (!idCheck(sID, overloaded)) {

        if (!overloaded) {
          // no sound found for the given ID. Bail.
          return false;
        }

        if (overloaded) {
          oOptions = {
            url: oOptions
          };
        }

        if (oOptions && oOptions.url) {
          // overloading use case, create+play: .play('someID', {url:'/path/to.mp3'});
          sm2._wD(sm + '.play(): Attempting to create "' + sID + '"', 1);
          oOptions.id = sID;
          result = sm2.createSound(oOptions).play();
        }

      } else if (overloaded) {

        // existing sound object case
        oOptions = {
          url: oOptions
        };

      }

      if (result === null) {
        // default case
        result = sm2.sounds[sID].play(oOptions);
      }

      return result;

    };

    this.start = this.play; // just for convenience

    /**
    * Calls the setPosition() method of a SMSound object by ID.
    *
    * @param {string} sID The ID of the sound
    * @param {number} nMsecOffset Position (milliseconds)
    * @return {SMSound} The SMSound object
    */

    this.setPosition = function(sID, nMsecOffset) {

      if (!idCheck(sID)) {
        return false;
      }
      return sm2.sounds[sID].setPosition(nMsecOffset);

    };

    /**
    * Calls the stop() method of a SMSound object by ID.
    *
    * @param {string} sID The ID of the sound
    * @return {SMSound} The SMSound object
    */

    this.stop = function(sID) {

      if (!idCheck(sID)) {
        return false;
      }

      sm2._wD(sm + '.stop(' + sID + ')', 1);
      return sm2.sounds[sID].stop();

    };

    /**
    * Stops all currently-playing sounds.
    */

    this.stopAll = function() {

      var oSound;
      sm2._wD(sm + '.stopAll()', 1);

      for (oSound in sm2.sounds) {
        if (sm2.sounds.hasOwnProperty(oSound)) {
          // apply only to sound objects
          sm2.sounds[oSound].stop();
        }
      }

    };

    /**
    * Calls the pause() method of a SMSound object by ID.
    *
    * @param {string} sID The ID of the sound
    * @return {SMSound} The SMSound object
    */

    this.pause = function(sID) {

      if (!idCheck(sID)) {
        return false;
      }
      return sm2.sounds[sID].pause();

    };

    /**
    * Pauses all currently-playing sounds.
    */

    this.pauseAll = function() {

      var i;
      for (i = sm2.soundIDs.length-1; i >= 0; i--) {
        sm2.sounds[sm2.soundIDs[i]].pause();
      }

    };

    /**
    * Calls the resume() method of a SMSound object by ID.
    *
    * @param {string} sID The ID of the sound
    * @return {SMSound} The SMSound object
    */

    this.resume = function(sID) {

      if (!idCheck(sID)) {
        return false;
      }
      return sm2.sounds[sID].resume();

    };

    /**
    * Resumes all currently-paused sounds.
    */

    this.resumeAll = function() {

      var i;
      for (i = sm2.soundIDs.length-1; i >= 0; i--) {
        sm2.sounds[sm2.soundIDs[i]].resume();
      }

    };

    /**
    * Calls the togglePause() method of a SMSound object by ID.
    *
    * @param {string} sID The ID of the sound
    * @return {SMSound} The SMSound object
    */

    this.togglePause = function(sID) {

      if (!idCheck(sID)) {
        return false;
      }
      return sm2.sounds[sID].togglePause();

    };

    /**
    * Calls the setPan() method of a SMSound object by ID.
    *
    * @param {string} sID The ID of the sound
    * @param {number} nPan The pan value (-100 to 100)
    * @return {SMSound} The SMSound object
    */

    this.setPan = function(sID, nPan) {

      if (!idCheck(sID)) {
        return false;
      }
      return sm2.sounds[sID].setPan(nPan);

    };

    /**
    * Calls the setVolume() method of a SMSound object by ID.
    *
    * @param {string} sID The ID of the sound
    * @param {number} nVol The volume value (0 to 100)
    * @return {SMSound} The SMSound object
    */

    this.setVolume = function(sID, nVol) {

      if (!idCheck(sID)) {
        return false;
      }
      return sm2.sounds[sID].setVolume(nVol);

    };

    /**
    * Calls the mute() method of either a single SMSound object by ID, or all sound objects.
    *
    * @param {string} sID Optional: The ID of the sound (if omitted, all sounds will be used.)
    */

    this.mute = function(sID) {

      var i = 0;

      if (sID instanceof String) {
        sID = null;
      }

      if (!sID) {

        sm2._wD(sm + '.mute(): Muting all sounds');
        for (i = sm2.soundIDs.length-1; i >= 0; i--) {
          sm2.sounds[sm2.soundIDs[i]].mute();
        }
        sm2.muted = true;

      } else {

        if (!idCheck(sID)) {
          return false;
        }
        sm2._wD(sm + '.mute(): Muting "' + sID + '"');
        return sm2.sounds[sID].mute();

      }

      return true;

    };

    /**
    * Mutes all sounds.
    */

    this.muteAll = function() {

      sm2.mute();

    };

    /**
    * Calls the unmute() method of either a single SMSound object by ID, or all sound objects.
    *
    * @param {string} sID Optional: The ID of the sound (if omitted, all sounds will be used.)
    */

    this.unmute = function(sID) {

      var i;

      if (sID instanceof String) {
        sID = null;
      }

      if (!sID) {

        sm2._wD(sm + '.unmute(): Unmuting all sounds');
        for (i = sm2.soundIDs.length-1; i >= 0; i--) {
          sm2.sounds[sm2.soundIDs[i]].unmute();
        }
        sm2.muted = false;

      } else {

        if (!idCheck(sID)) {
          return false;
        }
        sm2._wD(sm + '.unmute(): Unmuting "' + sID + '"');
        return sm2.sounds[sID].unmute();

      }

      return true;

    };

    /**
    * Unmutes all sounds.
    */

    this.unmuteAll = function() {

      sm2.unmute();

    };

    /**
    * Calls the toggleMute() method of a SMSound object by ID.
    *
    * @param {string} sID The ID of the sound
    * @return {SMSound} The SMSound object
    */

    this.toggleMute = function(sID) {

      if (!idCheck(sID)) {
        return false;
      }
      return sm2.sounds[sID].toggleMute();

    };

    /**
    * Retrieves the memory used by the flash plugin.
    *
    * @return {number} The amount of memory in use
    */

    this.getMemoryUse = function() {

      // flash-only
      var ram = 0;

      if (flash && fV !== 8) {
        ram = parseInt(flash._getMemoryUse(), 10);
      }

      return ram;

    };

    /**
    * Undocumented: NOPs soundManager and all SMSound objects.
    */

    this.disable = function(bNoDisable) {

      // destroy all functions
      var i;

      if (bNoDisable === _undefined) {
        bNoDisable = false;
      }

      if (disabled) {
        return false;
      }

      disabled = true;
      _wDS('shutdown', 1);

      for (i = sm2.soundIDs.length-1; i >= 0; i--) {
        disableObject(sm2.sounds[sm2.soundIDs[i]]);
      }

      // fire "complete", despite fail
      initComplete(bNoDisable);
      event.remove(window, 'load', initUserOnload);

      return true;

    };

    /**
    * Determines playability of a MIME type, eg. 'audio/mp3'.
    */

    this.canPlayMIME = function(sMIME) {

      var result;

      if (sm2.hasHTML5) {
        result = html5CanPlay({type:sMIME});
      }

      if (!result && needsFlash) {
        // if flash 9, test netStream (movieStar) types as well.
        result = (sMIME && sm2.ok() ? !!((fV > 8 ? sMIME.match(netStreamMimeTypes) : null) || sMIME.match(sm2.mimePattern)) : null); // TODO: make less "weird" (per JSLint)
      }

      return result;

    };

    /**
    * Determines playability of a URL based on audio support.
    *
    * @param {string} sURL The URL to test
    * @return {boolean} URL playability
    */

    this.canPlayURL = function(sURL) {

      var result;

      if (sm2.hasHTML5) {
        result = html5CanPlay({url: sURL});
      }

      if (!result && needsFlash) {
        result = (sURL && sm2.ok() ? !!(sURL.match(sm2.filePattern)) : null);
      }

      return result;

    };

    /**
    * Determines playability of an HTML DOM &lt;a&gt; object (or similar object literal) based on audio support.
    *
    * @param {object} oLink an HTML DOM &lt;a&gt; object or object literal including href and/or type attributes
    * @return {boolean} URL playability
    */

    this.canPlayLink = function(oLink) {

      if (oLink.type !== _undefined && oLink.type) {
        if (sm2.canPlayMIME(oLink.type)) {
          return true;
        }
      }

      return sm2.canPlayURL(oLink.getAttribute('data-twurl'));

    };

    /**
    * Retrieves a SMSound object by ID.
    *
    * @param {string} sID The ID of the sound
    * @return {SMSound} The SMSound object
    */

    this.getSoundById = function(sID, _suppressDebug) {

      if (!sID) {
        return null;
      }

      var result = sm2.sounds[sID];

      // <d>
      if (!result && !_suppressDebug) {
        sm2._wD(sm + '.getSoundById(): Sound "' + sID + '" not found.', 2);
      }
      // </d>

      return result;

    };

    /**
    * Queues a callback for execution when SoundManager has successfully initialized.
    *
    * @param {function} oMethod The callback method to fire
    * @param {object} oScope Optional: The scope to apply to the callback
    */

    this.onready = function(oMethod, oScope) {

      var sType = 'onready',
      result = false;

      if (typeof oMethod === 'function') {

        // <d>
        if (didInit) {
          sm2._wD(str('queue', sType));
        }
        // </d>

        if (!oScope) {
          oScope = window;
        }

        addOnEvent(sType, oMethod, oScope);
        processOnEvents();

        result = true;

      } else {

        throw str('needFunction', sType);

      }

      return result;

    };

    /**
    * Queues a callback for execution when SoundManager has failed to initialize.
    *
    * @param {function} oMethod The callback method to fire
    * @param {object} oScope Optional: The scope to apply to the callback
    */

    this.ontimeout = function(oMethod, oScope) {

      var sType = 'ontimeout',
      result = false;

      if (typeof oMethod === 'function') {

        // <d>
        if (didInit) {
          sm2._wD(str('queue', sType));
        }
        // </d>

        if (!oScope) {
          oScope = window;
        }

        addOnEvent(sType, oMethod, oScope);
        processOnEvents({type:sType});

        result = true;

      } else {

        throw str('needFunction', sType);

      }

      return result;

    };

    /**
    * Writes console.log()-style debug output to a console or in-browser element.
    * Applies when debugMode = true
    *
    * @param {string} sText The console message
    * @param {object} nType Optional log level (number), or object. Number case: Log type/style where 0 = 'info', 1 = 'warn', 2 = 'error'. Object case: Object to be dumped.
    */

    this._writeDebug = function(sText, sTypeOrObject) {

      // pseudo-private console.log()-style output
      // <d>

      var sDID = 'soundmanager-debug', o, oItem;

      if (!sm2.debugMode) {
        return false;
      }

      if (hasConsole && sm2.useConsole) {
        if (sTypeOrObject && typeof sTypeOrObject === 'object') {
          // object passed; dump to console.
          console.log(sText, sTypeOrObject);
        } else if (debugLevels[sTypeOrObject] !== _undefined) {
          console[debugLevels[sTypeOrObject]](sText);
        } else {
          console.log(sText);
        }
        if (sm2.consoleOnly) {
          return true;
        }
      }

      o = id(sDID);

      if (!o) {
        return false;
      }

      oItem = doc.createElement('div');

      if (++wdCount % 2 === 0) {
        oItem.className = 'sm2-alt';
      }

      if (sTypeOrObject === _undefined) {
        sTypeOrObject = 0;
      } else {
        sTypeOrObject = parseInt(sTypeOrObject, 10);
      }

      oItem.appendChild(doc.createTextNode(sText));

      if (sTypeOrObject) {
        if (sTypeOrObject >= 2) {
          oItem.style.fontWeight = 'bold';
        }
        if (sTypeOrObject === 3) {
          oItem.style.color = '#ff3333';
        }
      }

      // top-to-bottom
      // o.appendChild(oItem);

      // bottom-to-top
      o.insertBefore(oItem, o.firstChild);

      o = null;
      // </d>

      return true;

    };

    // <d>
    // last-resort debugging option
    if (wl.indexOf('sm2-debug=alert') !== -1) {
      this._writeDebug = function(sText) {
        window.alert(sText);
      };
    }
    // </d>

    // alias
    this._wD = this._writeDebug;

    /**
    * Provides debug / state information on all SMSound objects.
    */

    this._debug = function() {

      // <d>
      var i, j;
      _wDS('currentObj', 1);

      for (i = 0, j = sm2.soundIDs.length; i < j; i++) {
        sm2.sounds[sm2.soundIDs[i]]._debug();
      }
      // </d>

    };

    /**
    * Restarts and re-initializes the SoundManager instance.
    *
    * @param {boolean} resetEvents Optional: When true, removes all registered onready and ontimeout event callbacks.
    * @param {boolean} excludeInit Options: When true, does not call beginDelayedInit() (which would restart SM2).
    * @return {object} soundManager The soundManager instance.
    */

    this.reboot = function(resetEvents, excludeInit) {

      // reset some (or all) state, and re-init unless otherwise specified.

      // <d>
      if (sm2.soundIDs.length) {
        sm2._wD('Destroying ' + sm2.soundIDs.length + ' SMSound object' + (sm2.soundIDs.length !== 1 ? 's' : '') + '...');
      }
      // </d>

      var i, j, k;

      for (i = sm2.soundIDs.length-1; i >= 0; i--) {
        sm2.sounds[sm2.soundIDs[i]].destruct();
      }

      // trash ze flash (remove from the DOM)

      if (flash) {

        try {

          if (isIE) {
            oRemovedHTML = flash.innerHTML;
          }

          oRemoved = flash.parentNode.removeChild(flash);

        } catch(e) {

          // Remove failed? May be due to flash blockers silently removing the SWF object/embed node from the DOM. Warn and continue.

          _wDS('badRemove', 2);

        }

      }

      // actually, force recreate of movie.

      oRemovedHTML = oRemoved = needsFlash = flash = null;

      sm2.enabled = didDCLoaded = didInit = waitingForEI = initPending = didAppend = appendSuccess = disabled = useGlobalHTML5Audio = sm2.swfLoaded = false;

      sm2.soundIDs = [];
      sm2.sounds = {};

      idCounter = 0;

      if (!resetEvents) {
        // reset callbacks for onready, ontimeout etc. so that they will fire again on re-init
        for (i in on_queue) {
          if (on_queue.hasOwnProperty(i)) {
            for (j = 0, k = on_queue[i].length; j < k; j++) {
              on_queue[i][j].fired = false;
            }
          }
        }
      } else {
        // remove all callbacks entirely
        on_queue = [];
      }

      // <d>
      if (!excludeInit) {
        sm2._wD(sm + ': Rebooting...');
      }
      // </d>

      // reset HTML5 and flash canPlay test results

      sm2.html5 = {
        'usingFlash': null
      };

      sm2.flash = {};

      // reset device-specific HTML/flash mode switches

      sm2.html5Only = false;
      sm2.ignoreFlash = false;

      window.setTimeout(function() {

        preInit();

        // by default, re-init

        if (!excludeInit) {
          sm2.beginDelayedInit();
        }

      }, 20);

      return sm2;

    };

    this.reset = function() {

      /**
      * Shuts down and restores the SoundManager instance to its original loaded state, without an explicit reboot. All onready/ontimeout handlers are removed.
      * After this call, SM2 may be re-initialized via soundManager.beginDelayedInit().
      * @return {object} soundManager The soundManager instance.
      */

      _wDS('reset');
      return sm2.reboot(true, true);

    };

    /**
    * Undocumented: Determines the SM2 flash movie's load progress.
    *
    * @return {number or null} Percent loaded, or if invalid/unsupported, null.
    */

    this.getMoviePercent = function() {

      /**
      * Interesting syntax notes...
      * Flash/ExternalInterface (ActiveX/NPAPI) bridge methods are not typeof "function" nor instanceof Function, but are still valid.
      * Additionally, JSLint dislikes ('PercentLoaded' in flash)-style syntax and recommends hasOwnProperty(), which does not work in this case.
      * Furthermore, using (flash && flash.PercentLoaded) causes IE to throw "object doesn't support this property or method".
      * Thus, 'in' syntax must be used.
      */

      return (flash && 'PercentLoaded' in flash ? flash.PercentLoaded() : null); // Yes, JSLint. See nearby comment in source for explanation.

    };

    /**
    * Additional helper for manually invoking SM2's init process after DOM Ready / window.onload().
    */

    this.beginDelayedInit = function() {

      windowLoaded = true;
      domContentLoaded();

      setTimeout(function() {

        if (initPending) {
          return false;
        }

        createMovie();
        initMovie();
        initPending = true;

        return true;

      }, 20);

      delayWaitForEI();

    };

    /**
    * Destroys the SoundManager instance and all SMSound instances.
    */

    this.destruct = function() {

      sm2._wD(sm + '.destruct()');
      sm2.disable(true);

    };

    /**
    * SMSound() (sound object) constructor
    * ------------------------------------
    *
    * @param {object} oOptions Sound options (id and url are required attributes)
    * @return {SMSound} The new SMSound object
    */

    SMSound = function(oOptions) {

      var s = this, resetProperties, add_html5_events, remove_html5_events, stop_html5_timer, start_html5_timer, attachOnPosition, onplay_called = false, onPositionItems = [], onPositionFired = 0, detachOnPosition, applyFromTo, lastURL = null, lastHTML5State, urlOmitted;

      lastHTML5State = {
        // tracks duration + position (time)
        duration: null,
        time: null
      };

      this.id = oOptions.id;

      // legacy
      this.sID = this.id;

      this.url = oOptions.url;
      this.options = mixin(oOptions);

      // per-play-instance-specific options
      this.instanceOptions = this.options;

      // short alias
      this._iO = this.instanceOptions;

      // assign property defaults
      this.pan = this.options.pan;
      this.volume = this.options.volume;

      // whether or not this object is using HTML5
      this.isHTML5 = false;

      // internal HTML5 Audio() object reference
      this._a = null;

      // for flash 8 special-case createSound() without url, followed by load/play with url case
      urlOmitted = (this.url ? false : true);

      /**
      * SMSound() public methods
      * ------------------------
      */

      this.id3 = {};

      /**
      * Writes SMSound object parameters to debug console
      */

      this._debug = function() {

        // <d>
        sm2._wD(s.id + ': Merged options:', s.options);
        // </d>

      };

      /**
      * Begins loading a sound per its *url*.
      *
      * @param {object} oOptions Optional: Sound options
      * @return {SMSound} The SMSound object
      */

      this.load = function(oOptions) {

        var oSound = null, instanceOptions;

        if (oOptions !== _undefined) {
          s._iO = mixin(oOptions, s.options);
        } else {
          oOptions = s.options;
          s._iO = oOptions;
          if (lastURL && lastURL !== s.url) {
            _wDS('manURL');
            s._iO.url = s.url;
            s.url = null;
          }
        }

        if (!s._iO.url) {
          s._iO.url = s.url;
        }

        s._iO.url = parseURL(s._iO.url);

        // ensure we're in sync
        s.instanceOptions = s._iO;

        // local shortcut
        instanceOptions = s._iO;

        sm2._wD(s.id + ': load (' + instanceOptions.url + ')');

        if (!instanceOptions.url && !s.url) {
          sm2._wD(s.id + ': load(): url is unassigned. Exiting.', 2);
          return s;
        }

        // <d>
        if (!s.isHTML5 && fV === 8 && !s.url && !instanceOptions.autoPlay) {
          // flash 8 load() -> play() won't work before onload has fired.
          sm2._wD(s.id + ': Flash 8 load() limitation: Wait for onload() before calling play().', 1);
        }
        // </d>

        if (instanceOptions.url === s.url && s.readyState !== 0 && s.readyState !== 2) {
          _wDS('onURL', 1);
          // if loaded and an onload() exists, fire immediately.
          if (s.readyState === 3 && instanceOptions.onload) {
            // assume success based on truthy duration.
            wrapCallback(s, function() {
              instanceOptions.onload.apply(s, [(!!s.duration)]);
            });
          }
          return s;
        }

        // reset a few state properties

        s.loaded = false;
        s.readyState = 1;
        s.playState = 0;
        s.id3 = {};

        // TODO: If switching from HTML5 -> flash (or vice versa), stop currently-playing audio.

        if (html5OK(instanceOptions)) {

          oSound = s._setup_html5(instanceOptions);

          if (!oSound._called_load) {

            s._html5_canplay = false;

            // TODO: review called_load / html5_canplay logic

            // if url provided directly to load(), assign it here.

            if (s.url !== instanceOptions.url) {

              sm2._wD(_wDS('manURL') + ': ' + instanceOptions.url);

              s._a.src = instanceOptions.url;

              // TODO: review / re-apply all relevant options (volume, loop, onposition etc.)

              // reset position for new URL
              s.setPosition(0);

            }

            // given explicit load call, try to preload.

            // early HTML5 implementation (non-standard)
            s._a.autobuffer = 'auto';

            // standard property, values: none / metadata / auto
            // reference: http://msdn.microsoft.com/en-us/library/ie/ff974759%28v=vs.85%29.aspx
            s._a.preload = 'auto';

            s._a._called_load = true;

          } else {

            sm2._wD(s.id + ': Ignoring request to load again');

          }

        } else {

          if (sm2.html5Only) {
            sm2._wD(s.id + ': No flash support. Exiting.');
            return s;
          }

          if (s._iO.url && s._iO.url.match(/data\:/i)) {
            // data: URIs not supported by Flash, either.
            sm2._wD(s.id + ': data: URIs not supported via Flash. Exiting.');
            return s;
          }

          try {
            s.isHTML5 = false;
            s._iO = policyFix(loopFix(instanceOptions));
            // if we have "position", disable auto-play as we'll be seeking to that position at onload().
            if (s._iO.autoPlay && (s._iO.position || s._iO.from)) {
              sm2._wD(s.id + ': Disabling autoPlay because of non-zero offset case');
              s._iO.autoPlay = false;
            }
            // re-assign local shortcut
            instanceOptions = s._iO;
            if (fV === 8) {
              flash._load(s.id, instanceOptions.url, instanceOptions.stream, instanceOptions.autoPlay, instanceOptions.usePolicyFile);
            } else {
              flash._load(s.id, instanceOptions.url, !!(instanceOptions.stream), !!(instanceOptions.autoPlay), instanceOptions.loops||1, !!(instanceOptions.autoLoad), instanceOptions.usePolicyFile);
            }
          } catch(e) {
            _wDS('smError', 2);
            debugTS('onload', false);
            catchError({type:'SMSOUND_LOAD_JS_EXCEPTION', fatal:true});
          }

        }

        // after all of this, ensure sound url is up to date.
        s.url = instanceOptions.url;

        return s;

      };

      /**
      * Unloads a sound, canceling any open HTTP requests.
      *
      * @return {SMSound} The SMSound object
      */

      this.unload = function() {

        // Flash 8/AS2 can't "close" a stream - fake it by loading an empty URL
        // Flash 9/AS3: Close stream, preventing further load
        // HTML5: Most UAs will use empty URL

        if (s.readyState !== 0) {

          sm2._wD(s.id + ': unload()');

          if (!s.isHTML5) {

            if (fV === 8) {
              flash._unload(s.id, emptyURL);
            } else {
              flash._unload(s.id);
            }

          } else {

            stop_html5_timer();

            if (s._a) {

              s._a.pause();

              // update empty URL, too
              lastURL = html5Unload(s._a);

            }

          }

          // reset load/status flags
          resetProperties();

        }

        return s;

      };

      /**
      * Unloads and destroys a sound.
      */

      this.destruct = function(_bFromSM) {

        sm2._wD(s.id + ': Destruct');

        if (!s.isHTML5) {

          // kill sound within Flash
          // Disable the onfailure handler
          s._iO.onfailure = null;
          flash._destroySound(s.id);

        } else {

          stop_html5_timer();

          if (s._a) {
            s._a.pause();
            html5Unload(s._a);
            if (!useGlobalHTML5Audio) {
              remove_html5_events();
            }
            // break obvious circular reference
            s._a._s = null;
            s._a = null;
          }

        }

        if (!_bFromSM) {
          // ensure deletion from controller
          sm2.destroySound(s.id, true);
        }

      };

      /**
      * Begins playing a sound.
      *
      * @param {object} oOptions Optional: Sound options
      * @return {SMSound} The SMSound object
      */

      this.play = function(oOptions, _updatePlayState) {

        var fN, allowMulti, a, onready,
        audioClone, onended, oncanplay,
        startOK = true,
        exit = null;

        // <d>
        fN = s.id + ': play(): ';
        // </d>

        // default to true
        _updatePlayState = (_updatePlayState === _undefined ? true : _updatePlayState);

        if (!oOptions) {
          oOptions = {};
        }

        // first, use local URL (if specified)
        if (s.url) {
          s._iO.url = s.url;
        }

        // mix in any options defined at createSound()
        s._iO = mixin(s._iO, s.options);

        // mix in any options specific to this method
        s._iO = mixin(oOptions, s._iO);

        s._iO.url = parseURL(s._iO.url);

        s.instanceOptions = s._iO;

        // RTMP-only
        if (!s.isHTML5 && s._iO.serverURL && !s.connected) {
          if (!s.getAutoPlay()) {
            sm2._wD(fN +' Netstream not connected yet - setting autoPlay');
            s.setAutoPlay(true);
          }
          // play will be called in onconnect()
          return s;
        }

        if (html5OK(s._iO)) {
          s._setup_html5(s._iO);
          start_html5_timer();
        }

        if (s.playState === 1 && !s.paused) {
          allowMulti = s._iO.multiShot;
          if (!allowMulti) {
            sm2._wD(fN + 'Already playing (one-shot)', 1);
            if (s.isHTML5) {
              // go back to original position.
              s.setPosition(s._iO.position);
            }
            exit = s;
          } else {
            sm2._wD(fN + 'Already playing (multi-shot)', 1);
          }
        }

        if (exit !== null) {
          return exit;
        }

        // edge case: play() with explicit URL parameter
        if (oOptions.url && oOptions.url !== s.url) {

          // special case for createSound() followed by load() / play() with url; avoid double-load case.
          if (!s.readyState && !s.isHTML5 && fV === 8 && urlOmitted) {

            urlOmitted = false;

          } else {

            // load using merged options
            s.load(s._iO);

          }

        }

        if (!s.loaded) {

          if (s.readyState === 0) {

            sm2._wD(fN + 'Attempting to load');

            // try to get this sound playing ASAP
            if (!s.isHTML5 && !sm2.html5Only) {

              // flash: assign directly because setAutoPlay() increments the instanceCount
              s._iO.autoPlay = true;
              s.load(s._iO);

            } else if (s.isHTML5) {

              // iOS needs this when recycling sounds, loading a new URL on an existing object.
              s.load(s._iO);

            } else {

              sm2._wD(fN + 'Unsupported type. Exiting.');
              exit = s;

            }

            // HTML5 hack - re-set instanceOptions?
            s.instanceOptions = s._iO;

          } else if (s.readyState === 2) {

            sm2._wD(fN + 'Could not load - exiting', 2);
            exit = s;

          } else {

            sm2._wD(fN + 'Loading - attempting to play...');

          }

        } else {

          // "play()"
          sm2._wD(fN.substr(0, fN.lastIndexOf(':')));

        }

        if (exit !== null) {
          return exit;
        }

        if (!s.isHTML5 && fV === 9 && s.position > 0 && s.position === s.duration) {
          // flash 9 needs a position reset if play() is called while at the end of a sound.
          sm2._wD(fN + 'Sound at end, resetting to position:0');
          oOptions.position = 0;
        }

        /**
        * Streams will pause when their buffer is full if they are being loaded.
        * In this case paused is true, but the song hasn't started playing yet.
        * If we just call resume() the onplay() callback will never be called.
        * So only call resume() if the position is > 0.
        * Another reason is because options like volume won't have been applied yet.
        * For normal sounds, just resume.
        */

        if (s.paused && s.position >= 0 && (!s._iO.serverURL || s.position > 0)) {

          // https://gist.github.com/37b17df75cc4d7a90bf6
          sm2._wD(fN + 'Resuming from paused state', 1);
          s.resume();

        } else {

          s._iO = mixin(oOptions, s._iO);

          /**
          * Preload in the event of play() with position under Flash,
          * or from/to parameters and non-RTMP case
          */
          if (((!s.isHTML5 && s._iO.position !== null && s._iO.position > 0) || (s._iO.from !== null && s._iO.from > 0) || s._iO.to !== null) && s.instanceCount === 0 && s.playState === 0 && !s._iO.serverURL) {

            onready = function() {
              // sound "canplay" or onload()
              // re-apply position/from/to to instance options, and start playback
              s._iO = mixin(oOptions, s._iO);
              s.play(s._iO);
            };

            // HTML5 needs to at least have "canplay" fired before seeking.
            if (s.isHTML5 && !s._html5_canplay) {

              // this hasn't been loaded yet. load it first, and then do this again.
              sm2._wD(fN + 'Beginning load for non-zero offset case');

              s.load({
                // note: custom HTML5-only event added for from/to implementation.
                _oncanplay: onready
              });

              exit = false;

            } else if (!s.isHTML5 && !s.loaded && (!s.readyState || s.readyState !== 2)) {

              // to be safe, preload the whole thing in Flash.

              sm2._wD(fN + 'Preloading for non-zero offset case');

              s.load({
                onload: onready
              });

              exit = false;

            }

            if (exit !== null) {
              return exit;
            }

            // otherwise, we're ready to go. re-apply local options, and continue

            s._iO = applyFromTo();

          }

          // sm2._wD(fN + 'Starting to play');

          // increment instance counter, where enabled + supported
          if (!s.instanceCount || s._iO.multiShotEvents || (s.isHTML5 && s._iO.multiShot && !useGlobalHTML5Audio) || (!s.isHTML5 && fV > 8 && !s.getAutoPlay())) {
            s.instanceCount++;
          }

          // if first play and onposition parameters exist, apply them now
          if (s._iO.onposition && s.playState === 0) {
            attachOnPosition(s);
          }

          s.playState = 1;
          s.paused = false;

          s.position = (s._iO.position !== _undefined && !isNaN(s._iO.position) ? s._iO.position : 0);

          if (!s.isHTML5) {
            s._iO = policyFix(loopFix(s._iO));
          }

          if (s._iO.onplay && _updatePlayState) {
            s._iO.onplay.apply(s);
            onplay_called = true;
          }

          s.setVolume(s._iO.volume, true);
          s.setPan(s._iO.pan, true);

          if (!s.isHTML5) {

            startOK = flash._start(s.id, s._iO.loops || 1, (fV === 9 ? s.position : s.position / msecScale), s._iO.multiShot || false);

            if (fV === 9 && !startOK) {
              // edge case: no sound hardware, or 32-channel flash ceiling hit.
              // applies only to Flash 9, non-NetStream/MovieStar sounds.
              // http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/flash/media/Sound.html#play%28%29
              sm2._wD(fN + 'No sound hardware, or 32-sound ceiling hit', 2);
              if (s._iO.onplayerror) {
                s._iO.onplayerror.apply(s);
              }

            }

          } else {

            if (s.instanceCount < 2) {

              // HTML5 single-instance case

              start_html5_timer();

              a = s._setup_html5();

              s.setPosition(s._iO.position);

              a.play();

            } else {

              // HTML5 multi-shot case

              sm2._wD(s.id + ': Cloning Audio() for instance #' + s.instanceCount + '...');

              audioClone = new Audio(s._iO.url);

              onended = function() {
                event.remove(audioClone, 'ended', onended);
                s._onfinish(s);
                // cleanup
                html5Unload(audioClone);
                audioClone = null;
              };

              oncanplay = function() {
                event.remove(audioClone, 'canplay', oncanplay);
                try {
                  audioClone.currentTime = s._iO.position/msecScale;
                } catch(err) {
                  complain(s.id + ': multiShot play() failed to apply position of ' + (s._iO.position/msecScale));
                }
                audioClone.play();
              };

              event.add(audioClone, 'ended', onended);

              // apply volume to clones, too
              if (s._iO.volume !== undefined) {
                audioClone.volume = Math.max(0, Math.min(1, s._iO.volume/100));
              }

              // playing multiple muted sounds? if you do this, you're weird ;) - but let's cover it.
              if (s.muted) {
                audioClone.muted = true;
              }

              if (s._iO.position) {
                // HTML5 audio can't seek before onplay() event has fired.
                // wait for canplay, then seek to position and start playback.
                event.add(audioClone, 'canplay', oncanplay);
              } else {
                // begin playback at currentTime: 0
                audioClone.play();
              }

            }

          }

        }

        return s;

      };

      // just for convenience
      this.start = this.play;

      /**
      * Stops playing a sound (and optionally, all sounds)
      *
      * @param {boolean} bAll Optional: Whether to stop all sounds
      * @return {SMSound} The SMSound object
      */

      this.stop = function(bAll) {

        var instanceOptions = s._iO,
        originalPosition;

        if (s.playState === 1) {

          sm2._wD(s.id + ': stop()');

          s._onbufferchange(0);
          s._resetOnPosition(0);
          s.paused = false;

          if (!s.isHTML5) {
            s.playState = 0;
          }

          // remove onPosition listeners, if any
          detachOnPosition();

          // and "to" position, if set
          if (instanceOptions.to) {
            s.clearOnPosition(instanceOptions.to);
          }

          if (!s.isHTML5) {

            flash._stop(s.id, bAll);

            // hack for netStream: just unload
            if (instanceOptions.serverURL) {
              s.unload();
            }

          } else {

            if (s._a) {

              originalPosition = s.position;

              // act like Flash, though
              s.setPosition(0);

              // hack: reflect old position for onstop() (also like Flash)
              s.position = originalPosition;

              // html5 has no stop()
              // NOTE: pausing means iOS requires interaction to resume.
              s._a.pause();

              s.playState = 0;

              // and update UI
              s._onTimer();

              stop_html5_timer();

            }

          }

          s.instanceCount = 0;
          s._iO = {};

          if (instanceOptions.onstop) {
            instanceOptions.onstop.apply(s);
          }

        }

        return s;

      };

      /**
      * Undocumented/internal: Sets autoPlay for RTMP.
      *
      * @param {boolean} autoPlay state
      */

      this.setAutoPlay = function(autoPlay) {

        sm2._wD(s.id + ': Autoplay turned ' + (autoPlay ? 'on' : 'off'));
        s._iO.autoPlay = autoPlay;

        if (!s.isHTML5) {
          flash._setAutoPlay(s.id, autoPlay);
          if (autoPlay) {
            // only increment the instanceCount if the sound isn't loaded (TODO: verify RTMP)
            if (!s.instanceCount && s.readyState === 1) {
              s.instanceCount++;
              sm2._wD(s.id + ': Incremented instance count to '+s.instanceCount);
            }
          }
        }

      };

      /**
      * Undocumented/internal: Returns the autoPlay boolean.
      *
      * @return {boolean} The current autoPlay value
      */

      this.getAutoPlay = function() {

        return s._iO.autoPlay;

      };

      /**
      * Sets the position of a sound.
      *
      * @param {number} nMsecOffset Position (milliseconds)
      * @return {SMSound} The SMSound object
      */

      this.setPosition = function(nMsecOffset) {

        if (nMsecOffset === _undefined) {
          nMsecOffset = 0;
        }

        var position, position1K,
        // Use the duration from the instance options, if we don't have a track duration yet.
        // position >= 0 and <= current available (loaded) duration
        offset = (s.isHTML5 ? Math.max(nMsecOffset, 0) : Math.min(s.duration || s._iO.duration, Math.max(nMsecOffset, 0)));

        s.position = offset;
        position1K = s.position/msecScale;
        s._resetOnPosition(s.position);
        s._iO.position = offset;

        if (!s.isHTML5) {

          position = (fV === 9 ? s.position : position1K);

          if (s.readyState && s.readyState !== 2) {
            // if paused or not playing, will not resume (by playing)
            flash._setPosition(s.id, position, (s.paused || !s.playState), s._iO.multiShot);
          }

        } else if (s._a) {

          // Set the position in the canplay handler if the sound is not ready yet
          if (s._html5_canplay) {

            if (s._a.currentTime !== position1K) {

              /**
              * DOM/JS errors/exceptions to watch out for:
              * if seek is beyond (loaded?) position, "DOM exception 11"
              * "INDEX_SIZE_ERR": DOM exception 1
              */
              sm2._wD(s.id + ': setPosition('+position1K+')');

              try {
                s._a.currentTime = position1K;
                if (s.playState === 0 || s.paused) {
                  // allow seek without auto-play/resume
                  s._a.pause();
                }
              } catch(e) {
                sm2._wD(s.id + ': setPosition(' + position1K + ') failed: ' + e.message, 2);
              }

            }

          } else if (position1K) {

            // warn on non-zero seek attempts
            sm2._wD(s.id + ': setPosition(' + position1K + '): Cannot seek yet, sound not ready', 2);
            return s;

          }

          if (s.paused) {

            // if paused, refresh UI right away
            // force update
            s._onTimer(true);

          }

        }

        return s;

      };

      /**
      * Pauses sound playback.
      *
      * @return {SMSound} The SMSound object
      */

      this.pause = function(_bCallFlash) {

        if (s.paused || (s.playState === 0 && s.readyState !== 1)) {
          return s;
        }

        sm2._wD(s.id + ': pause()');
        s.paused = true;

        if (!s.isHTML5) {
          if (_bCallFlash || _bCallFlash === _undefined) {
            flash._pause(s.id, s._iO.multiShot);
          }
        } else {
          s._setup_html5().pause();
          stop_html5_timer();
        }

        if (s._iO.onpause) {
          s._iO.onpause.apply(s);
        }

        return s;

      };

      /**
      * Resumes sound playback.
      *
      * @return {SMSound} The SMSound object
      */

      /**
      * When auto-loaded streams pause on buffer full they have a playState of 0.
      * We need to make sure that the playState is set to 1 when these streams "resume".
      * When a paused stream is resumed, we need to trigger the onplay() callback if it
      * hasn't been called already. In this case since the sound is being played for the
      * first time, I think it's more appropriate to call onplay() rather than onresume().
      */

      this.resume = function() {

        var instanceOptions = s._iO;

        if (!s.paused) {
          return s;
        }

        sm2._wD(s.id + ': resume()');
        s.paused = false;
        s.playState = 1;

        if (!s.isHTML5) {
          if (instanceOptions.isMovieStar && !instanceOptions.serverURL) {
            // Bizarre Webkit bug (Chrome reported via 8tracks.com dudes): AAC content paused for 30+ seconds(?) will not resume without a reposition.
            s.setPosition(s.position);
          }
          // flash method is toggle-based (pause/resume)
          flash._pause(s.id, instanceOptions.multiShot);
        } else {
          s._setup_html5().play();
          start_html5_timer();
        }

        if (!onplay_called && instanceOptions.onplay) {
          instanceOptions.onplay.apply(s);
          onplay_called = true;
        } else if (instanceOptions.onresume) {
          instanceOptions.onresume.apply(s);
        }

        return s;

      };

      /**
      * Toggles sound playback.
      *
      * @return {SMSound} The SMSound object
      */

      this.togglePause = function() {

        sm2._wD(s.id + ': togglePause()');

        if (s.playState === 0) {
          s.play({
            position: (fV === 9 && !s.isHTML5 ? s.position : s.position / msecScale)
          });
          return s;
        }

        if (s.paused) {
          s.resume();
        } else {
          s.pause();
        }

        return s;

      };

      /**
      * Sets the panning (L-R) effect.
      *
      * @param {number} nPan The pan value (-100 to 100)
      * @return {SMSound} The SMSound object
      */

      this.setPan = function(nPan, bInstanceOnly) {

        if (nPan === _undefined) {
          nPan = 0;
        }

        if (bInstanceOnly === _undefined) {
          bInstanceOnly = false;
        }

        if (!s.isHTML5) {
          flash._setPan(s.id, nPan);
        } // else { no HTML5 pan? }

        s._iO.pan = nPan;

        if (!bInstanceOnly) {
          s.pan = nPan;
          s.options.pan = nPan;
        }

        return s;

      };

      /**
      * Sets the volume.
      *
      * @param {number} nVol The volume value (0 to 100)
      * @return {SMSound} The SMSound object
      */

      this.setVolume = function(nVol, _bInstanceOnly) {

        /**
        * Note: Setting volume has no effect on iOS "special snowflake" devices.
        * Hardware volume control overrides software, and volume
        * will always return 1 per Apple docs. (iOS 4 + 5.)
        * http://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/HTML-canvas-guide/AddingSoundtoCanvasAnimations/AddingSoundtoCanvasAnimations.html
        */

        if (nVol === _undefined) {
          nVol = 100;
        }

        if (_bInstanceOnly === _undefined) {
          _bInstanceOnly = false;
        }

        if (!s.isHTML5) {
          flash._setVolume(s.id, (sm2.muted && !s.muted) || s.muted?0:nVol);
        } else if (s._a) {
          if (sm2.muted && !s.muted) {
            s.muted = true;
            s._a.muted = true;
          }
          // valid range: 0-1
          s._a.volume = Math.max(0, Math.min(1, nVol/100));
        }

        s._iO.volume = nVol;

        if (!_bInstanceOnly) {
          s.volume = nVol;
          s.options.volume = nVol;
        }

        return s;

      };

      /**
      * Mutes the sound.
      *
      * @return {SMSound} The SMSound object
      */

      this.mute = function() {

        s.muted = true;

        if (!s.isHTML5) {
          flash._setVolume(s.id, 0);
        } else if (s._a) {
          s._a.muted = true;
        }

        return s;

      };

      /**
      * Unmutes the sound.
      *
      * @return {SMSound} The SMSound object
      */

      this.unmute = function() {

        s.muted = false;
        var hasIO = (s._iO.volume !== _undefined);

        if (!s.isHTML5) {
          flash._setVolume(s.id, hasIO?s._iO.volume:s.options.volume);
        } else if (s._a) {
          s._a.muted = false;
        }

        return s;

      };

      /**
      * Toggles the muted state of a sound.
      *
      * @return {SMSound} The SMSound object
      */

      this.toggleMute = function() {

        return (s.muted?s.unmute():s.mute());

      };

      /**
      * Registers a callback to be fired when a sound reaches a given position during playback.
      *
      * @param {number} nPosition The position to watch for
      * @param {function} oMethod The relevant callback to fire
      * @param {object} oScope Optional: The scope to apply the callback to
      * @return {SMSound} The SMSound object
      */

      this.onPosition = function(nPosition, oMethod, oScope) {

        // TODO: basic dupe checking?

        onPositionItems.push({
          position: parseInt(nPosition, 10),
          method: oMethod,
          scope: (oScope !== _undefined ? oScope : s),
          fired: false
        });

        return s;

      };

      // legacy/backwards-compability: lower-case method name
      this.onposition = this.onPosition;

      /**
      * Removes registered callback(s) from a sound, by position and/or callback.
      *
      * @param {number} nPosition The position to clear callback(s) for
      * @param {function} oMethod Optional: Identify one callback to be removed when multiple listeners exist for one position
      * @return {SMSound} The SMSound object
      */

      this.clearOnPosition = function(nPosition, oMethod) {

        var i;

        nPosition = parseInt(nPosition, 10);

        if (isNaN(nPosition)) {
          // safety check
          return false;
        }

        for (i=0; i < onPositionItems.length; i++) {

          if (nPosition === onPositionItems[i].position) {
            // remove this item if no method was specified, or, if the method matches
            if (!oMethod || (oMethod === onPositionItems[i].method)) {
              if (onPositionItems[i].fired) {
                // decrement "fired" counter, too
                onPositionFired--;
              }
              onPositionItems.splice(i, 1);
            }
          }

        }

      };

      this._processOnPosition = function() {

        var i, item, j = onPositionItems.length;

        if (!j || !s.playState || onPositionFired >= j) {
          return false;
        }

        for (i=j-1; i >= 0; i--) {
          item = onPositionItems[i];
          if (!item.fired && s.position >= item.position) {
            item.fired = true;
            onPositionFired++;
            item.method.apply(item.scope, [item.position]);
            j = onPositionItems.length; //  reset j -- onPositionItems.length can be changed in the item callback above... occasionally breaking the loop.
          }
        }

        return true;

      };

      this._resetOnPosition = function(nPosition) {

        // reset "fired" for items interested in this position
        var i, item, j = onPositionItems.length;

        if (!j) {
          return false;
        }

        for (i=j-1; i >= 0; i--) {
          item = onPositionItems[i];
          if (item.fired && nPosition <= item.position) {
            item.fired = false;
            onPositionFired--;
          }
        }

        return true;

      };

      /**
      * SMSound() private internals
      * --------------------------------
      */

      applyFromTo = function() {

        var instanceOptions = s._iO,
        f = instanceOptions.from,
        t = instanceOptions.to,
        start, end;

        end = function() {

          // end has been reached.
          sm2._wD(s.id + ': "To" time of ' + t + ' reached.');

          // detach listener
          s.clearOnPosition(t, end);

          // stop should clear this, too
          s.stop();

        };

        start = function() {

          sm2._wD(s.id + ': Playing "from" ' + f);

          // add listener for end
          if (t !== null && !isNaN(t)) {
            s.onPosition(t, end);
          }

        };

        if (f !== null && !isNaN(f)) {

          // apply to instance options, guaranteeing correct start position.
          instanceOptions.position = f;

          // multiShot timing can't be tracked, so prevent that.
          instanceOptions.multiShot = false;

          start();

        }

        // return updated instanceOptions including starting position
        return instanceOptions;

      };

      attachOnPosition = function() {

        var item,
        op = s._iO.onposition;

        // attach onposition things, if any, now.

        if (op) {

          for (item in op) {
            if (op.hasOwnProperty(item)) {
              s.onPosition(parseInt(item, 10), op[item]);
            }
          }

        }

      };

      detachOnPosition = function() {

        var item,
        op = s._iO.onposition;

        // detach any onposition()-style listeners.

        if (op) {

          for (item in op) {
            if (op.hasOwnProperty(item)) {
              s.clearOnPosition(parseInt(item, 10));
            }
          }

        }

      };

      start_html5_timer = function() {

        if (s.isHTML5) {
          startTimer(s);
        }

      };

      stop_html5_timer = function() {

        if (s.isHTML5) {
          stopTimer(s);
        }

      };

      resetProperties = function(retainPosition) {

        if (!retainPosition) {
          onPositionItems = [];
          onPositionFired = 0;
        }

        onplay_called = false;

        s._hasTimer = null;
        s._a = null;
        s._html5_canplay = false;
        s.bytesLoaded = null;
        s.bytesTotal = null;
        s.duration = (s._iO && s._iO.duration ? s._iO.duration : null);
        s.durationEstimate = null;
        s.buffered = [];

        // legacy: 1D array
        s.eqData = [];

        s.eqData.left = [];
        s.eqData.right = [];

        s.failures = 0;
        s.isBuffering = false;
        s.instanceOptions = {};
        s.instanceCount = 0;
        s.loaded = false;
        s.metadata = {};

        // 0 = uninitialised, 1 = loading, 2 = failed/error, 3 = loaded/success
        s.readyState = 0;

        s.muted = false;
        s.paused = false;

        s.peakData = {
          left: 0,
          right: 0
        };

        s.waveformData = {
          left: [],
          right: []
        };

        s.playState = 0;
        s.position = null;

        s.id3 = {};

      };

      resetProperties();

      /**
      * Pseudo-private SMSound internals
      * --------------------------------
      */

      this._onTimer = function(bForce) {

        /**
        * HTML5-only _whileplaying() etc.
        * called from both HTML5 native events, and polling/interval-based timers
        * mimics flash and fires only when time/duration change, so as to be polling-friendly
        */

        var duration, isNew = false, time, x = {};

        if (s._hasTimer || bForce) {

          // TODO: May not need to track readyState (1 = loading)

          if (s._a && (bForce || ((s.playState > 0 || s.readyState === 1) && !s.paused))) {

            duration = s._get_html5_duration();

            if (duration !== lastHTML5State.duration) {

              lastHTML5State.duration = duration;
              s.duration = duration;
              isNew = true;

            }

            // TODO: investigate why this goes wack if not set/re-set each time.
            s.durationEstimate = s.duration;

            time = (s._a.currentTime * msecScale || 0);

            if (time !== lastHTML5State.time) {

              lastHTML5State.time = time;
              isNew = true;

            }

            if (isNew || bForce) {

              s._whileplaying(time,x,x,x,x);

            }

          }/* else {

            // sm2._wD('_onTimer: Warn for "'+s.id+'": '+(!s._a?'Could not find element. ':'')+(s.playState === 0?'playState bad, 0?':'playState = '+s.playState+', OK'));

            return false;

          }*/

          return isNew;

        }

      };

      this._get_html5_duration = function() {

        var instanceOptions = s._iO,
        // if audio object exists, use its duration - else, instance option duration (if provided - it's a hack, really, and should be retired) OR null
        d = (s._a && s._a.duration ? s._a.duration*msecScale : (instanceOptions && instanceOptions.duration ? instanceOptions.duration : null)),
        result = (d && !isNaN(d) && d !== Infinity ? d : null);

        return result;

      };

      this._apply_loop = function(a, nLoops) {

        /**
        * boolean instead of "loop", for webkit? - spec says string. http://www.w3.org/TR/html-markup/audio.html#audio.attrs.loop
        * note that loop is either off or infinite under HTML5, unlike Flash which allows arbitrary loop counts to be specified.
        */

        // <d>
        if (!a.loop && nLoops > 1) {
          sm2._wD('Note: Native HTML5 looping is infinite.', 1);
        }
        // </d>

        a.loop = (nLoops > 1 ? 'loop' : '');

      };

      this._setup_html5 = function(oOptions) {

        var instanceOptions = mixin(s._iO, oOptions),
        a = useGlobalHTML5Audio ? globalHTML5Audio : s._a,
        dURL = decodeURI(instanceOptions.url),
        sameURL;

        /**
        * "First things first, I, Poppa..." (reset the previous state of the old sound, if playing)
        * Fixes case with devices that can only play one sound at a time
        * Otherwise, other sounds in mid-play will be terminated without warning and in a stuck state
        */

        if (useGlobalHTML5Audio) {

          if (dURL === decodeURI(lastGlobalHTML5URL)) {
            // global HTML5 audio: re-use of URL
            sameURL = true;
          }

        } else if (dURL === decodeURI(lastURL)) {

          // options URL is the same as the "last" URL, and we used (loaded) it
          sameURL = true;

        }

        if (a) {

          if (a._s) {

            if (useGlobalHTML5Audio) {

              if (a._s && a._s.playState && !sameURL) {

                // global HTML5 audio case, and loading a new URL. stop the currently-playing one.
                a._s.stop();

              }

            } else if (!useGlobalHTML5Audio && dURL === decodeURI(lastURL)) {

              // non-global HTML5 reuse case: same url, ignore request
              s._apply_loop(a, instanceOptions.loops);

              return a;

            }

          }

          if (!sameURL) {

            // don't retain onPosition() stuff with new URLs.

            if (lastURL) {
              resetProperties(false);
            }

            // assign new HTML5 URL

            a.src = instanceOptions.url;

            s.url = instanceOptions.url;

            lastURL = instanceOptions.url;

            lastGlobalHTML5URL = instanceOptions.url;

            a._called_load = false;

          }

        } else {

          if (instanceOptions.autoLoad || instanceOptions.autoPlay) {

            s._a = new Audio(instanceOptions.url);
            s._a.load();

          } else {

            // null for stupid Opera 9.64 case
            s._a = (isOpera && opera.version() < 10 ? new Audio(null) : new Audio());

          }

          // assign local reference
          a = s._a;

          a._called_load = false;

          if (useGlobalHTML5Audio) {

            globalHTML5Audio = a;

          }

        }

        s.isHTML5 = true;

        // store a ref on the track
        s._a = a;

        // store a ref on the audio
        a._s = s;

        add_html5_events();

        s._apply_loop(a, instanceOptions.loops);

        if (instanceOptions.autoLoad || instanceOptions.autoPlay) {

          s.load();

        } else {

          // early HTML5 implementation (non-standard)
          a.autobuffer = false;

          // standard ('none' is also an option.)
          a.preload = 'auto';

        }

        return a;

      };

      add_html5_events = function() {

        if (s._a._added_events) {
          return false;
        }

        var f;

        function add(oEvt, oFn, bCapture) {
          return s._a ? s._a.addEventListener(oEvt, oFn, bCapture||false) : null;
        }

        s._a._added_events = true;

        for (f in html5_events) {
          if (html5_events.hasOwnProperty(f)) {
            add(f, html5_events[f]);
          }
        }

        return true;

      };

      remove_html5_events = function() {

        // Remove event listeners

        var f;

        function remove(oEvt, oFn, bCapture) {
          return (s._a ? s._a.removeEventListener(oEvt, oFn, bCapture||false) : null);
        }

        sm2._wD(s.id + ': Removing event listeners');
        s._a._added_events = false;

        for (f in html5_events) {
          if (html5_events.hasOwnProperty(f)) {
            remove(f, html5_events[f]);
          }
        }

      };

      /**
      * Pseudo-private event internals
      * ------------------------------
      */

      this._onload = function(nSuccess) {

        var fN,
        // check for duration to prevent false positives from flash 8 when loading from cache.
        loadOK = !!nSuccess || (!s.isHTML5 && fV === 8 && s.duration);

        // <d>
        fN = s.id + ': ';
        sm2._wD(fN + (loadOK ? 'onload()' : 'Failed to load / invalid sound?' + (!s.duration ? ' Zero-length duration reported.' : ' -') + ' (' + s.url + ')'), (loadOK ? 1 : 2));
        if (!loadOK && !s.isHTML5) {
          if (sm2.sandbox.noRemote === true) {
            sm2._wD(fN + str('noNet'), 1);
          }
          if (sm2.sandbox.noLocal === true) {
            sm2._wD(fN + str('noLocal'), 1);
          }
        }
        // </d>

        s.loaded = loadOK;
        s.readyState = loadOK?3:2;
        s._onbufferchange(0);

        if (s._iO.onload) {
          wrapCallback(s, function() {
            s._iO.onload.apply(s, [loadOK]);
          });
        }

        return true;

      };

      this._onbufferchange = function(nIsBuffering) {

        if (s.playState === 0) {
          // ignore if not playing
          return false;
        }

        if ((nIsBuffering && s.isBuffering) || (!nIsBuffering && !s.isBuffering)) {
          return false;
        }

        s.isBuffering = (nIsBuffering === 1);
        if (s._iO.onbufferchange) {
          sm2._wD(s.id + ': Buffer state change: ' + nIsBuffering);
          s._iO.onbufferchange.apply(s, [nIsBuffering]);
        }

        return true;

      };

      /**
      * Playback may have stopped due to buffering, or related reason.
      * This state can be encountered on iOS < 6 when auto-play is blocked.
      */

      this._onsuspend = function() {

        if (s._iO.onsuspend) {
          sm2._wD(s.id + ': Playback suspended');
          s._iO.onsuspend.apply(s);
        }

        return true;

      };

      /**
      * flash 9/movieStar + RTMP-only method, should fire only once at most
      * at this point we just recreate failed sounds rather than trying to reconnect
      */

      this._onfailure = function(msg, level, code) {

        s.failures++;
        sm2._wD(s.id + ': Failure (' + s.failures + '): ' + msg);

        if (s._iO.onfailure && s.failures === 1) {
          s._iO.onfailure(msg, level, code);
        } else {
          sm2._wD(s.id + ': Ignoring failure');
        }

      };

      /**
      * flash 9/movieStar + RTMP-only method for unhandled warnings/exceptions from Flash
      * e.g., RTMP "method missing" warning (non-fatal) for getStreamLength on server
      */

      this._onwarning = function(msg, level, code) {

        if (s._iO.onwarning) {
          s._iO.onwarning(msg, level, code);
        }

      };

      this._onfinish = function() {

        // store local copy before it gets trashed...
        var io_onfinish = s._iO.onfinish;

        s._onbufferchange(0);
        s._resetOnPosition(0);

        // reset some state items
        if (s.instanceCount) {

          s.instanceCount--;

          if (!s.instanceCount) {

            // remove onPosition listeners, if any
            detachOnPosition();

            // reset instance options
            s.playState = 0;
            s.paused = false;
            s.instanceCount = 0;
            s.instanceOptions = {};
            s._iO = {};
            stop_html5_timer();

            // reset position, too
            if (s.isHTML5) {
              s.position = 0;
            }

          }

          if (!s.instanceCount || s._iO.multiShotEvents) {
            // fire onfinish for last, or every instance
            if (io_onfinish) {
              sm2._wD(s.id + ': onfinish()');
              wrapCallback(s, function() {
                io_onfinish.apply(s);
              });
            }
          }

        }

      };

      this._whileloading = function(nBytesLoaded, nBytesTotal, nDuration, nBufferLength) {

        var instanceOptions = s._iO;

        s.bytesLoaded = nBytesLoaded;
        s.bytesTotal = nBytesTotal;
        s.duration = Math.floor(nDuration);
        s.bufferLength = nBufferLength;

        if (!s.isHTML5 && !instanceOptions.isMovieStar) {

          if (instanceOptions.duration) {
            // use duration from options, if specified and larger. nobody should be specifying duration in options, actually, and it should be retired.
            s.durationEstimate = (s.duration > instanceOptions.duration) ? s.duration : instanceOptions.duration;
          } else {
            s.durationEstimate = parseInt((s.bytesTotal / s.bytesLoaded) * s.duration, 10);
          }

        } else {

          s.durationEstimate = s.duration;

        }

        // for flash, reflect sequential-load-style buffering
        if (!s.isHTML5) {
          s.buffered = [{
            'start': 0,
            'end': s.duration
          }];
        }

        // allow whileloading to fire even if "load" fired under HTML5, due to HTTP range/partials
        if ((s.readyState !== 3 || s.isHTML5) && instanceOptions.whileloading) {
          instanceOptions.whileloading.apply(s);
        }

      };

      this._whileplaying = function(nPosition, oPeakData, oWaveformDataLeft, oWaveformDataRight, oEQData) {

        var instanceOptions = s._iO,
        eqLeft;

        if (isNaN(nPosition) || nPosition === null) {
          // flash safety net
          return false;
        }

        // Safari HTML5 play() may return small -ve values when starting from position: 0, eg. -50.120396875. Unexpected/invalid per W3, I think. Normalize to 0.
        s.position = Math.max(0, nPosition);

        s._processOnPosition();

        if (!s.isHTML5 && fV > 8) {

          if (instanceOptions.usePeakData && oPeakData !== _undefined && oPeakData) {
            s.peakData = {
              left: oPeakData.leftPeak,
              right: oPeakData.rightPeak
            };
          }

          if (instanceOptions.useWaveformData && oWaveformDataLeft !== _undefined && oWaveformDataLeft) {
            s.waveformData = {
              left: oWaveformDataLeft.split(','),
              right: oWaveformDataRight.split(',')
            };
          }

          if (instanceOptions.useEQData) {
            if (oEQData !== _undefined && oEQData && oEQData.leftEQ) {
              eqLeft = oEQData.leftEQ.split(',');
              s.eqData = eqLeft;
              s.eqData.left = eqLeft;
              if (oEQData.rightEQ !== _undefined && oEQData.rightEQ) {
                s.eqData.right = oEQData.rightEQ.split(',');
              }
            }
          }

        }

        if (s.playState === 1) {

          // special case/hack: ensure buffering is false if loading from cache (and not yet started)
          if (!s.isHTML5 && fV === 8 && !s.position && s.isBuffering) {
            s._onbufferchange(0);
          }

          if (instanceOptions.whileplaying) {
            // flash may call after actual finish
            instanceOptions.whileplaying.apply(s);
          }

        }

        return true;

      };

      this._oncaptiondata = function(oData) {

        /**
        * internal: flash 9 + NetStream (MovieStar/RTMP-only) feature
        *
        * @param {object} oData
        */

        sm2._wD(s.id + ': Caption data received.');

        s.captiondata = oData;

        if (s._iO.oncaptiondata) {
          s._iO.oncaptiondata.apply(s, [oData]);
        }

      };

      this._onmetadata = function(oMDProps, oMDData) {

        /**
        * internal: flash 9 + NetStream (MovieStar/RTMP-only) feature
        * RTMP may include song title, MovieStar content may include encoding info
        *
        * @param {array} oMDProps (names)
        * @param {array} oMDData (values)
        */

        sm2._wD(s.id + ': Metadata received.');

        var oData = {}, i, j;

        for (i = 0, j = oMDProps.length; i < j; i++) {
          oData[oMDProps[i]] = oMDData[i];
        }
        s.metadata = oData;

        if (s._iO.onmetadata) {
          s._iO.onmetadata.call(s, s.metadata);
        }

      };

      this._onid3 = function(oID3Props, oID3Data) {

        /**
        * internal: flash 8 + flash 9 ID3 feature
        * may include artist, song title etc.
        *
        * @param {array} oID3Props (names)
        * @param {array} oID3Data (values)
        */

        sm2._wD(s.id + ': ID3 data received.');

        var oData = [], i, j;

        for (i = 0, j = oID3Props.length; i < j; i++) {
          oData[oID3Props[i]] = oID3Data[i];
        }
        s.id3 = mixin(s.id3, oData);

        if (s._iO.onid3) {
          s._iO.onid3.apply(s);
        }

      };

      // flash/RTMP-only

      this._onconnect = function(bSuccess) {

        bSuccess = (bSuccess === 1);
        sm2._wD(s.id + ': ' + (bSuccess ? 'Connected.' : 'Failed to connect? - ' + s.url), (bSuccess ? 1 : 2));
        s.connected = bSuccess;

        if (bSuccess) {

          s.failures = 0;

          if (idCheck(s.id)) {
            if (s.getAutoPlay()) {
              // only update the play state if auto playing
              s.play(_undefined, s.getAutoPlay());
            } else if (s._iO.autoLoad) {
              s.load();
            }
          }

          if (s._iO.onconnect) {
            s._iO.onconnect.apply(s, [bSuccess]);
          }

        }

      };

      this._ondataerror = function(sError) {

        // flash 9 wave/eq data handler
        // hack: called at start, and end from flash at/after onfinish()
        if (s.playState > 0) {
          sm2._wD(s.id + ': Data error: ' + sError);
          if (s._iO.ondataerror) {
            s._iO.ondataerror.apply(s);
          }
        }

      };

      // <d>
      this._debug();
      // </d>

    }; // SMSound()

    /**
    * Private SoundManager internals
    * ------------------------------
    */

    getDocument = function() {

      return (doc.body || doc.getElementsByTagName('div')[0]);

    };

    id = function(sID) {

      return doc.getElementById(sID);

    };

    mixin = function(oMain, oAdd) {

      // non-destructive merge
      var o1 = (oMain || {}), o2, o;

      // if unspecified, o2 is the default options object
      o2 = (oAdd === _undefined ? sm2.defaultOptions : oAdd);

      for (o in o2) {

        if (o2.hasOwnProperty(o) && o1[o] === _undefined) {

          if (typeof o2[o] !== 'object' || o2[o] === null) {

            // assign directly
            o1[o] = o2[o];

          } else {

            // recurse through o2
            o1[o] = mixin(o1[o], o2[o]);

          }

        }

      }

      return o1;

    };

    wrapCallback = function(oSound, callback) {

      /**
      * 03/03/2013: Fix for Flash Player 11.6.602.171 + Flash 8 (flashVersion = 8) SWF issue
      * setTimeout() fix for certain SMSound callbacks like onload() and onfinish(), where subsequent calls like play() and load() fail when Flash Player 11.6.602.171 is installed, and using soundManager with flashVersion = 8 (which is the default).
      * Not sure of exact cause. Suspect race condition and/or invalid (NaN-style) position argument trickling down to the next JS -> Flash _start() call, in the play() case.
      * Fix: setTimeout() to yield, plus safer null / NaN checking on position argument provided to Flash.
      * https://getsatisfaction.com/schillmania/topics/recent_chrome_update_seems_to_have_broken_my_sm2_audio_player
      */
      if (!oSound.isHTML5 && fV === 8) {
        window.setTimeout(callback, 0);
      } else {
        callback();
      }

    };

    // additional soundManager properties that soundManager.setup() will accept

    extraOptions = {
      'onready': 1,
      'ontimeout': 1,
      'defaultOptions': 1,
      'flash9Options': 1,
      'movieStarOptions': 1
    };

    assign = function(o, oParent) {

      /**
      * recursive assignment of properties, soundManager.setup() helper
      * allows property assignment based on whitelist
      */

      var i,
      result = true,
      hasParent = (oParent !== _undefined),
      setupOptions = sm2.setupOptions,
      bonusOptions = extraOptions;

      // <d>

      // if soundManager.setup() called, show accepted parameters.

      if (o === _undefined) {

        result = [];

        for (i in setupOptions) {

          if (setupOptions.hasOwnProperty(i)) {
            result.push(i);
          }

        }

        for (i in bonusOptions) {

          if (bonusOptions.hasOwnProperty(i)) {

            if (typeof sm2[i] === 'object') {

              result.push(i+': {...}');

            } else if (sm2[i] instanceof Function) {

              result.push(i+': function() {...}');

            } else {

              result.push(i);

            }

          }

        }

        sm2._wD(str('setup', result.join(', ')));

        return false;

      }

      // </d>

      for (i in o) {

        if (o.hasOwnProperty(i)) {

          // if not an {object} we want to recurse through...

          if (typeof o[i] !== 'object' || o[i] === null || o[i] instanceof Array || o[i] instanceof RegExp) {

            // check "allowed" options

            if (hasParent && bonusOptions[oParent] !== _undefined) {

              // valid recursive / nested object option, eg., { defaultOptions: { volume: 50 } }
              sm2[oParent][i] = o[i];

            } else if (setupOptions[i] !== _undefined) {

              // special case: assign to setupOptions object, which soundManager property references
              sm2.setupOptions[i] = o[i];

              // assign directly to soundManager, too
              sm2[i] = o[i];

            } else if (bonusOptions[i] === _undefined) {

              // invalid or disallowed parameter. complain.
              complain(str((sm2[i] === _undefined ? 'setupUndef' : 'setupError'), i), 2);

              result = false;

            } else {

              /**
              * valid extraOptions (bonusOptions) parameter.
              * is it a method, like onready/ontimeout? call it.
              * multiple parameters should be in an array, eg. soundManager.setup({onready: [myHandler, myScope]});
              */

              if (sm2[i] instanceof Function) {

                sm2[i].apply(sm2, (o[i] instanceof Array? o[i] : [o[i]]));

              } else {

                // good old-fashioned direct assignment
                sm2[i] = o[i];

              }

            }

          } else {

            // recursion case, eg., { defaultOptions: { ... } }

            if (bonusOptions[i] === _undefined) {

              // invalid or disallowed parameter. complain.
              complain(str((sm2[i] === _undefined ? 'setupUndef' : 'setupError'), i), 2);

              result = false;

            } else {

              // recurse through object
              return assign(o[i], i);

            }

          }

        }

      }

      return result;

    };

    function preferFlashCheck(kind) {

      // whether flash should play a given type
      return (sm2.preferFlash && hasFlash && !sm2.ignoreFlash && (sm2.flash[kind] !== _undefined && sm2.flash[kind]));

    }

    /**
    * Internal DOM2-level event helpers
    * ---------------------------------
    */

    event = (function() {

      // normalize event methods
      var old = (window.attachEvent),
      evt = {
        add: (old?'attachEvent':'addEventListener'),
        remove: (old?'detachEvent':'removeEventListener')
      };

      // normalize "on" event prefix, optional capture argument
      function getArgs(oArgs) {

        var args = slice.call(oArgs),
        len = args.length;

        if (old) {
          // prefix
          args[1] = 'on' + args[1];
          if (len > 3) {
            // no capture
            args.pop();
          }
        } else if (len === 3) {
          args.push(false);
        }

        return args;

      }

      function apply(args, sType) {

        // normalize and call the event method, with the proper arguments
        var element = args.shift(),
        method = [evt[sType]];

        if (old) {
          // old IE can't do apply().
          element[method](args[0], args[1]);
        } else {
          element[method].apply(element, args);
        }

      }

      function add() {

        apply(getArgs(arguments), 'add');

      }

      function remove() {

        apply(getArgs(arguments), 'remove');

      }

      return {
        'add': add,
        'remove': remove
      };

    }());

    /**
    * Internal HTML5 event handling
    * -----------------------------
    */

    function html5_event(oFn) {

      // wrap html5 event handlers so we don't call them on destroyed and/or unloaded sounds

      return function(e) {

        var s = this._s,
        result;

        if (!s || !s._a) {
          // <d>
          if (s && s.id) {
            sm2._wD(s.id + ': Ignoring ' + e.type);
          } else {
            sm2._wD(h5 + 'Ignoring ' + e.type);
          }
          // </d>
          result = null;
        } else {
          result = oFn.call(this, e);
        }

        return result;

      };

    }

    html5_events = {

      // HTML5 event-name-to-handler map

      abort: html5_event(function() {

        sm2._wD(this._s.id + ': abort');

      }),

      // enough has loaded to play

      canplay: html5_event(function() {

        var s = this._s,
        position1K;

        if (s._html5_canplay) {
          // this event has already fired. ignore.
          return true;
        }

        s._html5_canplay = true;
        sm2._wD(s.id + ': canplay');
        s._onbufferchange(0);

        // position according to instance options
        position1K = (s._iO.position !== _undefined && !isNaN(s._iO.position) ? s._iO.position/msecScale : null);

        // set the position if position was provided before the sound loaded
        if (this.currentTime !== position1K) {
          sm2._wD(s.id + ': canplay: Setting position to ' + position1K);
          try {
            this.currentTime = position1K;
          } catch(ee) {
            sm2._wD(s.id + ': canplay: Setting position of ' + position1K + ' failed: ' + ee.message, 2);
          }
        }

        // hack for HTML5 from/to case
        if (s._iO._oncanplay) {
          s._iO._oncanplay();
        }

      }),

      canplaythrough: html5_event(function() {

        var s = this._s;

        if (!s.loaded) {
          s._onbufferchange(0);
          s._whileloading(s.bytesLoaded, s.bytesTotal, s._get_html5_duration());
          s._onload(true);
        }

      }),

      durationchange: html5_event(function() {

        // durationchange may fire at various times, probably the safest way to capture accurate/final duration.

        var s = this._s,
        duration;

        duration = s._get_html5_duration();

        if (!isNaN(duration) && duration !== s.duration) {

          sm2._wD(this._s.id + ': durationchange (' + duration + ')' + (s.duration ? ', previously ' + s.duration : ''));

          s.durationEstimate = s.duration = duration;

        }

      }),

      // TODO: Reserved for potential use
      /*
      emptied: html5_event(function() {

      sm2._wD(this._s.id + ': emptied');

    }),
    */

    ended: html5_event(function() {

      var s = this._s;

      sm2._wD(s.id + ': ended');

      s._onfinish();

    }),

    error: html5_event(function() {

      sm2._wD(this._s.id + ': HTML5 error, code ' + this.error.code);
      /**
      * HTML5 error codes, per W3C
      * Error 1: Client aborted download at user's request.
      * Error 2: Network error after load started.
      * Error 3: Decoding issue.
      * Error 4: Media (audio file) not supported.
      * Reference: http://www.whatwg.org/specs/web-apps/current-work/multipage/the-video-element.html#error-codes
      */
      // call load with error state?
      this._s._onload(false);

    }),

    loadeddata: html5_event(function() {

      var s = this._s;

      sm2._wD(s.id + ': loadeddata');

      // safari seems to nicely report progress events, eventually totalling 100%
      if (!s._loaded && !isSafari) {
        s.duration = s._get_html5_duration();
      }

    }),

    loadedmetadata: html5_event(function() {

      sm2._wD(this._s.id + ': loadedmetadata');

    }),

    loadstart: html5_event(function() {

      sm2._wD(this._s.id + ': loadstart');
      // assume buffering at first
      this._s._onbufferchange(1);

    }),

    play: html5_event(function() {

      // sm2._wD(this._s.id + ': play()');
      // once play starts, no buffering
      this._s._onbufferchange(0);

    }),

    playing: html5_event(function() {

      sm2._wD(this._s.id + ': playing ' + String.fromCharCode(9835));
      // once play starts, no buffering
      this._s._onbufferchange(0);

    }),

    progress: html5_event(function(e) {

      // note: can fire repeatedly after "loaded" event, due to use of HTTP range/partials

      var s = this._s,
      i, j, progStr, buffered = 0,
      isProgress = (e.type === 'progress'),
      ranges = e.target.buffered,
      // firefox 3.6 implements e.loaded/total (bytes)
      loaded = (e.loaded||0),
      total = (e.total||1);

      // reset the "buffered" (loaded byte ranges) array
      s.buffered = [];

      if (ranges && ranges.length) {

        // if loaded is 0, try TimeRanges implementation as % of load
        // https://developer.mozilla.org/en/DOM/TimeRanges

        // re-build "buffered" array
        // HTML5 returns seconds. SM2 API uses msec for setPosition() etc., whether Flash or HTML5.
        for (i=0, j=ranges.length; i<j; i++) {
          s.buffered.push({
            'start': ranges.start(i) * msecScale,
            'end': ranges.end(i) * msecScale
          });
        }

        // use the last value locally
        buffered = (ranges.end(0) - ranges.start(0)) * msecScale;

        // linear case, buffer sum; does not account for seeking and HTTP partials / byte ranges
        loaded = Math.min(1, buffered/(e.target.duration*msecScale));

        // <d>
        if (isProgress && ranges.length > 1) {
          progStr = [];
          j = ranges.length;
          for (i=0; i<j; i++) {
            progStr.push(e.target.buffered.start(i)*msecScale +'-'+ e.target.buffered.end(i)*msecScale);
          }
          sm2._wD(this._s.id + ': progress, timeRanges: ' + progStr.join(', '));
        }

        if (isProgress && !isNaN(loaded)) {
          sm2._wD(this._s.id + ': progress, ' + Math.floor(loaded*100) + '% loaded');
        }
        // </d>

      }

      if (!isNaN(loaded)) {

        // TODO: prevent calls with duplicate values.
        s._whileloading(loaded, total, s._get_html5_duration());
        if (loaded && total && loaded === total) {
          // in case "onload" doesn't fire (eg. gecko 1.9.2)
          html5_events.canplaythrough.call(this, e);
        }

      }

    }),

    ratechange: html5_event(function() {

      sm2._wD(this._s.id + ': ratechange');

    }),

    suspend: html5_event(function(e) {

      // download paused/stopped, may have finished (eg. onload)
      var s = this._s;

      sm2._wD(this._s.id + ': suspend');
      html5_events.progress.call(this, e);
      s._onsuspend();

    }),

    stalled: html5_event(function() {

      sm2._wD(this._s.id + ': stalled');

    }),

    timeupdate: html5_event(function() {

      this._s._onTimer();

    }),

    waiting: html5_event(function() {

      var s = this._s;

      // see also: seeking
      sm2._wD(this._s.id + ': waiting');

      // playback faster than download rate, etc.
      s._onbufferchange(1);

    })

  };

  html5OK = function(iO) {

    // playability test based on URL or MIME type

    var result;

    if (!iO || (!iO.type && !iO.url && !iO.serverURL)) {

      // nothing to check
      result = false;

    } else if (iO.serverURL || (iO.type && preferFlashCheck(iO.type))) {

      // RTMP, or preferring flash
      result = false;

    } else {

      // Use type, if specified. Pass data: URIs to HTML5. If HTML5-only mode, no other options, so just give 'er
      result = ((iO.type ? html5CanPlay({type:iO.type}) : html5CanPlay({url:iO.url}) || sm2.html5Only || iO.url.match(/data\:/i)));

    }

    return result;

  };

  html5Unload = function(oAudio) {

    /**
    * Internal method: Unload media, and cancel any current/pending network requests.
    * Firefox can load an empty URL, which allegedly destroys the decoder and stops the download.
    * https://developer.mozilla.org/En/Using_audio_and_video_in_Firefox#Stopping_the_download_of_media
    * However, Firefox has been seen loading a relative URL from '' and thus requesting the hosting page on unload.
    * Other UA behaviour is unclear, so everyone else gets an about:blank-style URL.
    */

    var url;

    if (oAudio) {

      // Firefox and Chrome accept short WAVe data: URIs. Chome dislikes audio/wav, but accepts audio/wav for data: MIME.
      // Desktop Safari complains / fails on data: URI, so it gets about:blank.
      url = (isSafari ? emptyURL : (sm2.html5.canPlayType('audio/wav') ? emptyWAV : emptyURL));

      oAudio.src = url;

      // reset some state, too
      if (oAudio._called_unload !== undefined) {
        oAudio._called_load = false;
      }

    }

    if (useGlobalHTML5Audio) {

      // ensure URL state is trashed, also
      lastGlobalHTML5URL = null;

    }

    return url;

  };

  html5CanPlay = function(o) {

    /**
    * Try to find MIME, test and return truthiness
    * o = {
    *  url: '/path/to/an.mp3',
    *  type: 'audio/mp3'
    * }
    */

    if (!sm2.useHTML5Audio || !sm2.hasHTML5) {
      return false;
    }

    var url = (o.url || null),
    mime = (o.type || null),
    aF = sm2.audioFormats,
    result,
    offset,
    fileExt,
    item;

    // account for known cases like audio/mp3

    if (mime && sm2.html5[mime] !== _undefined) {
      return (sm2.html5[mime] && !preferFlashCheck(mime));
    }

    if (!html5Ext) {
      html5Ext = [];
      for (item in aF) {
        if (aF.hasOwnProperty(item)) {
          html5Ext.push(item);
          if (aF[item].related) {
            html5Ext = html5Ext.concat(aF[item].related);
          }
        }
      }
      html5Ext = new RegExp('\\.('+html5Ext.join('|')+')(\\?.*)?$','i');
    }

    // TODO: Strip URL queries, etc.
    fileExt = (url ? url.toLowerCase().match(html5Ext) : null);

    if (!fileExt || !fileExt.length) {
      if (!mime) {
        result = false;
      } else {
        // audio/mp3 -> mp3, result should be known
        offset = mime.indexOf(';');
        // strip "audio/X; codecs..."
        fileExt = (offset !== -1?mime.substr(0,offset):mime).substr(6);
      }
    } else {
      // match the raw extension name - "mp3", for example
      fileExt = fileExt[1];
    }

    if (fileExt && sm2.html5[fileExt] !== _undefined) {
      // result known
      result = (sm2.html5[fileExt] && !preferFlashCheck(fileExt));
    } else {
      mime = 'audio/'+fileExt;
      result = sm2.html5.canPlayType({type:mime});
      sm2.html5[fileExt] = result;
      // sm2._wD('canPlayType, found result: ' + result);
      result = (result && sm2.html5[mime] && !preferFlashCheck(mime));
    }

    return result;

  };

  testHTML5 = function() {

    /**
    * Internal: Iterates over audioFormats, determining support eg. audio/mp3, audio/mpeg and so on
    * assigns results to html5[] and flash[].
    */

    if (!sm2.useHTML5Audio || !sm2.hasHTML5) {
      // without HTML5, we need Flash.
      sm2.html5.usingFlash = true;
      needsFlash = true;
      return false;
    }

    // double-whammy: Opera 9.64 throws WRONG_ARGUMENTS_ERR if no parameter passed to Audio(), and Webkit + iOS happily tries to load "null" as a URL. :/
    var a = (Audio !== _undefined ? (isOpera && opera.version() < 10 ? new Audio(null) : new Audio()) : null),
    item, lookup, support = {}, aF, i;

    function cp(m) {

      var canPlay, j,
      result = false,
      isOK = false;

      if (!a || typeof a.canPlayType !== 'function') {
        return result;
      }

      if (m instanceof Array) {
        // iterate through all mime types, return any successes
        for (i=0, j=m.length; i<j; i++) {
          if (sm2.html5[m[i]] || a.canPlayType(m[i]).match(sm2.html5Test)) {
            isOK = true;
            sm2.html5[m[i]] = true;
            // note flash support, too
            sm2.flash[m[i]] = !!(m[i].match(flashMIME));
          }
        }
        result = isOK;
      } else {
        canPlay = (a && typeof a.canPlayType === 'function' ? a.canPlayType(m) : false);
        result = !!(canPlay && (canPlay.match(sm2.html5Test)));
      }

      return result;

    }

    // test all registered formats + codecs

    aF = sm2.audioFormats;

    for (item in aF) {

      if (aF.hasOwnProperty(item)) {

        lookup = 'audio/' + item;

        support[item] = cp(aF[item].type);

        // write back generic type too, eg. audio/mp3
        support[lookup] = support[item];

        // assign flash
        if (item.match(flashMIME)) {

          sm2.flash[item] = true;
          sm2.flash[lookup] = true;

        } else {

          sm2.flash[item] = false;
          sm2.flash[lookup] = false;

        }

        // assign result to related formats, too

        if (aF[item] && aF[item].related) {

          for (i=aF[item].related.length-1; i >= 0; i--) {

            // eg. audio/m4a
            support['audio/'+aF[item].related[i]] = support[item];
            sm2.html5[aF[item].related[i]] = support[item];
            sm2.flash[aF[item].related[i]] = support[item];

          }

        }

      }

    }

    support.canPlayType = (a?cp:null);
    sm2.html5 = mixin(sm2.html5, support);

    sm2.html5.usingFlash = featureCheck();
    needsFlash = sm2.html5.usingFlash;

    return true;

  };

  strings = {

    // <d>
    notReady: 'Unavailable - wait until onready() has fired.',
    notOK: 'Audio support is not available.',
    domError: sm + 'exception caught while appending SWF to DOM.',
    spcWmode: 'Removing wmode, preventing known SWF loading issue(s)',
    swf404: smc + 'Verify that %s is a valid path.',
    tryDebug: 'Try ' + sm + '.debugFlash = true for more security details (output goes to SWF.)',
    checkSWF: 'See SWF output for more debug info.',
    localFail: smc + 'Non-HTTP page (' + doc.location.protocol + ' URL?) Review Flash player security settings for this special case:\nhttp://www.macromedia.com/support/documentation/en/flashplayer/help/settings_manager04.html\nMay need to add/allow path, eg. c:/sm2/ or /users/me/sm2/',
    waitFocus: smc + 'Special case: Waiting for SWF to load with window focus...',
    waitForever: smc + 'Waiting indefinitely for Flash (will recover if unblocked)...',
    waitSWF: smc + 'Waiting for 100% SWF load...',
    needFunction: smc + 'Function object expected for %s',
    badID: 'Sound ID "%s" should be a string, starting with a non-numeric character',
    currentObj: smc + '_debug(): Current sound objects',
    waitOnload: smc + 'Waiting for window.onload()',
    docLoaded: smc + 'Document already loaded',
    onload: smc + 'initComplete(): calling soundManager.onload()',
    onloadOK: sm + '.onload() complete',
    didInit: smc + 'init(): Already called?',
    secNote: 'Flash security note: Network/internet URLs will not load due to security restrictions. Access can be configured via Flash Player Global Security Settings Page: http://www.macromedia.com/support/documentation/en/flashplayer/help/settings_manager04.html',
    badRemove: smc + 'Failed to remove Flash node.',
    shutdown: sm + '.disable(): Shutting down',
    queue: smc + 'Queueing %s handler',
    smError: 'SMSound.load(): Exception: JS-Flash communication failed, or JS error.',
    fbTimeout: 'No flash response, applying .'+swfCSS.swfTimedout+' CSS...',
    fbLoaded: 'Flash loaded',
    fbHandler: smc + 'flashBlockHandler()',
    manURL: 'SMSound.load(): Using manually-assigned URL',
    onURL: sm + '.load(): current URL already assigned.',
    badFV: sm + '.flashVersion must be 8 or 9. "%s" is invalid. Reverting to %s.',
    as2loop: 'Note: Setting stream:false so looping can work (flash 8 limitation)',
    noNSLoop: 'Note: Looping not implemented for MovieStar formats',
    needfl9: 'Note: Switching to flash 9, required for MP4 formats.',
    mfTimeout: 'Setting flashLoadTimeout = 0 (infinite) for off-screen, mobile flash case',
    needFlash: smc + 'Fatal error: Flash is needed to play some required formats, but is not available.',
    gotFocus: smc + 'Got window focus.',
    policy: 'Enabling usePolicyFile for data access',
    setup: sm + '.setup(): allowed parameters: %s',
    setupError: sm + '.setup(): "%s" cannot be assigned with this method.',
    setupUndef: sm + '.setup(): Could not find option "%s"',
    setupLate: sm + '.setup(): url, flashVersion and html5Test property changes will not take effect until reboot().',
    noURL: smc + 'Flash URL required. Call soundManager.setup({url:...}) to get started.',
    sm2Loaded: 'SoundManager 2: Ready. ' + String.fromCharCode(10003),
    reset: sm + '.reset(): Removing event callbacks',
    mobileUA: 'Mobile UA detected, preferring HTML5 by default.',
    globalHTML5: 'Using singleton HTML5 Audio() pattern for this device.'
    // </d>

  };

  str = function() {

    // internal string replace helper.
    // arguments: o [,items to replace]
    // <d>

    var args,
    i, j, o,
    sstr;

    // real array, please
    args = slice.call(arguments);

    // first argument
    o = args.shift();

    sstr = (strings && strings[o] ? strings[o] : '');

    if (sstr && args && args.length) {
      for (i = 0, j = args.length; i < j; i++) {
        sstr = sstr.replace('%s', args[i]);
      }
    }

    return sstr;
    // </d>

  };

  loopFix = function(sOpt) {

    // flash 8 requires stream = false for looping to work
    if (fV === 8 && sOpt.loops > 1 && sOpt.stream) {
      _wDS('as2loop');
      sOpt.stream = false;
    }

    return sOpt;

  };

  policyFix = function(sOpt, sPre) {

    if (sOpt && !sOpt.usePolicyFile && (sOpt.onid3 || sOpt.usePeakData || sOpt.useWaveformData || sOpt.useEQData)) {
      sm2._wD((sPre || '') + str('policy'));
      sOpt.usePolicyFile = true;
    }

    return sOpt;

  };

  complain = function(sMsg) {

    // <d>
    if (hasConsole && console.warn !== _undefined) {
      console.warn(sMsg);
    } else {
      sm2._wD(sMsg);
    }
    // </d>

  };

  doNothing = function() {

    return false;

  };

  disableObject = function(o) {

    var oProp;

    for (oProp in o) {
      if (o.hasOwnProperty(oProp) && typeof o[oProp] === 'function') {
        o[oProp] = doNothing;
      }
    }

    oProp = null;

  };

  failSafely = function(bNoDisable) {

    // general failure exception handler

    if (bNoDisable === _undefined) {
      bNoDisable = false;
    }

    if (disabled || bNoDisable) {
      sm2.disable(bNoDisable);
    }

  };

  normalizeMovieURL = function(smURL) {

    var urlParams = null, url;

    if (smURL) {
      if (smURL.match(/\.swf(\?.*)?$/i)) {
        urlParams = smURL.substr(smURL.toLowerCase().lastIndexOf('.swf?') + 4);
        if (urlParams) {
          // assume user knows what they're doing
          return smURL;
        }
      } else if (smURL.lastIndexOf('/') !== smURL.length - 1) {
        // append trailing slash, if needed
        smURL += '/';
      }
    }

    url = (smURL && smURL.lastIndexOf('/') !== - 1 ? smURL.substr(0, smURL.lastIndexOf('/') + 1) : './') + sm2.movieURL;

    if (sm2.noSWFCache) {
      url += ('?ts=' + new Date().getTime());
    }

    return url;

  };

  setVersionInfo = function() {

    // short-hand for internal use

    fV = parseInt(sm2.flashVersion, 10);

    if (fV !== 8 && fV !== 9) {
      sm2._wD(str('badFV', fV, defaultFlashVersion));
      sm2.flashVersion = fV = defaultFlashVersion;
    }

    // debug flash movie, if applicable

    var isDebug = (sm2.debugMode || sm2.debugFlash?'_debug.swf':'.swf');

    if (sm2.useHTML5Audio && !sm2.html5Only && sm2.audioFormats.mp4.required && fV < 9) {
      sm2._wD(str('needfl9'));
      sm2.flashVersion = fV = 9;
    }

    sm2.version = sm2.versionNumber + (sm2.html5Only?' (HTML5-only mode)':(fV === 9?' (AS3/Flash 9)':' (AS2/Flash 8)'));

    // set up default options
    if (fV > 8) {
      // +flash 9 base options
      sm2.defaultOptions = mixin(sm2.defaultOptions, sm2.flash9Options);
      sm2.features.buffering = true;
      // +moviestar support
      sm2.defaultOptions = mixin(sm2.defaultOptions, sm2.movieStarOptions);
      sm2.filePatterns.flash9 = new RegExp('\\.(mp3|' + netStreamTypes.join('|') + ')(\\?.*)?$', 'i');
      sm2.features.movieStar = true;
    } else {
      sm2.features.movieStar = false;
    }

    // regExp for flash canPlay(), etc.
    sm2.filePattern = sm2.filePatterns[(fV !== 8?'flash9':'flash8')];

    // if applicable, use _debug versions of SWFs
    sm2.movieURL = (fV === 8?'soundmanager2.swf':'soundmanager2_flash9.swf').replace('.swf', isDebug);

    sm2.features.peakData = sm2.features.waveformData = sm2.features.eqData = (fV > 8);

  };

  setPolling = function(bPolling, bHighPerformance) {

    if (!flash) {
      return false;
    }

    flash._setPolling(bPolling, bHighPerformance);

  };

  initDebug = function() {

    // starts debug mode, creating output <div> for UAs without console object

    // allow force of debug mode via URL
    // <d>
    if (sm2.debugURLParam.test(wl)) {
      sm2.debugMode = true;
    }

    if (id(sm2.debugID)) {
      return false;
    }

    var oD, oDebug, oTarget, oToggle, tmp;

    if (sm2.debugMode && !id(sm2.debugID) && (!hasConsole || !sm2.useConsole || !sm2.consoleOnly)) {

      oD = doc.createElement('div');
      oD.id = sm2.debugID + '-toggle';

      oToggle = {
        'position': 'fixed',
        'bottom': '0px',
        'right': '0px',
        'width': '1.2em',
        'height': '1.2em',
        'lineHeight': '1.2em',
        'margin': '2px',
        'textAlign': 'center',
        'border': '1px solid #999',
        'cursor': 'pointer',
        'background': '#fff',
        'color': '#333',
        'zIndex': 10001
      };

      oD.appendChild(doc.createTextNode('-'));
      oD.onclick = toggleDebug;
      oD.title = 'Toggle SM2 debug console';

      if (ua.match(/msie 6/i)) {
        oD.style.position = 'absolute';
        oD.style.cursor = 'hand';
      }

      for (tmp in oToggle) {
        if (oToggle.hasOwnProperty(tmp)) {
          oD.style[tmp] = oToggle[tmp];
        }
      }

      oDebug = doc.createElement('div');
      oDebug.id = sm2.debugID;
      oDebug.style.display = (sm2.debugMode?'block':'none');

      if (sm2.debugMode && !id(oD.id)) {
        try {
          oTarget = getDocument();
          oTarget.appendChild(oD);
        } catch(e2) {
          throw new Error(str('domError')+' \n'+e2.toString());
        }
        oTarget.appendChild(oDebug);
      }

    }

    oTarget = null;
    // </d>

  };

  idCheck = this.getSoundById;

  // <d>
  _wDS = function(o, errorLevel) {

    return (!o ? '' : sm2._wD(str(o), errorLevel));

  };

  toggleDebug = function() {

    var o = id(sm2.debugID),
    oT = id(sm2.debugID + '-toggle');

    if (!o) {
      return false;
    }

    if (debugOpen) {
      // minimize
      oT.innerHTML = '+';
      o.style.display = 'none';
    } else {
      oT.innerHTML = '-';
      o.style.display = 'block';
    }

    debugOpen = !debugOpen;

  };

  debugTS = function(sEventType, bSuccess, sMessage) {

    // troubleshooter debug hooks

    if (window.sm2Debugger !== _undefined) {
      try {
        sm2Debugger.handleEvent(sEventType, bSuccess, sMessage);
      } catch(e) {
        // oh well
        return false;
      }
    }

    return true;

  };
  // </d>

  getSWFCSS = function() {

    var css = [];

    if (sm2.debugMode) {
      css.push(swfCSS.sm2Debug);
    }

    if (sm2.debugFlash) {
      css.push(swfCSS.flashDebug);
    }

    if (sm2.useHighPerformance) {
      css.push(swfCSS.highPerf);
    }

    return css.join(' ');

  };

  flashBlockHandler = function() {

    // *possible* flash block situation.

    var name = str('fbHandler'),
    p = sm2.getMoviePercent(),
    css = swfCSS,
    error = {type:'FLASHBLOCK'};

    if (sm2.html5Only) {
      // no flash, or unused
      return false;
    }

    if (!sm2.ok()) {

      if (needsFlash) {
        // make the movie more visible, so user can fix
        sm2.oMC.className = getSWFCSS() + ' ' + css.swfDefault + ' ' + (p === null?css.swfTimedout:css.swfError);
        sm2._wD(name + ': ' + str('fbTimeout') + (p ? ' (' + str('fbLoaded') + ')' : ''));
      }

      sm2.didFlashBlock = true;

      // fire onready(), complain lightly
      processOnEvents({type:'ontimeout', ignoreInit:true, error:error});
      catchError(error);

    } else {

      // SM2 loaded OK (or recovered)

      // <d>
      if (sm2.didFlashBlock) {
        sm2._wD(name + ': Unblocked');
      }
      // </d>

      if (sm2.oMC) {
        sm2.oMC.className = [getSWFCSS(), css.swfDefault, css.swfLoaded + (sm2.didFlashBlock?' '+css.swfUnblocked:'')].join(' ');
      }

    }

  };

  addOnEvent = function(sType, oMethod, oScope) {

    if (on_queue[sType] === _undefined) {
      on_queue[sType] = [];
    }

    on_queue[sType].push({
      'method': oMethod,
      'scope': (oScope || null),
      'fired': false
    });

  };

  processOnEvents = function(oOptions) {

    // if unspecified, assume OK/error

    if (!oOptions) {
      oOptions = {
        type: (sm2.ok() ? 'onready' : 'ontimeout')
      };
    }

    if (!didInit && oOptions && !oOptions.ignoreInit) {
      // not ready yet.
      return false;
    }

    if (oOptions.type === 'ontimeout' && (sm2.ok() || (disabled && !oOptions.ignoreInit))) {
      // invalid case
      return false;
    }

    var status = {
      success: (oOptions && oOptions.ignoreInit?sm2.ok():!disabled)
    },

    // queue specified by type, or none
    srcQueue = (oOptions && oOptions.type?on_queue[oOptions.type]||[]:[]),

    queue = [], i, j,
    args = [status],
    canRetry = (needsFlash && !sm2.ok());

    if (oOptions.error) {
      args[0].error = oOptions.error;
    }

    for (i = 0, j = srcQueue.length; i < j; i++) {
      if (srcQueue[i].fired !== true) {
        queue.push(srcQueue[i]);
      }
    }

    if (queue.length) {
      // sm2._wD(sm + ': Firing ' + queue.length + ' ' + oOptions.type + '() item' + (queue.length === 1 ? '' : 's'));
      for (i = 0, j = queue.length; i < j; i++) {
        if (queue[i].scope) {
          queue[i].method.apply(queue[i].scope, args);
        } else {
          queue[i].method.apply(this, args);
        }
        if (!canRetry) {
          // useFlashBlock and SWF timeout case doesn't count here.
          queue[i].fired = true;
        }
      }
    }

    return true;

  };

  initUserOnload = function() {

    window.setTimeout(function() {

      if (sm2.useFlashBlock) {
        flashBlockHandler();
      }

      processOnEvents();

      // call user-defined "onload", scoped to window

      if (typeof sm2.onload === 'function') {
        _wDS('onload', 1);
        sm2.onload.apply(window);
        _wDS('onloadOK', 1);
      }

      if (sm2.waitForWindowLoad) {
        event.add(window, 'load', initUserOnload);
      }

    },1);

  };

  detectFlash = function() {

    // hat tip: Flash Detect library (BSD, (C) 2007) by Carl "DocYes" S. Yestrau - http://featureblend.com/javascript-flash-detection-library.html / http://featureblend.com/license.txt

    if (hasFlash !== _undefined) {
      // this work has already been done.
      return hasFlash;
    }

    var hasPlugin = false, n = navigator, nP = n.plugins, obj, type, types, AX = window.ActiveXObject;

    if (nP && nP.length) {
      type = 'application/x-shockwave-flash';
      types = n.mimeTypes;
      if (types && types[type] && types[type].enabledPlugin && types[type].enabledPlugin.description) {
        hasPlugin = true;
      }
    } else if (AX !== _undefined && !ua.match(/MSAppHost/i)) {
      // Windows 8 Store Apps (MSAppHost) are weird (compatibility?) and won't complain here, but will barf if Flash/ActiveX object is appended to the DOM.
      try {
        obj = new AX('ShockwaveFlash.ShockwaveFlash');
      } catch(e) {
        // oh well
        obj = null;
      }
      hasPlugin = (!!obj);
      // cleanup, because it is ActiveX after all
      obj = null;
    }

    hasFlash = hasPlugin;

    return hasPlugin;

  };

  featureCheck = function() {

    var flashNeeded,
    item,
    formats = sm2.audioFormats,
    // iPhone <= 3.1 has broken HTML5 audio(), but firmware 3.2 (original iPad) + iOS4 works.
    isSpecial = (is_iDevice && !!(ua.match(/os (1|2|3_0|3_1)\s/i)));

    if (isSpecial) {

      // has Audio(), but is broken; let it load links directly.
      sm2.hasHTML5 = false;

      // ignore flash case, however
      sm2.html5Only = true;

      // hide the SWF, if present
      if (sm2.oMC) {
        sm2.oMC.style.display = 'none';
      }

    } else {

      if (sm2.useHTML5Audio) {

        if (!sm2.html5 || !sm2.html5.canPlayType) {
          sm2._wD('SoundManager: No HTML5 Audio() support detected.');
          sm2.hasHTML5 = false;
        }

        // <d>
        if (isBadSafari) {
          sm2._wD(smc + 'Note: Buggy HTML5 Audio in Safari on this OS X release, see https://bugs.webkit.org/show_bug.cgi?id=32159 - ' + (!hasFlash ?' would use flash fallback for MP3/MP4, but none detected.' : 'will use flash fallback for MP3/MP4, if available'), 1);
        }
        // </d>

      }

    }

    if (sm2.useHTML5Audio && sm2.hasHTML5) {

      // sort out whether flash is optional, required or can be ignored.

      // innocent until proven guilty.
      canIgnoreFlash = true;

      for (item in formats) {
        if (formats.hasOwnProperty(item)) {
          if (formats[item].required) {
            if (!sm2.html5.canPlayType(formats[item].type)) {
              // 100% HTML5 mode is not possible.
              canIgnoreFlash = false;
              flashNeeded = true;
            } else if (sm2.preferFlash && (sm2.flash[item] || sm2.flash[formats[item].type])) {
              // flash may be required, or preferred for this format.
              flashNeeded = true;
            }
          }
        }
      }

    }

    // sanity check...
    if (sm2.ignoreFlash) {
      flashNeeded = false;
      canIgnoreFlash = true;
    }

    sm2.html5Only = (sm2.hasHTML5 && sm2.useHTML5Audio && !flashNeeded);

    return (!sm2.html5Only);

  };

  parseURL = function(url) {

    /**
    * Internal: Finds and returns the first playable URL (or failing that, the first URL.)
    * @param {string or array} url A single URL string, OR, an array of URL strings or {url:'/path/to/resource', type:'audio/mp3'} objects.
    */

    var i, j, urlResult = 0, result;

    if (url instanceof Array) {

      // find the first good one
      for (i=0, j=url.length; i<j; i++) {

        if (url[i] instanceof Object) {
          // MIME check
          if (sm2.canPlayMIME(url[i].type)) {
            urlResult = i;
            break;
          }

        } else if (sm2.canPlayURL(url[i])) {
          // URL string check
          urlResult = i;
          break;
        }

      }

      // normalize to string
      if (url[urlResult].url) {
        url[urlResult] = url[urlResult].url;
      }

      result = url[urlResult];

    } else {

      // single URL case
      result = url;

    }

    return result;

  };


  startTimer = function(oSound) {

    /**
    * attach a timer to this sound, and start an interval if needed
    */

    if (!oSound._hasTimer) {

      oSound._hasTimer = true;

      if (!mobileHTML5 && sm2.html5PollingInterval) {

        if (h5IntervalTimer === null && h5TimerCount === 0) {

          h5IntervalTimer = setInterval(timerExecute, sm2.html5PollingInterval);

        }

        h5TimerCount++;

      }

    }

  };

  stopTimer = function(oSound) {

    /**
    * detach a timer
    */

    if (oSound._hasTimer) {

      oSound._hasTimer = false;

      if (!mobileHTML5 && sm2.html5PollingInterval) {

        // interval will stop itself at next execution.

        h5TimerCount--;

      }

    }

  };

  timerExecute = function() {

    /**
    * manual polling for HTML5 progress events, ie., whileplaying() (can achieve greater precision than conservative default HTML5 interval)
    */

    var i;

    if (h5IntervalTimer !== null && !h5TimerCount) {

      // no active timers, stop polling interval.

      clearInterval(h5IntervalTimer);

      h5IntervalTimer = null;

      return false;

    }

    // check all HTML5 sounds with timers

    for (i = sm2.soundIDs.length-1; i >= 0; i--) {

      if (sm2.sounds[sm2.soundIDs[i]].isHTML5 && sm2.sounds[sm2.soundIDs[i]]._hasTimer) {

        sm2.sounds[sm2.soundIDs[i]]._onTimer();

      }

    }

  };

  catchError = function(options) {

    options = (options !== _undefined ? options : {});

    if (typeof sm2.onerror === 'function') {
      sm2.onerror.apply(window, [{type:(options.type !== _undefined ? options.type : null)}]);
    }

    if (options.fatal !== _undefined && options.fatal) {
      sm2.disable();
    }

  };

  badSafariFix = function() {

    // special case: "bad" Safari (OS X 10.3 - 10.7) must fall back to flash for MP3/MP4
    if (!isBadSafari || !detectFlash()) {
      // doesn't apply
      return false;
    }

    var aF = sm2.audioFormats, i, item;

    for (item in aF) {
      if (aF.hasOwnProperty(item)) {
        if (item === 'mp3' || item === 'mp4') {
          sm2._wD(sm + ': Using flash fallback for ' + item + ' format');
          sm2.html5[item] = false;
          // assign result to related formats, too
          if (aF[item] && aF[item].related) {
            for (i = aF[item].related.length-1; i >= 0; i--) {
              sm2.html5[aF[item].related[i]] = false;
            }
          }
        }
      }
    }

  };

  /**
  * Pseudo-private flash/ExternalInterface methods
  * ----------------------------------------------
  */

  this._setSandboxType = function(sandboxType) {

    // <d>
    var sb = sm2.sandbox;

    sb.type = sandboxType;
    sb.description = sb.types[(sb.types[sandboxType] !== _undefined?sandboxType:'unknown')];

    if (sb.type === 'localWithFile') {

      sb.noRemote = true;
      sb.noLocal = false;
      _wDS('secNote', 2);

    } else if (sb.type === 'localWithNetwork') {

      sb.noRemote = false;
      sb.noLocal = true;

    } else if (sb.type === 'localTrusted') {

      sb.noRemote = false;
      sb.noLocal = false;

    }
    // </d>

  };

  this._externalInterfaceOK = function(swfVersion) {

    // flash callback confirming flash loaded, EI working etc.
    // swfVersion: SWF build string

    if (sm2.swfLoaded) {
      return false;
    }

    var e;

    debugTS('swf', true);
    debugTS('flashtojs', true);
    sm2.swfLoaded = true;
    tryInitOnFocus = false;

    if (isBadSafari) {
      badSafariFix();
    }

    // complain if JS + SWF build/version strings don't match, excluding +DEV builds
    // <d>
    if (!swfVersion || swfVersion.replace(/\+dev/i,'') !== sm2.versionNumber.replace(/\+dev/i, '')) {

      e = sm + ': Fatal: JavaScript file build "' + sm2.versionNumber + '" does not match Flash SWF build "' + swfVersion + '" at ' + sm2.url + '. Ensure both are up-to-date.';

      // escape flash -> JS stack so this error fires in window.
      setTimeout(function versionMismatch() {
        throw new Error(e);
      }, 0);

      // exit, init will fail with timeout
      return false;

    }
    // </d>

    // IE needs a larger timeout
    setTimeout(init, isIE ? 100 : 1);

  };

  /**
  * Private initialization helpers
  * ------------------------------
  */

  createMovie = function(smID, smURL) {

    if (didAppend && appendSuccess) {
      // ignore if already succeeded
      return false;
    }

    function initMsg() {

      // <d>

      var options = [],
      title,
      msg = [],
      delimiter = ' + ';

      title = 'SoundManager ' + sm2.version + (!sm2.html5Only && sm2.useHTML5Audio ? (sm2.hasHTML5 ? ' + HTML5 audio' : ', no HTML5 audio support') : '');

      if (!sm2.html5Only) {

        if (sm2.preferFlash) {
          options.push('preferFlash');
        }

        if (sm2.useHighPerformance) {
          options.push('useHighPerformance');
        }

        if (sm2.flashPollingInterval) {
          options.push('flashPollingInterval (' + sm2.flashPollingInterval + 'ms)');
        }

        if (sm2.html5PollingInterval) {
          options.push('html5PollingInterval (' + sm2.html5PollingInterval + 'ms)');
        }

        if (sm2.wmode) {
          options.push('wmode (' + sm2.wmode + ')');
        }

        if (sm2.debugFlash) {
          options.push('debugFlash');
        }

        if (sm2.useFlashBlock) {
          options.push('flashBlock');
        }

      } else {

        if (sm2.html5PollingInterval) {
          options.push('html5PollingInterval (' + sm2.html5PollingInterval + 'ms)');
        }

      }

      if (options.length) {
        msg = msg.concat([options.join(delimiter)]);
      }

      sm2._wD(title + (msg.length ? delimiter + msg.join(', ') : ''), 1);

      showSupport();

      // </d>

    }

    if (sm2.html5Only) {

      // 100% HTML5 mode
      setVersionInfo();

      initMsg();
      sm2.oMC = id(sm2.movieID);
      init();

      // prevent multiple init attempts
      didAppend = true;

      appendSuccess = true;

      return false;

    }

    // flash path
    var remoteURL = (smURL || sm2.url),
    localURL = (sm2.altURL || remoteURL),
    swfTitle = 'JS/Flash audio component (SoundManager 2)',
    oTarget = getDocument(),
    extraClass = getSWFCSS(),
    isRTL = null,
    html = doc.getElementsByTagName('html')[0],
    oEmbed, oMovie, tmp, movieHTML, oEl, s, x, sClass;

    isRTL = (html && html.dir && html.dir.match(/rtl/i));
    smID = (smID === _undefined?sm2.id:smID);

    function param(name, value) {
      return '<param name="'+name+'" value="'+value+'" />';
    }

    // safety check for legacy (change to Flash 9 URL)
    setVersionInfo();
    sm2.url = normalizeMovieURL(overHTTP?remoteURL:localURL);
    smURL = sm2.url;

    sm2.wmode = (!sm2.wmode && sm2.useHighPerformance ? 'transparent' : sm2.wmode);

    if (sm2.wmode !== null && (ua.match(/msie 8/i) || (!isIE && !sm2.useHighPerformance)) && navigator.platform.match(/win32|win64/i)) {
      /**
      * extra-special case: movie doesn't load until scrolled into view when using wmode = anything but 'window' here
      * does not apply when using high performance (position:fixed means on-screen), OR infinite flash load timeout
      * wmode breaks IE 8 on Vista + Win7 too in some cases, as of January 2011 (?)
      */
      messages.push(strings.spcWmode);
      sm2.wmode = null;
    }

    oEmbed = {
      'name': smID,
      'id': smID,
      'src': smURL,
      'quality': 'high',
      'allowScriptAccess': sm2.allowScriptAccess,
      'bgcolor': sm2.bgColor,
      'pluginspage': http+'www.macromedia.com/go/getflashplayer',
      'title': swfTitle,
      'type': 'application/x-shockwave-flash',
      'wmode': sm2.wmode,
      // http://help.adobe.com/en_US/as3/mobile/WS4bebcd66a74275c36cfb8137124318eebc6-7ffd.html
      'hasPriority': 'true'
    };

    if (sm2.debugFlash) {
      oEmbed.FlashVars = 'debug=1';
    }

    if (!sm2.wmode) {
      // don't write empty attribute
      delete oEmbed.wmode;
    }

    if (isIE) {

      // IE is "special".
      oMovie = doc.createElement('div');
      movieHTML = [
      '<object id="' + smID + '" data="' + smURL + '" type="' + oEmbed.type + '" title="' + oEmbed.title +'" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="' + http+'download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0">',
      param('movie', smURL),
      param('AllowScriptAccess', sm2.allowScriptAccess),
      param('quality', oEmbed.quality),
      (sm2.wmode? param('wmode', sm2.wmode): ''),
      param('bgcolor', sm2.bgColor),
      param('hasPriority', 'true'),
      (sm2.debugFlash ? param('FlashVars', oEmbed.FlashVars) : ''),
      '</object>'
      ].join('');

    } else {

      oMovie = doc.createElement('embed');
      for (tmp in oEmbed) {
        if (oEmbed.hasOwnProperty(tmp)) {
          oMovie.setAttribute(tmp, oEmbed[tmp]);
        }
      }

    }

    initDebug();
    extraClass = getSWFCSS();
    oTarget = getDocument();

    if (oTarget) {

      sm2.oMC = (id(sm2.movieID) || doc.createElement('div'));

      if (!sm2.oMC.id) {

        sm2.oMC.id = sm2.movieID;
        sm2.oMC.className = swfCSS.swfDefault + ' ' + extraClass;
        s = null;
        oEl = null;

        if (!sm2.useFlashBlock) {
          if (sm2.useHighPerformance) {
            // on-screen at all times
            s = {
              'position': 'fixed',
              'width': '8px',
              'height': '8px',
              // >= 6px for flash to run fast, >= 8px to start up under Firefox/win32 in some cases. odd? yes.
              'bottom': '0px',
              'left': '0px',
              'overflow': 'hidden'
            };
          } else {
            // hide off-screen, lower priority
            s = {
              'position': 'absolute',
              'width': '6px',
              'height': '6px',
              'top': '-9999px',
              'left': '-9999px'
            };
            if (isRTL) {
              s.left = Math.abs(parseInt(s.left,10))+'px';
            }
          }
        }

        if (isWebkit) {
          // soundcloud-reported render/crash fix, safari 5
          sm2.oMC.style.zIndex = 10000;
        }

        if (!sm2.debugFlash) {
          for (x in s) {
            if (s.hasOwnProperty(x)) {
              sm2.oMC.style[x] = s[x];
            }
          }
        }

        try {
          if (!isIE) {
            sm2.oMC.appendChild(oMovie);
          }
          oTarget.appendChild(sm2.oMC);
          if (isIE) {
            oEl = sm2.oMC.appendChild(doc.createElement('div'));
            oEl.className = swfCSS.swfBox;
            oEl.innerHTML = movieHTML;
          }
          appendSuccess = true;
        } catch(e) {
          throw new Error(str('domError')+' \n'+e.toString());
        }

      } else {

        // SM2 container is already in the document (eg. flashblock use case)
        sClass = sm2.oMC.className;
        sm2.oMC.className = (sClass?sClass+' ':swfCSS.swfDefault) + (extraClass?' '+extraClass:'');
        sm2.oMC.appendChild(oMovie);
        if (isIE) {
          oEl = sm2.oMC.appendChild(doc.createElement('div'));
          oEl.className = swfCSS.swfBox;
          oEl.innerHTML = movieHTML;
        }
        appendSuccess = true;

      }

    }

    didAppend = true;
    initMsg();
    // sm2._wD(sm + ': Trying to load ' + smURL + (!overHTTP && sm2.altURL ? ' (alternate URL)' : ''), 1);

    return true;

  };

  initMovie = function() {

    if (sm2.html5Only) {
      createMovie();
      return false;
    }

    // attempt to get, or create, movie (may already exist)
    if (flash) {
      return false;
    }

    if (!sm2.url) {

      /**
      * Something isn't right - we've reached init, but the soundManager url property has not been set.
      * User has not called setup({url: ...}), or has not set soundManager.url (legacy use case) directly before init time.
      * Notify and exit. If user calls setup() with a url: property, init will be restarted as in the deferred loading case.
      */

      _wDS('noURL');
      return false;

    }

    // inline markup case
    flash = sm2.getMovie(sm2.id);

    if (!flash) {
      if (!oRemoved) {
        // try to create
        createMovie(sm2.id, sm2.url);
      } else {
        // try to re-append removed movie after reboot()
        if (!isIE) {
          sm2.oMC.appendChild(oRemoved);
        } else {
          sm2.oMC.innerHTML = oRemovedHTML;
        }
        oRemoved = null;
        didAppend = true;
      }
      flash = sm2.getMovie(sm2.id);
    }

    if (typeof sm2.oninitmovie === 'function') {
      setTimeout(sm2.oninitmovie, 1);
    }

    // <d>
    flushMessages();
    // </d>

    return true;

  };

  delayWaitForEI = function() {

    setTimeout(waitForEI, 1000);

  };

  rebootIntoHTML5 = function() {

    // special case: try for a reboot with preferFlash: false, if 100% HTML5 mode is possible and useFlashBlock is not enabled.

    window.setTimeout(function() {

      complain(smc + 'useFlashBlock is false, 100% HTML5 mode is possible. Rebooting with preferFlash: false...');

      sm2.setup({
        preferFlash: false
      }).reboot();

      // if for some reason you want to detect this case, use an ontimeout() callback and look for html5Only and didFlashBlock == true.
      sm2.didFlashBlock = true;

      sm2.beginDelayedInit();

    }, 1);

  };

  waitForEI = function() {

    var p,
    loadIncomplete = false;

    if (!sm2.url) {
      // No SWF url to load (noURL case) - exit for now. Will be retried when url is set.
      return false;
    }

    if (waitingForEI) {
      return false;
    }

    waitingForEI = true;
    event.remove(window, 'load', delayWaitForEI);

    if (hasFlash && tryInitOnFocus && !isFocused) {
      // Safari won't load flash in background tabs, only when focused.
      _wDS('waitFocus');
      return false;
    }

    if (!didInit) {
      p = sm2.getMoviePercent();
      if (p > 0 && p < 100) {
        loadIncomplete = true;
      }
    }

    setTimeout(function() {

      p = sm2.getMoviePercent();

      if (loadIncomplete) {
        // special case: if movie *partially* loaded, retry until it's 100% before assuming failure.
        waitingForEI = false;
        sm2._wD(str('waitSWF'));
        window.setTimeout(delayWaitForEI, 1);
        return false;
      }

      // <d>
      if (!didInit) {

        sm2._wD(sm + ': No Flash response within expected time. Likely causes: ' + (p === 0 ? 'SWF load failed, ':'') + 'Flash blocked or JS-Flash security error.' + (sm2.debugFlash?' ' + str('checkSWF'):''), 2);

        if (!overHTTP && p) {

          _wDS('localFail', 2);

          if (!sm2.debugFlash) {
            _wDS('tryDebug', 2);
          }

        }

        if (p === 0) {

          // if 0 (not null), probably a 404.
          sm2._wD(str('swf404', sm2.url), 1);

        }

        debugTS('flashtojs', false, ': Timed out' + overHTTP?' (Check flash security or flash blockers)':' (No plugin/missing SWF?)');

      }
      // </d>

      // give up / time-out, depending

      if (!didInit && okToDisable) {

        if (p === null) {

          // SWF failed to report load progress. Possibly blocked.

          if (sm2.useFlashBlock || sm2.flashLoadTimeout === 0) {

            if (sm2.useFlashBlock) {

              flashBlockHandler();

            }

            _wDS('waitForever');

          } else {

            // no custom flash block handling, but SWF has timed out. Will recover if user unblocks / allows SWF load.

            if (!sm2.useFlashBlock && canIgnoreFlash) {

              rebootIntoHTML5();

            } else {

              _wDS('waitForever');

              // fire any regular registered ontimeout() listeners.
              processOnEvents({type:'ontimeout', ignoreInit: true, error: {type: 'INIT_FLASHBLOCK'}});

            }

          }

        } else {

          // SWF loaded? Shouldn't be a blocking issue, then.

          if (sm2.flashLoadTimeout === 0) {

            _wDS('waitForever');

          } else {

            if (!sm2.useFlashBlock && canIgnoreFlash) {

              rebootIntoHTML5();

            } else {

              failSafely(true);

            }

          }

        }

      }

    }, sm2.flashLoadTimeout);

  };

  handleFocus = function() {

    function cleanup() {
      event.remove(window, 'focus', handleFocus);
    }

    if (isFocused || !tryInitOnFocus) {
      // already focused, or not special Safari background tab case
      cleanup();
      return true;
    }

    okToDisable = true;
    isFocused = true;
    _wDS('gotFocus');

    // allow init to restart
    waitingForEI = false;

    // kick off ExternalInterface timeout, now that the SWF has started
    delayWaitForEI();

    cleanup();
    return true;

  };

  flushMessages = function() {

    // <d>

    // SM2 pre-init debug messages
    if (messages.length) {
      sm2._wD('SoundManager 2: ' + messages.join(' '), 1);
      messages = [];
    }

    // </d>

  };

  showSupport = function() {

    // <d>

    flushMessages();

    var item, tests = [];

    if (sm2.useHTML5Audio && sm2.hasHTML5) {
      for (item in sm2.audioFormats) {
        if (sm2.audioFormats.hasOwnProperty(item)) {
          tests.push(item + ' = ' + sm2.html5[item] + (!sm2.html5[item] && needsFlash && sm2.flash[item] ? ' (using flash)' : (sm2.preferFlash && sm2.flash[item] && needsFlash ? ' (preferring flash)': (!sm2.html5[item] ? ' (' + (sm2.audioFormats[item].required ? 'required, ':'') + 'and no flash support)' : ''))));
        }
      }
      sm2._wD('SoundManager 2 HTML5 support: ' + tests.join(', '), 1);
    }

    // </d>

  };

  initComplete = function(bNoDisable) {

    if (didInit) {
      return false;
    }

    if (sm2.html5Only) {
      // all good.
      _wDS('sm2Loaded', 1);
      didInit = true;
      initUserOnload();
      debugTS('onload', true);
      return true;
    }

    var wasTimeout = (sm2.useFlashBlock && sm2.flashLoadTimeout && !sm2.getMoviePercent()),
    result = true,
    error;

    if (!wasTimeout) {
      didInit = true;
    }

    error = {type: (!hasFlash && needsFlash ? 'NO_FLASH' : 'INIT_TIMEOUT')};

    sm2._wD('SoundManager 2 ' + (disabled ? 'failed to load' : 'loaded') + ' (' + (disabled ? 'Flash security/load error' : 'OK') + ') ' + String.fromCharCode(disabled ? 10006 : 10003), disabled ? 2: 1);

    if (disabled || bNoDisable) {
      if (sm2.useFlashBlock && sm2.oMC) {
        sm2.oMC.className = getSWFCSS() + ' ' + (sm2.getMoviePercent() === null?swfCSS.swfTimedout:swfCSS.swfError);
      }
      processOnEvents({type:'ontimeout', error:error, ignoreInit: true});
      debugTS('onload', false);
      catchError(error);
      result = false;
    } else {
      debugTS('onload', true);
    }

    if (!disabled) {
      if (sm2.waitForWindowLoad && !windowLoaded) {
        _wDS('waitOnload');
        event.add(window, 'load', initUserOnload);
      } else {
        // <d>
        if (sm2.waitForWindowLoad && windowLoaded) {
          _wDS('docLoaded');
        }
        // </d>
        initUserOnload();
      }
    }

    return result;

  };

  /**
  * apply top-level setupOptions object as local properties, eg., this.setupOptions.flashVersion -> this.flashVersion (soundManager.flashVersion)
  * this maintains backward compatibility, and allows properties to be defined separately for use by soundManager.setup().
  */

  setProperties = function() {

    var i,
    o = sm2.setupOptions;

    for (i in o) {

      if (o.hasOwnProperty(i)) {

        // assign local property if not already defined

        if (sm2[i] === _undefined) {

          sm2[i] = o[i];

        } else if (sm2[i] !== o[i]) {

          // legacy support: write manually-assigned property (eg., soundManager.url) back to setupOptions to keep things in sync
          sm2.setupOptions[i] = sm2[i];

        }

      }

    }

  };


  init = function() {

    // called after onload()

    if (didInit) {
      _wDS('didInit');
      return false;
    }

    function cleanup() {
      event.remove(window, 'load', sm2.beginDelayedInit);
    }

    if (sm2.html5Only) {
      if (!didInit) {
        // we don't need no steenking flash!
        cleanup();
        sm2.enabled = true;
        initComplete();
      }
      return true;
    }

    // flash path
    initMovie();

    try {

      // attempt to talk to Flash
      flash._externalInterfaceTest(false);

      // apply user-specified polling interval, OR, if "high performance" set, faster vs. default polling
      // (determines frequency of whileloading/whileplaying callbacks, effectively driving UI framerates)
      setPolling(true, (sm2.flashPollingInterval || (sm2.useHighPerformance ? 10 : 50)));

      if (!sm2.debugMode) {
        // stop the SWF from making debug output calls to JS
        flash._disableDebug();
      }

      sm2.enabled = true;
      debugTS('jstoflash', true);

      if (!sm2.html5Only) {
        // prevent browser from showing cached page state (or rather, restoring "suspended" page state) via back button, because flash may be dead
        // http://www.webkit.org/blog/516/webkit-page-cache-ii-the-unload-event/
        event.add(window, 'unload', doNothing);
      }

    } catch(e) {

      sm2._wD('js/flash exception: ' + e.toString());
      debugTS('jstoflash', false);
      catchError({type:'JS_TO_FLASH_EXCEPTION', fatal:true});
      // don't disable, for reboot()
      failSafely(true);
      initComplete();

      return false;

    }

    initComplete();

    // disconnect events
    cleanup();

    return true;

  };

  domContentLoaded = function() {

    if (didDCLoaded) {
      return false;
    }

    didDCLoaded = true;

    // assign top-level soundManager properties eg. soundManager.url
    setProperties();

    initDebug();

    /**
    * Temporary feature: allow force of HTML5 via URL params: sm2-usehtml5audio=0 or 1
    * Ditto for sm2-preferFlash, too.
    */
    // <d>
    (function(){

      var a = 'sm2-usehtml5audio=',
      a2 = 'sm2-preferflash=',
      b = null,
      b2 = null,
      l = wl.toLowerCase();

      if (l.indexOf(a) !== -1) {
        b = (l.charAt(l.indexOf(a)+a.length) === '1');
        if (hasConsole) {
          console.log((b?'Enabling ':'Disabling ')+'useHTML5Audio via URL parameter');
        }
        sm2.setup({
          'useHTML5Audio': b
        });
      }

      if (l.indexOf(a2) !== -1) {
        b2 = (l.charAt(l.indexOf(a2)+a2.length) === '1');
        if (hasConsole) {
          console.log((b2?'Enabling ':'Disabling ')+'preferFlash via URL parameter');
        }
        sm2.setup({
          'preferFlash': b2
        });
      }

    }());
    // </d>

    if (!hasFlash && sm2.hasHTML5) {
      sm2._wD('SoundManager 2: No Flash detected' + (!sm2.useHTML5Audio ? ', enabling HTML5.' : '. Trying HTML5-only mode.'), 1);
      sm2.setup({
        'useHTML5Audio': true,
        // make sure we aren't preferring flash, either
        // TODO: preferFlash should not matter if flash is not installed. Currently, stuff breaks without the below tweak.
        'preferFlash': false
      });
    }

    testHTML5();

    if (!hasFlash && needsFlash) {
      messages.push(strings.needFlash);
      // TODO: Fatal here vs. timeout approach, etc.
      // hack: fail sooner.
      sm2.setup({
        'flashLoadTimeout': 1
      });
    }

    if (doc.removeEventListener) {
      doc.removeEventListener('DOMContentLoaded', domContentLoaded, false);
    }

    initMovie();

    return true;

  };

  domContentLoadedIE = function() {

    if (doc.readyState === 'complete') {
      domContentLoaded();
      doc.detachEvent('onreadystatechange', domContentLoadedIE);
    }

    return true;

  };

  winOnLoad = function() {

    // catch edge case of initComplete() firing after window.load()
    windowLoaded = true;

    // catch case where DOMContentLoaded has been sent, but we're still in doc.readyState = 'interactive'
    domContentLoaded();

    event.remove(window, 'load', winOnLoad);

  };

  /**
  * miscellaneous run-time, pre-init stuff
  */

  preInit = function() {

    if (mobileHTML5) {

      // prefer HTML5 for mobile + tablet-like devices, probably more reliable vs. flash at this point.

      // <d>
      if (!sm2.setupOptions.useHTML5Audio || sm2.setupOptions.preferFlash) {
        // notify that defaults are being changed.
        messages.push(strings.mobileUA);
      }
      // </d>

      sm2.setupOptions.useHTML5Audio = true;
      sm2.setupOptions.preferFlash = false;

      if (is_iDevice || (isAndroid && !ua.match(/android\s2\.3/i))) {
        // iOS and Android devices tend to work better with a single audio instance, specifically for chained playback of sounds in sequence.
        // common use case: exiting sound onfinish() -> createSound() -> play()
        // <d>
        messages.push(strings.globalHTML5);
        // </d>
        if (is_iDevice) {
          sm2.ignoreFlash = true;
        }
        useGlobalHTML5Audio = true;
      }

    }

  };

  preInit();

  // sniff up-front
  detectFlash();

  // focus and window load, init (primarily flash-driven)
  event.add(window, 'focus', handleFocus);
  event.add(window, 'load', delayWaitForEI);
  event.add(window, 'load', winOnLoad);

  if (doc.addEventListener) {

    doc.addEventListener('DOMContentLoaded', domContentLoaded, false);

  } else if (doc.attachEvent) {

    doc.attachEvent('onreadystatechange', domContentLoadedIE);

  } else {

    // no add/attachevent support - safe to assume no JS -> Flash either
    debugTS('onload', false);
    catchError({type:'NO_DOM2_EVENTS', fatal:true});

  }

} // SoundManager()

// SM2_DEFER details: http://www.schillmania.com/projects/soundmanager2/doc/getstarted/#lazy-loading

if (window.SM2_DEFER === undefined || !SM2_DEFER) {
  soundManager = new SoundManager();
}

/**
* SoundManager public interfaces
* ------------------------------
*/

if (typeof module === 'object' && module && typeof module.exports === 'object') {

  /**
  * commonJS module
  * note: SM2 requires a window global due to Flash, which makes calls to window.soundManager.
  * flash may not always be needed, but this is not known until async init and SM2 may even "reboot" into Flash mode.
  */

  window.soundManager = soundManager;

  module.exports.SoundManager = SoundManager;
  module.exports.soundManager = soundManager;

} else if (typeof define === 'function' && define.amd) {

  // AMD - requireJS

  define('SoundManager', [], function() {
    return {
      SoundManager: SoundManager,
      soundManager: soundManager
    };
  });

} else {

  // standard browser case

  window.SoundManager = SoundManager; // constructor
  window.soundManager = soundManager; // public API, flash callbacks etc.

}

}(window));


/**
*
* SoundManager 2 Demo: Play MP3 links "in-place"
* ----------------------------------------------
*
* http://schillmania.com/projects/soundmanager2/
*
* A simple demo making MP3s playable "inline"
* and easily styled/customizable via CSS.
*
* Requires SoundManager 2 Javascript API.
*
*/

function InlinePlayer() {
  var self = this;
  var pl = this;
  var sm = soundManager; // soundManager instance
  var isIE = (navigator.userAgent.match(/msie/i));
  this.playableClass = 'inline-playable'; // CSS class for forcing a link to be playable (eg. doesn't have .MP3 in it)
  this.excludeClass = 'inline-exclude'; // CSS class for ignoring MP3 links
  this.links = [];
  this.sounds = [];
  this.soundsByURL = [];
  this.indexByURL = [];
  this.lastSound = null;
  this.soundCount = 0;

  this.config = {
    playNext: false, // stop after one sound, or play through list until end
    autoPlay: false  // start playing the first sound right away
  }

  this.css = {
    // CSS class names appended to link during various states
    sDefault: 'sm2_link', // default state
    sLoading: 'sm2_loading',
    sPlaying: 'sm2_playing',
    sPaused: 'sm2_paused'
  }

  this.addEventHandler = (typeof window.addEventListener !== 'undefined' ? function(o, evtName, evtHandler) {
    return o.addEventListener(evtName,evtHandler,false);
  } : function(o, evtName, evtHandler) {
    o.attachEvent('on'+evtName,evtHandler);
  });

  this.removeEventHandler = (typeof window.removeEventListener !== 'undefined' ? function(o, evtName, evtHandler) {
    return o.removeEventListener(evtName,evtHandler,false);
  } : function(o, evtName, evtHandler) {
    return o.detachEvent('on'+evtName,evtHandler);
  });

  this.classContains = function(o,cStr) {
    return (typeof(o.className)!='undefined'?o.className.match(new RegExp('(\\s|^)'+cStr+'(\\s|$)')):false);
  }

  this.addClass = function(o,cStr) {
    if (!o || !cStr || self.classContains(o,cStr)) return false;
    o.className = (o.className?o.className+' ':'')+cStr;
  }

  this.removeClass = function(o,cStr) {
    if (!o || !cStr || !self.classContains(o,cStr)) return false;
    o.className = o.className.replace(new RegExp('( '+cStr+')|('+cStr+')','g'),'');
  }

  this.getSoundByURL = function(sURL) {
    return (typeof self.soundsByURL[sURL] != 'undefined'?self.soundsByURL[sURL]:null);
  }

  this.isChildOfNode = function(o,sNodeName) {
    if (!o || !o.parentNode) {
      return false;
    }
    sNodeName = sNodeName.toLowerCase();
    do {
      o = o.parentNode;
    } while (o && o.parentNode && o.nodeName.toLowerCase() != sNodeName);
    return (o.nodeName.toLowerCase() == sNodeName?o:null);
  }

  this.events = {

    // handlers for sound events as they're started/stopped/played

    play: function() {
      pl.removeClass(this._data.oLink,this._data.className);
      this._data.className = pl.css.sPlaying;
      pl.addClass(this._data.oLink,this._data.className);
    },

    stop: function() {
      pl.removeClass(this._data.oLink,this._data.className);
      this._data.className = '';
    },

    pause: function() {
      pl.removeClass(this._data.oLink,this._data.className);
      this._data.className = pl.css.sPaused;
      pl.addClass(this._data.oLink,this._data.className);
    },

    resume: function() {
      pl.removeClass(this._data.oLink,this._data.className);
      this._data.className = pl.css.sPlaying;
      pl.addClass(this._data.oLink,this._data.className);
    },

    finish: function() {
      pl.removeClass(this._data.oLink,this._data.className);
      this._data.className = '';
      if (pl.config.playNext) {
        var nextLink = (pl.indexByURL[this._data.oLink.getAttribute('data-twurl')]+1);
        if (nextLink<pl.links.length) {
          pl.handleClick({'target':pl.links[nextLink]});
        }
      }
    }

  }

  this.stopEvent = function(e) {
    if (typeof e != 'undefined' && typeof e.preventDefault != 'undefined') {
      e.preventDefault();
    } else if (typeof event != 'undefined' && typeof event.returnValue != 'undefined') {
      event.returnValue = false;
    }
    return false;
  }

  this.getTheDamnLink = (isIE)?function(e) {
    // I really didn't want to have to do this.
    return (e && e.target?e.target:window.event.srcElement);
  }:function(e) {
    return e.target;
  }

  this.handleClick = function(e) {
    // a sound link was clicked
    if (typeof e.button != 'undefined' && e.button>1) {
      // ignore right-click
      return true;
    }
    var o = self.getTheDamnLink(e);
    if (o.nodeName.toLowerCase() != 'a') {
      o = self.isChildOfNode(o,'a');
      if (!o) return true;
    }
    var sURL = o.getAttribute('data-twurl');
    if (!o.getAttribute('data-twurl') || (!sm.canPlayLink(o) && !self.classContains(o,self.playableClass)) || self.classContains(o,self.excludeClass)) {
      return true; // pass-thru for non-MP3/non-links
    }
    var soundURL = (o.getAttribute('data-twurl'));
    var thisSound = self.getSoundByURL(soundURL);
    if (thisSound) {
      // already exists
      if (thisSound == self.lastSound) {
        // and was playing (or paused)
        thisSound.togglePause();
      } else {
        // different sound
        sm._writeDebug('sound different than last sound: '+self.lastSound.id);
        if (self.lastSound) {
          self.stopSound(self.lastSound);
        }
        thisSound.togglePause(); // start playing current
      }
    } else {
      // stop last sound
      if (self.lastSound) {
        self.stopSound(self.lastSound);
      }
      // create sound
      thisSound = sm.createSound({
        id:'inlineMP3Sound'+(self.soundCount++),
        url:soundURL,
        onplay:self.events.play,
        onstop:self.events.stop,
        onpause:self.events.pause,
        onresume:self.events.resume,
        onfinish:self.events.finish,
        type:(o.type||null)
      });
      // tack on some custom data
      thisSound._data = {
        oLink: o, // DOM node for reference within SM2 object event handlers
        className: self.css.sPlaying
      };
      self.soundsByURL[soundURL] = thisSound;
      self.sounds.push(thisSound);
      thisSound.play();
    }

    self.lastSound = thisSound; // reference for next call

    if (typeof e != 'undefined' && typeof e.preventDefault != 'undefined') {
      e.preventDefault();
    } else {
      event.returnValue = false;
    }
    return false;
  }

  this.stopSound = function(oSound) {
    soundManager.stop(oSound.id);
    soundManager.unload(oSound.id);
  }

  this.init = function() {
    sm._writeDebug('inlinePlayer.init()');
    var oLinks = document.getElementsByTagName('a');
    // grab all links, look for .mp3
    var foundItems = 0;
    for (var i=0, j=oLinks.length; i<j; i++) {
      if ((sm.canPlayLink(oLinks[i]) || self.classContains(oLinks[i],self.playableClass)) && !self.classContains(oLinks[i],self.excludeClass)) {
        self.addClass(oLinks[i],self.css.sDefault); // add default CSS decoration
        self.links[foundItems] = (oLinks[i]);
        self.indexByURL[oLinks[i].getAttribute('data-twurl')] = foundItems; // hack for indexing
        foundItems++;
      }
    }
    if (foundItems>0) {
      self.addEventHandler(document,'click',self.handleClick);
      if (self.config.autoPlay) {
        self.handleClick({target:self.links[0],preventDefault:function(){}});
      }
    }
    sm._writeDebug('inlinePlayer.init(): Found '+foundItems+' relevant items.');
  }

  this.init();

}
